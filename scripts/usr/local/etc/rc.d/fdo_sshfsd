#!/bin/sh
#
#
# PROVIDE: fdo_sshfsd
# REQUIRE: DAEMON FILESYSTEMS NETWORK netif
# KEYWORD: shutdown
# Add the following lines to /etc/rc.conf to enable fdo_sshfsd:
#
# fdo_sshfsd_enable (bool): Set it to "YES" to enable fdo_sshfsd.
# Default is "NO"
#
#

. /etc/rc.subr

name="fdo_sshfsd"
rcvar=${name}_enable

load_rc_config ${name}
: ${fdo_sshfsd_enable="NO"}
fdo_sshfsd_opts=${fdo_sshfsd_opts:-"rw,allow_other,reconnect,ServerAliveInterval=10"}

status_cmd="${name}_status"
start_cmd="${name}_start"
stop_cmd="${name}_stop"
extra_commands="status"

LRED="\033[1;31m"
LGRN="\033[1;32m"
LBLU="\033[1;34m"
LCYN="\033[1;36m"
CYAN="\033[0;36m"
YELL="\033[1;33m"
ORNG="\033[0;33m"
GREY="\033[0;37m"
DGRY="\033[1;30m"
NRML="\033[0;00m"

CARRIAGE_RETURN="
"

UCL_CMD="/usr/local/bin/uclcmd"
FDO_CONFIG_ROOT=${FDO_CONFIG_ROOT:-"/usr/local/etc/fdo"}
HOST_CONF_PATH=${HOST_CONF_PATH:-"${FDO_CONFIG_ROOT}/host.conf"}
SSHFS_DAEMON_CONF_PATH=${SSHFS_DAEMON_CONF_PATH:-"${FDO_CONFIG_ROOT}/sshfs-daemon.conf"}
SSHFS_DAEMON_KEY_PREFIX="${FDO_CONFIG_ROOT}/sshfs_daemon_keys"
NUM_MOUNT_ATTEMPTS=5

test_configs () {

	# Check that the host.conf file exists.
	if [ ! -e "${HOST_CONF_PATH}" ]
	then
		echo -e "\n${LRED}ERROR:${NRML} The host config file \n       '${ORNG}${HOST_CONF_PATH}${NRML}'"
		echo -e "       appears to be missing.\n       Aborting.\n"
		exit 1
	fi

	# Check that the host.conf file is accessible.
	TEST_UCL=`${UCL_CMD} get -u -f ${HOST_CONF_PATH} .general 2>&1`
	if [ ${?} -ne 0 ] || [ "${TEST_UCL}" = "null" ] || [ "${TEST_UCL}" = "" ]
	then
		echo -e "\n${LRED}ERROR:${NRML} Failed to access the config file '${HOST_CONF_PATH}'!\n       Aborting.\n"
		exit 2
	fi

	# Check that the sshfs-daemon subsystem is initialised.
	SSHFS_DAEMON_SUBSYS_COMPAT=`${UCL_CMD} get -f ${HOST_CONF_PATH} -q .subsystems.sshfs-daemon_compat`
	if [ "${SSHFS_DAEMON_SUBSYS_COMPAT}" = "null" ] || [ "${SSHFS_DAEMON_SUBSYS_COMPAT}" = "" ]
	then
		echo -e "\n${LRED}ERROR:${NRML} It appears that the SSHFS-daemon subsystem is not initialised."
		echo -e "       Consider using the command:"
		echo -e "       ${LBLU}${SCRIPT_NAME} init-sshfs-daemon${NRML}\n       Aborting.\n"
		exit 1
	fi

	# Check that the sshfs-daemon.conf file exists.
	if [ ! -e "${SSHFS_DAEMON_CONF_PATH}" ]
	then
		echo -e "\n${LRED}ERROR:${NRML} The sshfs daemon config file \n       '${ORNG}${HOST_CONF_PATH}${NRML}'"
		echo -e "       appears to be missing.\n       Aborting.\n"
		exit 1
	fi

	# Check that the sshfs-daemon.conf file is accessible.
	TEST_UCL=`${UCL_CMD} get -u -f ${SSHFS_DAEMON_CONF_PATH} .general 2>&1`
	if [ ${?} -ne 0 ] || [ "${TEST_UCL}" = "null" ] || [ "${TEST_UCL}" = "" ]
	then
		echo -e "\n${LRED}ERROR:${NRML} Failed to access the config file '${SSHFS_DAEMON_CONF_PATH}'!\n       Aborting.\n"
		exit 2
	fi

}

is_mounted () {

	IFS=${CARRIAGE_RETURN}
	SSHFS_MOUNTPOINTS=`mount -p -t fusefs.sshfs | awk -F '\t'+ '{print $2}' | awk -F " fusefs.sshfs" '{print $1}'`
	for MOUNTPOINT in ${SSHFS_MOUNTPOINTS}
	do
		if [ "${MOUNTPOINT}" = "${1}" ]
		then
			return 0
		fi
	done
	return 1
}

fdo_sshfsd_start () {

	test_configs

	CONNECTION_INDEX=0
	while [ `${UCL_CMD} get -f ${SSHFS_DAEMON_CONF_PATH} -q .connections.${CONNECTION_INDEX}` != "null" ]
	do
		LOCAL_PATH=`${UCL_CMD} get -f ${SSHFS_DAEMON_CONF_PATH} -q .connections.${CONNECTION_INDEX}.local_path`
		REMOTE_HOST=`${UCL_CMD} get -f ${SSHFS_DAEMON_CONF_PATH} -q .connections.${CONNECTION_INDEX}.remote_host`
		REMOTE_PATH=`${UCL_CMD} get -f ${SSHFS_DAEMON_CONF_PATH} -q .connections.${CONNECTION_INDEX}.remote_path`
		REMOTE_USER=`${UCL_CMD} get -f ${SSHFS_DAEMON_CONF_PATH} -q .connections.${CONNECTION_INDEX}.remote_user`
		REMOTE_PORT=`${UCL_CMD} get -f ${SSHFS_DAEMON_CONF_PATH} -q .connections.${CONNECTION_INDEX}.remote_port`

		REMOTE_URI="${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_PATH}"

		echo -e "\n${YELL}Connecting SSHFS URI: '${NRML}${REMOTE_URI}${YELL}'${NRML}" 

		is_mounted "${LOCAL_PATH}"
		if [ ${?} -eq 0 ]
		then
			echo -e "  ${ORNG}The mount point '${NRML}${LOCAL_PATH}${ORNG}' is already mounted!${NRML}"
		else
			LOCAL_PATH_FLAT=`echo "${LOCAL_PATH}" | sed "s/\//__/g"`
			LOCAL_PATH_MD5=`echo "${LOCAL_PATH}" | md5 -q`
			SSHFS_DAEMON_KEY="${SSHFS_DAEMON_KEY_PREFIX}/${LOCAL_PATH_FLAT}.${LOCAL_PATH_MD5}"
			if [ -f "${SSHFS_DAEMON_KEY}" ]
			then
				echo "SSHFS_DAEMON_KEY=${SSHFS_DAEMON_KEY}"
				SSHFS_DAEMON_MOUNT_OPTIONS="${fdo_sshfsd_opts},IdentityFile=\"${SSHFS_DAEMON_KEY}\""
			fi
			echo -e "  ${YELL}Mounting '${NRML}${LOCAL_PATH}${YELL}' ...${NRML}"
			MOUNT_ATTEMPT=0
			while [ ${MOUNT_ATTEMPT} -lt ${NUM_MOUNT_ATTEMPTS} ]
			do
				MOUNT_ATTEMPT=$(( ${MOUNT_ATTEMPT} + 1 ))
				timeout --foreground 20 /usr/local/bin/sshfs -p "${REMOTE_PORT}" "${REMOTE_URI}" "${LOCAL_PATH}" -o "${SSHFS_DAEMON_MOUNT_OPTIONS}"
				if [ ${?} -eq 0 ]
				then
					echo -e "  ${LGRN}ATTEMPT ${MOUNT_ATTEMPT}: Successfully mounted the remote path.${NRML}"
					break
				else
					echo -e "  ${LRED}ATTEMPT ${MOUNT_ATTEMPT}: Failed to mount the remote path!${NRML}"
				fi
				sleep 10
			done
		fi
		echo -e ""

		CONNECTION_INDEX=$(( ${CONNECTION_INDEX} + 1 ))
	done

}

fdo_sshfsd_stop () {

	test_configs

	CONNECTION_INDEX=0
	while [ `${UCL_CMD} get -f ${SSHFS_DAEMON_CONF_PATH} -q .connections.${CONNECTION_INDEX}` != "null" ]
	do
		LOCAL_PATH=`${UCL_CMD} get -f ${SSHFS_DAEMON_CONF_PATH} -q .connections.${CONNECTION_INDEX}.local_path`
		REMOTE_HOST=`${UCL_CMD} get -f ${SSHFS_DAEMON_CONF_PATH} -q .connections.${CONNECTION_INDEX}.remote_host`
		REMOTE_PATH=`${UCL_CMD} get -f ${SSHFS_DAEMON_CONF_PATH} -q .connections.${CONNECTION_INDEX}.remote_path`
		REMOTE_USER=`${UCL_CMD} get -f ${SSHFS_DAEMON_CONF_PATH} -q .connections.${CONNECTION_INDEX}.remote_user`
		REMOTE_PORT=`${UCL_CMD} get -f ${SSHFS_DAEMON_CONF_PATH} -q .connections.${CONNECTION_INDEX}.remote_port`

		REMOTE_URI="${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_PATH}"

		echo -e "\n${YELL}Disconnecting SSHFS URI: '${NRML}${REMOTE_URI}${YELL}'${NRML}" 

		is_mounted "${LOCAL_PATH}"
		if [ ${?} -eq 0 ]
		then
			echo -e "  ${YELL}Unmounting '${NRML}${LOCAL_PATH}${YELL}' ...${NRML}"
			umount ${LOCAL_PATH}
			if [ ${?} -eq 0 ]
			then
				echo -e "  ${LGRN}Successfully unmounted the remote path.${NRML}"
			else
				echo -e "  ${LRED}Failed to unmount the remote path!${NRML}"
			fi
		else
			echo -e "  ${ORNG}The mount point '${NRML}${LOCAL_PATH}${ORNG}' is not mounted!${NRML}"
		fi
		echo -e ""

		CONNECTION_INDEX=$(( ${CONNECTION_INDEX} + 1 ))
	done

}

fdo_sshfsd_status () {

	test_configs

	CONNECTION_INDEX=0
	while [ `${UCL_CMD} get -f ${SSHFS_DAEMON_CONF_PATH} -q .connections.${CONNECTION_INDEX}` != "null" ]
	do
		LOCAL_PATH=`${UCL_CMD} get -f ${SSHFS_DAEMON_CONF_PATH} -q .connections.${CONNECTION_INDEX}.local_path`
		REMOTE_HOST=`${UCL_CMD} get -f ${SSHFS_DAEMON_CONF_PATH} -q .connections.${CONNECTION_INDEX}.remote_host`
		REMOTE_PATH=`${UCL_CMD} get -f ${SSHFS_DAEMON_CONF_PATH} -q .connections.${CONNECTION_INDEX}.remote_path`
		REMOTE_USER=`${UCL_CMD} get -f ${SSHFS_DAEMON_CONF_PATH} -q .connections.${CONNECTION_INDEX}.remote_user`
		REMOTE_PORT=`${UCL_CMD} get -f ${SSHFS_DAEMON_CONF_PATH} -q .connections.${CONNECTION_INDEX}.remote_port`

		REMOTE_URI="${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_PATH}"

		echo -e "\n${YELL}Status of SSHFS URI: '${NRML}${REMOTE_URI}${YELL}'${NRML}" 

		is_mounted "${LOCAL_PATH}"
		if [ ${?} -eq 0 ]
		then
			echo -e "  ${LGRN}The mount point '${NRML}${LOCAL_PATH}${LGRN}' is mounted.${NRML}\n"
		else
			echo -e "  ${ORNG}The mount point '${NRML}${LOCAL_PATH}${ORNG}' is not mounted.${NRML}\n"
		fi

		CONNECTION_INDEX=$(( ${CONNECTION_INDEX} + 1 ))
	done

}

run_rc_command "$1"
