#!/bin/sh

# Copyright (c) 2016 Euan Thoms <euan@potensol.com>.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


##### GLOBAL STATIC VARIABLE DECLARATIONS ######################################

SCRIPT_NAME=`basename ${0}`
HOST_NAME="${1}"
HOST_IP="${2}"
NUM_MANDATORY_ARGS=2
IS_INTERACTIVE="yes"
DNS_CACHE_SERVER_FOUND="no"
FDO_SERVER_SCRIPT=${FDO_SERVER_SCRIPT:-"fdo-server"}

TERM="xterm"
LRED="\033[1;31m"
LGRN="\033[1;32m"
LBLU="\033[1;34m"
LCYN="\033[1;36m"
CYAN="\033[0;36m"
YELL="\033[1;33m"
ORNG="\033[0;33m"
GREY="\033[0;37m"
DGRY="\033[1;30m"
NRML="\033[0;00m"

CARRIAGE_RETURN="
"

##### COMMAND USAGE INFO #######################################################

usage ()
{
	if [ "${NO_DISPLAY_USAGE}" = "yes" ]
	then
		return 1
	fi

	echo -e ""
	echo -e "${LCYN}    ---- ${SCRIPT_NAME} command usage ----${NRML}"
	echo -e ""
	echo -e "${YELL}Description:${NRML} Add hostname zone to FDo dns_cache jail services on this host."
	echo -e ""
	echo -e "${YELL}Usage:   ${LGRN}${SCRIPT_NAME} hostname ip_address [--non-interactive]${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} site1.example.net 10.0.11.20${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} site2.example.net 10.0.11.21 --non-interactive${NRML}"
	echo -e ""
	echo -e "${YELL}Options:${NRML}"
	echo -e "${YELL}         --non-interactive ; will not prompt or commit changes to the config repo.${NRML}"
	echo -e ""
}


##### PARSE ARGUMENTS ##########################################################

ARG_INDEX=1
for ARG in "${@}"
do
	if [ ${ARG_INDEX} -gt ${NUM_MANDATORY_ARGS} ]
	then
		OPTIONAL_ARG_NAME=`echo ${ARG} | cut -d= -f1`
		OPTIONAL_ARG_VALUE=`echo ${ARG} | cut -d= -f2`
		case ${OPTIONAL_ARG_NAME} in
			--non-interactive)
				IS_INTERACTIVE="no"
				;;
			*)
				echo -e "\n${LRED}ERROR:${NRML} Invalid argument!\n       Aborting.\n"
				usage
				exit 1
				;;
		esac
	fi

	ARG_INDEX=$(( ${ARG_INDEX} + 1 ))

done


##### FUNCTIONS ################################################################

# source readee function
. /usr/local/bin/fdo-readee

question_yes_no ()
{
	while true
		do
		echo -e "${LCYN}${1}${NRML}"
		readee -p "${LCYN}(yes/no): ${NRML}" ANSWER
		if [ "${ANSWER}" = "yes" ] || [ "${ANSWER}" = "no" ]
		then
			break
		fi
		echo ""
	done
}

test_valid_inet_address ()
{

	TEST_CASE="${1}"

	VALID_INET_ADDRESS="yes"

	if [ "${TEST_CASE}" = "" ]
	then
		VALID_INET_ADDRESS="no"
		return 1
	fi

	IS_SYNTAX_OK=`echo "${TEST_CASE}" | sed "s/^[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}$//" | wc -L`
	if [ ${IS_SYNTAX_OK}  -ne 0 ]
	then
		VALID_INET_ADDRESS="no"
		return 2
	fi

	NO_ZEROS_IN_FRONT=`echo "${TEST_CASE}" | sed "s/\.0[0-9]//" | sed "s/^0//"`
	if [ "${NO_ZEROS_IN_FRONT}" != "${TEST_CASE}" ]
	then
		VALID_INET_ADDRESS="no"
		return 3
	fi

	ONE=`echo "${TEST_CASE}" | cut -d. -f1`
	TWO=`echo "${TEST_CASE}" | cut -d. -f2`
	THREE=`echo "${TEST_CASE}" | cut -d. -f3`
	FOUR=`echo "${TEST_CASE}" | cut -d. -f4`

	if [ ${ONE} -gt 255 ] || [ ${TWO} -gt 255 ] || [ ${THREE} -gt 255 ] || [ ${FOUR} -gt 255 ]
	then
		VALID_INET_ADDRESS="no"
		return 4
	fi

}

test_valid_fqhn ()
{

	TEST_CASE="${1}"

	VALID_FQHN="yes"

	if [ "${TEST_CASE}" = "" ]
	then
		VALID_FQHN="no"
		return 1
	fi

	IS_SYNTAX_OK=`echo "${TEST_CASE}" | sed -r "s/^((([a-zA-Z0-9]+[\-])*[a-zA-Z0-9]+)+\.)+[a-zA-Z0-9]+//" | wc -L`
	if [ ${IS_SYNTAX_OK}  -ne 0 ]
	then
		VALID_FQHN="no"
		return 2
	fi

}

test_if_host ()
{
	procstat 0 > /dev/null 2>&1
	if [ ${?} -eq 0 ]
	then
		IS_HOST=yes
	else
		IS_HOST=no
	fi
}


##### SANITY TESTS #############################################################

if [ ${#} -lt ${NUM_MANDATORY_ARGS} ]
then
	echo -e "\n${LRED}ERROR:${NRML} Incorrect number of arguments!\n       Aborting.\n"
	usage
	exit 2
fi

test_if_host

if [ "${IS_HOST}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} This command must be run from the host!\n       Aborting.\n"
	exit 3
fi

# Check that the hostname is valid.
test_valid_fqhn  "${HOST_NAME}"
if [ "${VALID_FQHN}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The hostname '${HOST_NAME}' is invalid!"
	echo -e "       It must only contain letters, numbers, periods and hyphens."
	echo -e "       It must not begin or end with a hyphen or a period."
	echo -e "       Aborting.\n"
	exit 4
fi

# Test if ip_address is valid
test_valid_inet_address "${HOST_IP}"
if [ "${VALID_INET_ADDRESS}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} IP address is invalid!"
	echo -e "       Aborting.\n"
	exit 5
fi


##### MAIN EXECUTION THREAD ####################################################

ERROR_COUNT=0

# Iterate through all jails...
for JAIL_NAME in `ls -1 /jls | cut -d/ -f1 | egrep -v "template"`
do
	# ...and if a bind server exists...
	if [ -f "/jls/${JAIL_NAME}/usr/local/etc/namedb/named.conf" ]
	then
		# ...determine if it's a caching server
		cat /jls/${JAIL_NAME}/usr/local/etc/namedb/named.conf | egrep "^( )*forwarders {" > /dev/null 2>&1
		if [ ${?} -eq 0 ] 
		then

			DNS_CACHE_SERVER_FOUND=yes

			# Now that we've found a caching server, let's see if the record already exists:
			cat /jls/${JAIL_NAME}/usr/local/etc/namedb/named.conf | egrep "^zone \"${HOST_NAME}\"" > /dev/null 2>&1
			if [ ${?} -eq 0 ]
			then
				echo -e "\n${LRED}ERROR:${NRML} The record for hostname '${HOST_NAME}' already exists!"
				echo -e "       Aborting.\n"
				exit 6
			fi

			# Since it does not already exist, let's add a zone for our new hostname record:

			# - Add zone entry in named.conf
			echo "zone \"${HOST_NAME}\" { type master; file \"/usr/local/etc/namedb/master/${HOST_NAME}.db\"; };" >> /jls/${JAIL_NAME}/usr/local/etc/namedb/named.conf

			# - Create the master zone file
			DATE=`date "+%Y%m%d"`
			echo "" > /jls/${JAIL_NAME}/usr/local/etc/namedb/master/${HOST_NAME}.db
			echo "\$TTL 3h" >> /jls/${JAIL_NAME}/usr/local/etc/namedb/master/${HOST_NAME}.db
			echo "@ SOA @ nobody.localhost. ${DATE}01 1d 12h 1w 3h ;" >> /jls/${JAIL_NAME}/usr/local/etc/namedb/master/${HOST_NAME}.db
			echo "                        ; Serial, Refresh, Retry, Expire, Neg. cache TTL" >> /jls/${JAIL_NAME}/usr/local/etc/namedb/master/${HOST_NAME}.db
			echo "" >> /jls/${JAIL_NAME}/usr/local/etc/namedb/master/${HOST_NAME}.db
			echo "        IN      NS      ${HOST_NAME}." >> /jls/${JAIL_NAME}/usr/local/etc/namedb/master/${HOST_NAME}.db
			echo "" >> /jls/${JAIL_NAME}/usr/local/etc/namedb/master/${HOST_NAME}.db
			echo "${HOST_NAME}.        A       ${HOST_IP}" >> /jls/${JAIL_NAME}/usr/local/etc/namedb/master/${HOST_NAME}.db

			# - Reload bind server
			JAIL_ID_FILE=`ls -1 /var/run/jail_${JAIL_NAME}.id | head -1`
			JAIL_ID=`cat ${JAIL_ID_FILE}`
			echo -e "\n${YELL}Reloading the named service...${NRML}\n"
			jexec ${JAIL_ID} service named reload > /dev/null 2>&1
			if [ ${?} -ne 0 ]
			then
				echo -e "\n${ORNG}WARNING:${NRML} Failed to reload named service in jail '${JAIL_NAME}'!\n"
			else
				echo -e "${YELL}INFO:${NRML} Successfully updated bind9 DNS server in jail '${JAIL_NAME}'!\n"
			fi

			# Update configuration in the local repo and if interactive mode then push to remote repo
			if [ "${IS_INTERACTIVE}" = "no" ]
			then
				echo -e "\n${FDO_SERVER_SCRIPT} update-config /jls/${JAIL_NAME}/usr/local/etc/namedb/named.conf ...\n"
				CHANGE_MESSAGE="add hostname '${HOST_NAME}' to caching DNS" GIT_NO_PUSH="yes" FETCH_LATEST_SELF="no" ${FDO_SERVER_SCRIPT} update-config /jls/${JAIL_NAME}/usr/local/etc/namedb/named.conf
				echo -e "\n${FDO_SERVER_SCRIPT} add-config /jls/${JAIL_NAME}/usr/local/etc/namedb/master/${HOST_NAME}.db ...\n"
				GIT_NO_PUSH="yes" FETCH_LATEST_SELF="no" ${FDO_SERVER_SCRIPT} add-config /jls/${JAIL_NAME}/usr/local/etc/namedb/master/${HOST_NAME}.db
			else
				question_yes_no "\nWould you like to update the repo with the config changes? (RECOMMENDED)"
				if [ "${ANSWER}" = "yes" ]
				then
					echo -e "\n${FDO_SERVER_SCRIPT} update-config /jls/${JAIL_NAME}/usr/local/etc/namedb/named.conf ...\n"
					CHANGE_MESSAGE="add hostname '${HOST_NAME}' to caching DNS" GIT_NO_PUSH="yes" FETCH_LATEST_SELF="no" ${FDO_SERVER_SCRIPT} update-config /jls/${JAIL_NAME}/usr/local/etc/namedb/named.conf
					echo -e "\n${FDO_SERVER_SCRIPT} add-config /jls/${JAIL_NAME}/usr/local/etc/namedb/master/${HOST_NAME}.db ...\n"
					FETCH_LATEST_SELF="no" ${FDO_SERVER_SCRIPT} add-config /jls/${JAIL_NAME}/usr/local/etc/namedb/master/${HOST_NAME}.db
				fi
			fi
		fi
	fi
done

if [ "${DNS_CACHE_SERVER_FOUND}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} No caching dns server found!\n       Aborting.\n"
	exit 7
fi

echo -e ""

if [ ${ERROR_COUNT} -gt 0 ]
then
	exit 8
fi

################################################################################
