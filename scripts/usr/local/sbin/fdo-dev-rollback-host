#!/bin/sh

# Copyright (c) 2020 Euan Thoms <euan@potensol.com>.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


##### GLOBAL STATIC VARIABLE DECLARATIONS ######################################

SCRIPT_NAME=`basename ${0}`
SNAPSHOT_NAME="${1}"
NUM_MANDATORY_ARGS=1
FORCE_MODE="no"
POOL=${POOL:-"zroot"}

TERM="xterm"
LRED="\033[1;31m"
LGRN="\033[1;32m"
LBLU="\033[1;34m"
LCYN="\033[1;36m"
CYAN="\033[0;36m"
YELL="\033[1;33m"
ORNG="\033[0;33m"
GREY="\033[0;37m"
DGRY="\033[1;30m"
NRML="\033[0;00m"

CARRIAGE_RETURN="
"

##### COMMAND USAGE INFO #######################################################

usage ()
{
	if [ "${NO_DISPLAY_USAGE}" = "yes" ]
	then
		return 1
	fi

	echo -e ""
	echo -e "${LCYN}    ---- ${SCRIPT_NAME} command usage ----${NRML}"
	echo -e ""
	echo -e "${YELL}Description:${NRML} Rollback the host to a previous snapshot (for development testing)."
	echo -e ""
	echo -e "${YELL}Usage:   ${LGRN}${SCRIPT_NAME} snapshot_name${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} post-init-host${NRML}"
	echo -e ""
	echo -e "${YELL}Options:${NRML}"
	echo -e "${YELL}         --force ; Enables FORCE MODE, forcibly rollback.${NRML}"
	echo -e ""
}


##### PARSE ARGUMENTS ##########################################################

ARG_INDEX=1
for ARG in "${@}"
do
	if [ ${ARG_INDEX} -gt ${NUM_MANDATORY_ARGS} ]
	then
		OPTIONAL_ARG_NAME=`echo ${ARG} | cut -d= -f1`
		OPTIONAL_ARG_VALUE=`echo ${ARG} | cut -d= -f2`
		case ${OPTIONAL_ARG_NAME} in
			--force)
				FORCE_MODE="yes"
				;;
			*)
				echo -e "\n${LRED}ERROR:${NRML} Invalid argument!\n       Aborting.\n"
				usage
				exit 1
				;;
		esac
	fi

	ARG_INDEX=$(( ${ARG_INDEX} + 1 ))

done


##### FUNCTIONS ################################################################

# source readee function
. /usr/local/bin/fdo-readee

question_yes_no ()
{
	while true
	do
		echo -e "${LCYN}${1}${NRML}"
		readee -p "${LCYN}(yes|no): ${NRML}" ANSWER
		if [ "${ANSWER}" = "yes" ] || [ "${ANSWER}" = "no" ]
		then
			break
		fi
		echo ""
	done
}

test_valid_snapshot ()
{

	TEST_CASE="${1}"

	VALID_SNAPSHOT_NAME="yes"

	if [ "${TEST_CASE}" = "" ]
	then
		VALID_SNAPSHOT_NAME="no"
		return 1
	fi

	IS_SYNTAX_OK=`echo "${TEST_CASE}" | sed -r "s/^([a-zA-Z0-9_\-])*//" | wc -L`
	if [ ${IS_SYNTAX_OK}  -ne 0 ]
	then
		VALID_SNAPSHOT_NAME="no"
		return 2
	fi

}

test_if_host ()
{
	procstat 0 > /dev/null 2>&1
	if [ ${?} -eq 0 ]
	then
		IS_HOST=yes
	else
		IS_HOST=no
	fi
}


##### SANITY TESTS #############################################################

if [ ${#} -lt ${NUM_MANDATORY_ARGS} ]
then
	echo -e "\n${LRED}ERROR:${NRML} Incorrect number of arguments!\n       Aborting.\n"
	usage
	exit 1
fi

# Check we are running with root privileges.
if [ `id -u` -ne 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} This command must be run with root (super-user) privileges!\n       Aborting.\n"
	exit 1
fi

test_if_host

if [ "${IS_HOST}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} This command must be run from the host!\n       Aborting.\n"
	exit 1
fi

# Check that the snapshot name is valid.
test_valid_snapshot  "${SNAPSHOT_NAME}"
if [ "${VALID_SNAPSHOT_NAME}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The snapshot name '${SNAPSHOT_NAME}' is invalid!"
	echo -e "       It must only contain letters, numbers, underscores and hyphens."
	echo -e "       Aborting.\n"
	exit 1
fi

# Check that the snapshot exists.
zfs list ${POOL}@${SNAPSHOT_NAME} > /dev/null 2>&1
if [ ${?} -ne 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} The snapshot '${POOL}@${SNAPSHOT_NAME}' does not appear to exist!\n       Aborting.\n"
	exit 1
fi


##### MAIN EXECUTION THREAD ####################################################

ERROR_COUNT=0

if [ "${FORCE_MODE}" = "yes" ]
then
	ROLLBACK_FLAGS="-Rf"
else
	ROLLBACK_FLAGS="-r"
fi

echo -e "\n${ORNG}WARNING:${NRML} This is a developer feature!"
question_yes_no "\nAre you sure you want to rollback ${POOL} filesystems? Data could be lost. [CAUTION]"
if [ "${ANSWER}" = "no" ]
then
	echo -e "\n${YELL}INFO:${NRML} operation aborted by user.\n"
	exit 0
fi

echo -e ""

# Store bash history as variable.
if [ -f "~/.bash_history" ]
then
	BASH_HISTORY=`cat ~/.bash_history`
fi

# Recursively rollback all filesystems in POOL to SNAPSHOT_NAME.
for FILESYSTEM in `zfs list -H -o name -r ${POOL}`
do
	zfs rollback ${ROLLBACK_FLAGS} "${FILESYSTEM}@${SNAPSHOT_NAME}"
done

sleep 8

# Set hostname back to what it was at time of snapshot.
HOSTNAME=`sysrc -n hostname`
hostname ${HOSTNAME}

# Restore current bash history.
if [ -n "${BASH_HISTORY}" ]
then
	echo "${BASH_HISTORY}" > ~/.bash_history
fi

echo -e ""

################################################################################
