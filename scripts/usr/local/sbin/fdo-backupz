#!/bin/sh

# Copyright (c) 2016 Euan Thoms <euan@potensol.com>.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


##### GLOBAL STATIC VARIABLE DECLARATIONS ######################################

SCRIPT_NAME=`basename $0`
DAV_SERVER_USERID=`cat /usr/local/etc/fdo/webdav_userid.conf`
DAV_SERVER_GROUPID=`cat /usr/local/etc/fdo/webdav_groupid.conf`
DATE_CMD=/bin/date
DATE_VERSION="freebsd" #choices of "freebsd" and "gnu"
NOW=`${DATE_CMD} +%Y-%m-%d_%H-%M`
POOL=${1}
BACKUP_POOL=${2}
NUM_MANDATORY_ARGS=2
DAY_IN_SECS=86400
CLONE_WINDOW_DAYS=5
NOW_IN_SECS=`${DATE_CMD} +%s`
DESTROY_BEFORE=`expr ${NOW_IN_SECS} - \( ${CLONE_WINDOW_DAYS} \* ${DAY_IN_SECS} \)`
ZFS_SEND_FLAGS=`cat /usr/local/etc/fdo/backupz_send_flags.conf`
WARNING_CODE=0
WARNING_SNAPSHOT="NULL"
ERROR_CODE=0
ERROR_SNAPSHOT="NULL"

TERM="xterm"
LRED="\033[1;31m"
LGRN="\033[1;32m"
LBLU="\033[1;34m"
LCYN="\033[1;36m"
CYAN="\033[0;36m"
YELL="\033[1;33m"
ORNG="\033[0;33m"
GREY="\033[0;37m"
DGRY="\033[1;30m"
NRML="\033[0;00m"

CARRIAGE_RETURN="
"

##### COMMAND USAGE INFO #######################################################

usage ()
{
	if [ "${NO_DISPLAY_USAGE}" = "yes" ]
	then
		return 1
	fi

	echo -e ""
	echo -e "${LCYN}    ---- ${SCRIPT_NAME} command usage ----${NRML}"
	echo -e ""
	echo -e "${YELL}Usage:   ${LGRN}${SCRIPT_NAME} pool_to_backup backup_pool${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} zroot backup${NRML}"
	echo -e ""
}

##### PARSE ARGUMENTS ##########################################################

ARG_INDEX=1
for ARG in "${@}"
do
	if [ ${ARG_INDEX} -gt ${NUM_MANDATORY_ARGS} ]
	then
		OPTIONAL_ARG_NAME=`echo ${ARG} | cut -d= -f1`
		OPTIONAL_ARG_VALUE=`echo ${ARG} | cut -d= -f2`
		case ${OPTIONAL_ARG_NAME} in
			*)
				echo -e "\n${LRED}ERROR:${NRML} Invalid argument!\n       Aborting.\n"
				usage
				exit 1
				;;
		esac
	fi

	ARG_INDEX=$(( ${ARG_INDEX} + 1 ))

done


##### SANITY TESTS #############################################################

if [ ${#} -lt ${NUM_MANDATORY_ARGS} ]
then
	echo -e "\n${LRED}ERROR:${NRML} Incorrect number of arguments!\n       Aborting.\n"
	usage
	exit 2
fi

BACKUP_POOL_ATTRIBUTES=`zpool list -H | egrep "^${BACKUP_POOL}	" 2> /dev/null`
if [ ${?} -ne 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} The backup pool '${BACKUP_POOL}' does not appear to be imported.\n       Aborting.\n"
	exit 3
fi

BACKUP_POOL_HEALTH=`echo ${BACKUP_POOL_ATTRIBUTES} | awk '{print $9}'`
if [ "${BACKUP_POOL_HEALTH}" != "ONLINE" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The backup pool '${BACKUP_POOL}' appears to be unhealthy.\n       Aborting.\n"
	exit 4
fi

POOL_ATTRIBUTES=`zpool list -H | egrep "^${POOL}	" 2> /dev/null`
if [ ${?} -ne 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} The pool '${POOL}' does not appear to be imported.\n       Aborting.\n"
	exit 5
fi

POOL_HEALTH=`echo ${POOL_ATTRIBUTES} | awk '{print $9}'`
if [ "${POOL_HEALTH}" != "ONLINE" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The pool '${POOL}' appears to be unhealthy.\n       Aborting.\n"
	exit 6
fi

BACKUP_POOL_ROOT_PATH=`zfs list -H ${BACKUP_POOL} | awk '{print $5}'`

if [ -f ${BACKUP_POOL_ROOT_PATH}/last-backupz-error-${POOL}@${BACKUP_POOL}.inf ]
then
	echo -e "\n${LRED}ERROR:${NRML} The last backup from '${POOL}' to '${BACKUP_POOL}' failed!\n       Aborting.\n"
	exit 7
fi

if [ -f ${BACKUP_POOL_ROOT_PATH}/backupz-${POOL}-running.inf ]
then
	echo -e "\n${LRED}ERROR:${NRML} There apppers to be a backup running for '${POOL}'!\n       Aborting.\n"
	exit 8
fi

################################################################################


##### FUNCTIONS ################################################################

warning_occured () {
	echo "backup timestamp: ${NOW}" >> ${BACKUP_POOL_ROOT_PATH}/backupz-warning-${POOL}@${BACKUP_POOL}.inf
	echo "snapshot: ${WARNING_SNAPSHOT}" >> ${BACKUP_POOL_ROOT_PATH}/backupz-warning-${POOL}@${BACKUP_POOL}.inf
	echo "warning code: ${WARNING_CODE}" >> ${BACKUP_POOL_ROOT_PATH}/backupz-warning-${POOL}@${BACKUP_POOL}.inf
}

error_occured () {
	echo "backup timestamp: ${NOW}" > ${BACKUP_POOL_ROOT_PATH}/last-backupz-error-${POOL}@${BACKUP_POOL}.inf
	echo "snapshot: ${ERROR_SNAPSHOT}" >> ${BACKUP_POOL_ROOT_PATH}/last-backupz-error-${POOL}@${BACKUP_POOL}.inf
	echo "error code: ${ERROR_CODE}" >> ${BACKUP_POOL_ROOT_PATH}/last-backupz-error-${POOL}@${BACKUP_POOL}.inf
	rm ${BACKUP_POOL_ROOT_PATH}/backupz-${POOL}-running.inf
	exit 9
}

################################################################################


##### MAIN EXECUTION THREAD ####################################################

# Create log dataset if log directory doesn't already exist.
if [ ! -d ${BACKUP_POOL_ROOT_PATH}/log ]
then
	zfs create -o mountpoint=${BACKUP_POOL_ROOT_PATH}/log -o compression=on ${BACKUP_POOL}/log
fi

if [ -f ${BACKUP_POOL_ROOT_PATH}/last-successful-backupz-${POOL}@${BACKUP_POOL}.inf ]
then
	PREVIOUS=`cat ${BACKUP_POOL_ROOT_PATH}/last-successful-backupz-${POOL}@${BACKUP_POOL}.inf`
else
	PREVIOUS="last-successful-backupz-missing"
fi

echo "Previous backup: ${PREVIOUS}"


echo ${NOW} > ${BACKUP_POOL_ROOT_PATH}/backupz-${POOL}-running.inf

# Recursively snapshot pool_to_backup.
zfs snapshot -r ${POOL}@${NOW}

zfs list -H -t all -r ${POOL} | awk '{print $1}' > /tmp/backupz-${POOL}@${BACKUP_POOL}-datasets.list
zfs list -H -t snapshot -r ${BACKUP_POOL} | awk '{print $1}' > /tmp/backupz-${POOL}@${BACKUP_POOL}-snapshots.list

SNAPSHOT_NAMES=`cat /tmp/backupz-${POOL}@${BACKUP_POOL}-datasets.list | grep ${NOW}`

# Recusively unmount backup pool filesystems
for FILESYSTEM_TO_UNMOUNT in `zfs list -r ${BACKUP_POOL}/${POOL} | awk '{print $1}' | tail +2 | sort -r`
do
	echo "Unmounting ${FILESYSTEM_TO_UNMOUNT} ..." >> ${BACKUP_POOL_ROOT_PATH}/log/backupz-${POOL}@${BACKUP_POOL}.${NOW}.log
	echo "${YELL}Unmounting ${FILESYSTEM_TO_UNMOUNT} ...${NRML}"
	zfs umount -f ${FILESYSTEM_TO_UNMOUNT}
done

for SNAPSHOT_NAME in ${SNAPSHOT_NAMES}
do
	SNAPSHOT_PARENT=`echo ${SNAPSHOT_NAME} | sed "s/@.*//"`
	cat /tmp/backupz-${POOL}@${BACKUP_POOL}-snapshots.list | grep "^${BACKUP_POOL}/${SNAPSHOT_PARENT}@"
	if [ $? = 0 ]
	then
		# ZFS dataset DOES exist on backup pool.
		echo "zfs dataset DOES exist on backup pool:"
		echo "${SNAPSHOT_NAME}"
		# Send incremental snapshot to backup pool.
		echo "zfs send ${ZFS_SEND_FLAGS} -i ${PREVIOUS} ${SNAPSHOT_NAME} | zfs receive -F ${BACKUP_POOL}/${SNAPSHOT_PARENT}"
		zfs send ${ZFS_SEND_FLAGS} -i ${PREVIOUS} ${SNAPSHOT_NAME} | zfs receive -F ${BACKUP_POOL}/${SNAPSHOT_PARENT}
		if [ $? != 0 ]
		then
			ERROR_CODE=1
			ERROR_SNAPSHOT=${SNAPSHOT_NAME}
			error_occured
		fi
	else
		# ZFS dataset DOES NOT exist on backup pool.
		echo "zfs dataset DOES NOT exist on backup pool:"
		echo "${SNAPSHOT_NAME}"
		# Send new dataset to backup pool.
		echo "zfs send ${ZFS_SEND_FLAGS} -p ${SNAPSHOT_NAME} | zfs receive -u ${BACKUP_POOL}/${SNAPSHOT_PARENT}"
		zfs send ${ZFS_SEND_FLAGS} -p ${SNAPSHOT_NAME} | zfs receive -u ${BACKUP_POOL}/${SNAPSHOT_PARENT}
		if [ $? != 0 ]
		then
			ERROR_CODE=2
			ERROR_SNAPSHOT=${SNAPSHOT_NAME}
			zfs destroy -Rf ${BACKUP_POOL}/${SNAPSHOT_PARENT}
			error_occured
		fi

		SNAPSHOT_PARENT_MOUNT_POINT=`zfs get -H mountpoint ${SNAPSHOT_PARENT} | awk '{print $3}'`
		if [ "${SNAPSHOT_PARENT_MOUNT_POINT}" != "none" ]
		then
			zfs set mountpoint=${BACKUP_POOL_ROOT_PATH}/${POOL}${SNAPSHOT_PARENT_MOUNT_POINT} ${BACKUP_POOL}/${SNAPSHOT_PARENT}
			zfs set quota=none ${BACKUP_POOL}/${SNAPSHOT_PARENT}
		fi

	fi

done


if [ "${PREVIOUS}" != "last-successful-backupz-missing" ]
then

	for SNAPSHOT_NAME in ${SNAPSHOT_NAMES}
	do

		SNAPSHOT_PARENT=`echo ${SNAPSHOT_NAME} | sed "s/@.*//"`

		# Destroy previous snapshots on pool, we only want them on backup pool. Must always keep last snapshot for sending increment.
		cat /tmp/backupz-${POOL}@${BACKUP_POOL}-datasets.list | grep ${SNAPSHOT_PARENT}@${PREVIOUS}
		if [ $? = 0 ]
		then
			echo "Destroy previous snapshot: ${SNAPSHOT_PARENT}@${PREVIOUS}"
			zfs destroy ${SNAPSHOT_PARENT}@${PREVIOUS}
			if [ $? != 0 ]
			then
				ERROR_CODE=5
				ERROR_SNAPSHOT=${SNAPSHOT_PARENT}@${PREVIOUS}
				error_occured
			fi
		fi

		echo ""

	done

fi

# Recusively remount backup pool filesystems
for FILESYSTEM_TO_MOUNT in `zfs list -r ${BACKUP_POOL}/${POOL} | awk '{print $1}' | tail +2`
do
	echo "Mounting ${FILESYSTEM_TO_MOUNT} ..." >> ${BACKUP_POOL_ROOT_PATH}/log/backupz-${POOL}@${BACKUP_POOL}.${NOW}.log
	echo "${YELL}Mounting ${FILESYSTEM_TO_MOUNT} ...${NRML}"
	zfs mount ${FILESYSTEM_TO_MOUNT}
done

# Write to log file.
TIMESTAMP=`${DATE_CMD} +%Y-%m-%d_%H-%M-%S`
echo "${TIMESTAMP} backup for ${NOW} finished! " >> ${BACKUP_POOL_ROOT_PATH}/log/backupz-${POOL}@${BACKUP_POOL}.${NOW}.log
echo "" >> ${BACKUP_POOL_ROOT_PATH}/log/backupz-${POOL}@${BACKUP_POOL}.${NOW}.log
echo "${TIMSTAMP} zpool list:" >> ${BACKUP_POOL_ROOT_PATH}/log/backupz-${POOL}@${BACKUP_POOL}.${NOW}.log
zpool list >> ${BACKUP_POOL_ROOT_PATH}/log/backupz-${POOL}@${BACKUP_POOL}.${NOW}.log
echo "" >> ${BACKUP_POOL_ROOT_PATH}/log/backupz-${POOL}@${BACKUP_POOL}.${NOW}.log
echo "${TIMSTAMP} zpool status:" >> ${BACKUP_POOL_ROOT_PATH}/log/backupz-${POOL}@${BACKUP_POOL}.${NOW}.log
zpool status >> ${BACKUP_POOL_ROOT_PATH}/log/backupz-${POOL}@${BACKUP_POOL}.${NOW}.log
echo "" >> ${BACKUP_POOL_ROOT_PATH}/log/backupz-${POOL}@${BACKUP_POOL}.${NOW}.log

# Assuming backup successful, report last snapshot timestamp and remove 'is-running' marker.
echo ${NOW} > ${BACKUP_POOL_ROOT_PATH}/last-successful-backupz-${POOL}@${BACKUP_POOL}.inf

echo "Backupz finished." >> ${BACKUP_POOL_ROOT_PATH}/log/backupz-${POOL}@${BACKUP_POOL}.${NOW}.log

# Remove backup 'is-running' marker file.
rm ${BACKUP_POOL_ROOT_PATH}/backupz-${POOL}-running.inf

################################################################################
