#!/bin/sh

# Copyright (c) 2016 Euan Thoms <euan@potensol.com>.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


##### GLOBAL STATIC VARIABLE DECLARATIONS ######################################

SCRIPT_NAME=`basename ${0}`
DATE_CMD=/bin/date
DATE_VERSION="freebsd" #choices of "freebsd" and "gnu"
NOW=`${DATE_CMD} +%Y-%m-%d_%H-%M`
FILESYSTEM="${1}"
BACKUP_POOL="${2}"
NUM_MANDATORY_ARGS=2
ERROR_ID="null"
ERROR_DATASET="null"
UCL_CMD="/usr/local/bin/uclcmd"
FDO_CONFIG_ROOT=${FDO_CONFIG_ROOT:-"/usr/local/etc/fdo"}
HOST_CONF_PATH=${HOST_CONF_PATH:-"${FDO_CONFIG_ROOT}/host.conf"}
SYSTEM_STATE_ROOT=${SYSTEM_STATE_ROOT:-"/var/db"}
STATE_PATH=${STATE_PATH:-"${SYSTEM_STATE_ROOT}/fdo-backupz.state"}

TERM="xterm"
LRED="\033[1;31m"
LGRN="\033[1;32m"
LBLU="\033[1;34m"
LCYN="\033[1;36m"
CYAN="\033[0;36m"
YELL="\033[1;33m"
ORNG="\033[0;33m"
GREY="\033[0;37m"
DGRY="\033[1;30m"
NRML="\033[0;00m"

CARRIAGE_RETURN="
"

##### COMMAND USAGE INFO #######################################################

usage ()
{
	if [ "${NO_DISPLAY_USAGE}" = "yes" ]
	then
		return 1
	fi

	echo -e ""
	echo -e "${LCYN}    ---- ${SCRIPT_NAME} command usage ----${NRML}"
	echo -e ""
	echo -e "${YELL}Usage:   ${LGRN}${SCRIPT_NAME} filesystem_to_backup backup_pool${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} zroot backup${NRML}"
	echo -e ""
}

##### PARSE ARGUMENTS ##########################################################

ARG_INDEX=1
for ARG in "${@}"
do
	if [ ${ARG_INDEX} -gt ${NUM_MANDATORY_ARGS} ]
	then
		OPTIONAL_ARG_NAME=`echo ${ARG} | cut -d= -f1`
		OPTIONAL_ARG_VALUE=`echo ${ARG} | cut -d= -f2`
		case ${OPTIONAL_ARG_NAME} in
			*)
				echo -e "\n${LRED}ERROR:${NRML} Invalid argument!\n       Aborting.\n"
				usage
				exit 1
				;;
		esac
	fi

	ARG_INDEX=$(( ${ARG_INDEX} + 1 ))

done


##### FUNCTIONS ################################################################

error_occurred () {

	# Wait for backupz state to be unlocked.
	while [ -f ${STATE_PATH}.lock ]
	do
		echo -e "\n${YELL}Waiting for backupz state lock file to be unlocked...${NRML}\n"
		sleep 2
	done

	# Lock the backupz state with a lock file copy.
	cp ${STATE_PATH} ${STATE_PATH}.lock

	# Set job state to 'failed'.
	${UCL_CMD} set -f ${STATE_PATH} .pools.${BACKUP_POOL}.filesystems.${FILESYSTEM}.job_state "failed"
	# Set job error identifier.
	${UCL_CMD} set -f ${STATE_PATH} .pools.${BACKUP_POOL}.filesystems.${FILESYSTEM}.job_error_id "${ERROR_ID}"
	# Set job error snapshot.
	${UCL_CMD} set -f ${STATE_PATH} .pools.${BACKUP_POOL}.filesystems.${FILESYSTEM}.job_error_dataset "${ERROR_DATASET}"

	# Remove backupz state lock and exit.
	rm ${STATE_PATH}.lock
	echo -e "\n${LRED}ERROR:${NRML} There was an unexpected error during the backup process!"
	echo -e "       Error ID: ${ERROR_ID}\n       Dataset: ${ERROR_DATASET}\n       Aborting.\n"
	echo -e "\nERROR: There was an unexpected error during the backup process!" >> ${LOG_FILE_PATH}
	echo -e "       Error ID: ${ERROR_ID}\n       Dataset: ${ERROR_DATASET}\n       Aborting.\n" >> ${LOG_FILE_PATH}
	exit 2
}

test_if_host ()
{
	procstat 0 > /dev/null 2>&1
	if [ ${?} -eq 0 ]
	then
		IS_HOST=yes
	else
		IS_HOST=no
	fi
}


##### SANITY TESTS #############################################################

if [ ${#} -lt ${NUM_MANDATORY_ARGS} ]
then
	echo -e "\n${LRED}ERROR:${NRML} Incorrect number of arguments!\n       Aborting.\n"
	usage
	exit 1
fi

test_if_host

if [ "${IS_HOST}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} This command must be run from the host!\n       Aborting.\n"
	exit 1
fi

BACKUP_POOL_ATTRIBUTES=`zpool get -H all ${BACKUP_POOL} 2> /dev/null`
if [ ${?} -ne 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} The target backup pool '${BACKUP_POOL}' does not appear to be imported.\n       Aborting.\n"
	exit 1
fi

BACKUP_POOL_HEALTH=`zpool get -H -o value health ${BACKUP_POOL} 2> /dev/null`
if [ "${BACKUP_POOL_HEALTH}" != "ONLINE" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The target backup pool '${BACKUP_POOL}' appears to be unhealthy.\n       Aborting.\n"
	exit 1
fi

zfs list -H -o name "${FILESYSTEM}" > /dev/null 2>&1
if [ ${?} -ne 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} The source filesystem '${FILESYSTEM}' does not appear to exist.\n       Aborting.\n"
	exit 1
fi

FILESYSTEM_POOL=`echo ${FILESYSTEM} | cut -d"/" -f1`

FILESYSTEM_POOL_ATTRIBUTES=`zpool get -H all ${FILESYSTEM_POOL} 2> /dev/null`
if [ ${?} -ne 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} The source filesystem pool '${FILESYSTEM_POOL}' does not appear to be imported.\n       Aborting.\n"
	exit 1
fi

FILESYSTEM_POOL_HEALTH=`zpool get -H -o value health ${FILESYSTEM_POOL} 2> /dev/null`
if [ "${FILESYSTEM_POOL_HEALTH}" != "ONLINE" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The source filesystem pool '${FILESYSTEM_POOL}' appears to be unhealthy.\n       Aborting.\n"
	exit 1
fi

if [ ! -e "${HOST_CONF_PATH}" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The host config file \n       '${ORNG}${HOST_CONF_PATH}${NRML}'\n       appears to be missing.\n       Aborting.\n"
	exit 1
fi

BACKUP_POOL_ROOT_PATH=`zfs list -H -o mountpoint ${BACKUP_POOL}`
TEST_BACKUP_POOL=`df -t zfs ${BACKUP_POOL_ROOT_PATH} | tail -1 | awk '{print $1}'`
if [ "${TEST_BACKUP_POOL}" != "${BACKUP_POOL}" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The backup pool '${BACKUP_POOL}' does not appear to be mounted!\n       Aborting.\n"
	exit 1
fi

JOB_STATE=`${UCL_CMD} get -f ${STATE_PATH} -q .pools.${BACKUP_POOL}.filesystems.${FILESYSTEM}.job_state 2> /dev/null`
if [ "${JOB_STATE}" = "failed" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The previous backup from '${FILESYSTEM}' to '${BACKUP_POOL}' failed!\n       Aborting.\n"
	exit 1
elif [ "${JOB_STATE}" = "running" ]
then
	echo -e "\n${LRED}ERROR:${NRML} There appears to be a backup job running for '${FILESYSTEM}'!\n       Aborting.\n"
	exit 1
elif [ "${JOB_STATE}" = "repairing" ]
then
	echo -e "\n${LRED}ERROR:${NRML} There appears to be a repair job running for '${FILESYSTEM}'!\n       Aborting.\n"
	exit 1
elif [ "${JOB_STATE}" = "thinning" ]
then
	echo -e "\n${LRED}ERROR:${NRML} There appears to be a thin snapshots job running for '${FILESYSTEM}'!\n       Aborting.\n"
	exit 1
fi

# Check that we are not currently running a repair backupz state operation.
pgrep -fl "fdo-backupz-repair-state " > /dev/null 2>&1
if [ ${?} -eq 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} There appears to be a backup repair operation running!\n       Aborting.\n"
	exit 1
fi

# Check that we are not currently running a backupz thin-snapshots operation.
pgrep -fl "fdo-backupz-thin-snapshots " > /dev/null 2>&1
if [ ${?} -eq 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} There appears to be a thin-snapshots operation running!\n       Aborting.\n"
	exit 1
fi


##### MAIN EXECUTION THREAD ####################################################

ERROR_COUNT=0

# Create temp files and log file path variables.
FILESYSTEM_FLAT=`echo "${FILESYSTEM}" | sed "s|/|__|g"`
SNAPSHOTS_LIST_PATH="/tmp/fdo-backupz-${FILESYSTEM_FLAT}@${BACKUP_POOL}-snapshots.list"
DATASETS_LIST_PATH="/tmp/fdo-backupz-${FILESYSTEM_FLAT}@${BACKUP_POOL}-datasets.list"
LOG_FILE_PATH="${BACKUP_POOL_ROOT_PATH}/log/backupz.${NOW}.${FILESYSTEM_FLAT}@${BACKUP_POOL}.log"

# Get ZFS send flags from this hosts' config file.
ZFS_SEND_FLAGS=`${UCL_CMD} get -f ${HOST_CONF_PATH} -q .storage.backupz.zfs_send_flags 2> /dev/null`
if [ ${?} -ne 0 ] || [ "${ZFS_SEND_FLAGS}" = "null" ] || [ "${ZFS_SEND_FLAGS}" = "" ]
then
	ZFS_SEND_FLAGS=""
fi

# Create log filesystem if log directory doesn't already exist.
if [ ! -d ${BACKUP_POOL_ROOT_PATH}/log ]
then
	zfs create -o mountpoint=${BACKUP_POOL_ROOT_PATH}/log -o compression=on ${BACKUP_POOL}/log
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
fi

# Get previously completed backup job name from backupz state file.
if [ "${JOB_STATE}" = "completed" ]
then
	COMPLETED_JOB=`${UCL_CMD} get -f ${STATE_PATH} -q .pools.${BACKUP_POOL}.filesystems.${FILESYSTEM}.completed_job_name 2> /dev/null`
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	echo -e "\n${YELL}Previous completed backup job:${NRML} ${COMPLETED_JOB}"
else
	COMPLETED_JOB="no-previous-job-completed"
	echo -e "\n${YELL}No previously completed job for this backup!${NRML}"
fi

# Check the current backupz job name is not the same as the previous completed job name.
# This can happen if the same backup is run consecutively within the same minute.
if [ "${NOW}" = "${COMPLETED_JOB}" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The previous completed job for this filesystem has the same name!;\n       '${NOW}'\n       Aborting.\n"
	exit 1
fi

# Wait for backupz state to be unlocked.
while [ -f ${STATE_PATH}.lock ]
do
	echo -e "\n${YELL}Waiting for backupz state lock file to be unlocked...${NRML}\n"
	sleep 2
done

# Make a lock file recovery copy of the existing backupz state file.
touch ${STATE_PATH}
cp ${STATE_PATH} ${STATE_PATH}.lock

echo -e "Beginning backupz job for filesystem '${FILESYSTEM}'.\n" >> ${LOG_FILE_PATH}
echo -e "Current job state: ${JOB_STATE}" >> ${LOG_FILE_PATH}
echo -e "Previous completed job: ${COMPLETED_JOB}\n" >> ${LOG_FILE_PATH}

if [ "${COMPLETED_JOB}" = "no-previous-job-completed" ]
then
	# Create the UCL structure for a new backupz job.
	:> ${STATE_PATH}.updates
	${UCL_CMD} set -f ${STATE_PATH}.updates -t object pools \
		"{ ${BACKUP_POOL} { filesystems { ${FILESYSTEM} { job_state = "running"; current_job_name = "${NOW}"; } } } }" 2> /dev/null
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	${UCL_CMD} merge -f ${STATE_PATH} -i ${STATE_PATH}.updates -o ${STATE_PATH} . 2> /dev/null
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	rm ${STATE_PATH}.updates
else

	# Set the job state to 'running' for this job.
	${UCL_CMD} set -f ${STATE_PATH} .pools.${BACKUP_POOL}.filesystems.${FILESYSTEM}.job_state "running"
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

	# Set the current job name to NOW (timestamp) for this job.
	${UCL_CMD} set -f ${STATE_PATH} .pools.${BACKUP_POOL}.filesystems.${FILESYSTEM}.current_job_name "${NOW}"
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

fi

# If we hit any errors so far, let's not proceed and revert backupz state file.
# We'll ASSUME that the backupz state file may not be created, so we can't set a failed state.
# Any errors or warnings after this can set a failed state, error and warning markers.
if [ ${ERROR_COUNT} -ne 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} There was an unexpected error preparing the backupz job!\n       Aborting.\n"
	mv ${STATE_PATH}.lock ${STATE_PATH}
	echo -e "\nERROR: There was an unexpected error preparing the backupz job!\n       Aborting." >> ${LOG_FILE_PATH}
	exit 2
fi

# ASSUME that preparation was successful, so let's remove the state lock and proceed.
rm ${STATE_PATH}.lock

# Recursively snapshot filesystem_to_backup.
echo -e "\n${YELL}Creating snapshots of source filesystem and it's decendants...${NRML}\n"
echo -e "\nCreating snapshots of source filesystem and it's decendants...\n" >> ${LOG_FILE_PATH}
zfs snapshot -r ${FILESYSTEM}@${NOW}
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

zfs list -H -o name -t all -r ${FILESYSTEM} > ${DATASETS_LIST_PATH}
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
zfs list -H -o name -t snapshot -r ${BACKUP_POOL} > ${SNAPSHOTS_LIST_PATH}
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

SNAPSHOT_NAMES=`cat ${DATASETS_LIST_PATH} | grep ${NOW}`
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

# If any errors, display error message, set job state to "failed" and exit.
if [ ${ERROR_COUNT} -ne 0 ]
then
	ERROR_ID="Snapshot process"
	ERROR_DATASET="null"
	error_occurred
fi

# Recursively unmount backup pool filesystems.
# We'll ASSUME that it's OK to proceed without warning if the 'zfs umount' command returns with an error.
for FILESYSTEM_TO_UNMOUNT in `zfs list -H -o name -r ${BACKUP_POOL}/${FILESYSTEM_FLAT} 2> /dev/null | sort -r`
do
	echo -e "${YELL}Unmounting '${NRML}${FILESYSTEM_TO_UNMOUNT}${YELL}' ...${NRML}"
	echo -e "Unmounting ${FILESYSTEM_TO_UNMOUNT} ..." >> ${LOG_FILE_PATH}
	zfs umount -f ${FILESYSTEM_TO_UNMOUNT}
done

echo -e "\n\nRecursively sending snapshots from source pool to backup pool..." >> ${LOG_FILE_PATH}

for SNAPSHOT_NAME in ${SNAPSHOT_NAMES}
do
	SNAPSHOT_PARENT=`echo ${SNAPSHOT_NAME} | sed "s/@.*//"`
	SNAPSHOT_PARENT_FLAT=`echo "${SNAPSHOT_PARENT}" | sed "s|${FILESYSTEM}|${FILESYSTEM_FLAT}|"`
	cat ${SNAPSHOTS_LIST_PATH} | grep "^${BACKUP_POOL}/${SNAPSHOT_PARENT_FLAT}@" > /dev/null 2>&1
	if [ ${?} -eq 0 ]
	then
		# ZFS filesystem DOES exist on backup pool.
		echo -e "\n${YELL}ZFS filesystem DOES exist on backup pool:${NRML}\n${SNAPSHOT_PARENT}"
		echo -e "\nZFS filesystem DOES exist on backup pool:\n${SNAPSHOT_PARENT}" >> ${LOG_FILE_PATH}

		# Send incremental snapshot to backup pool.
		echo -e "${LBLU}zfs send ${ZFS_SEND_FLAGS} -i ${COMPLETED_JOB} ${SNAPSHOT_NAME} | zfs receive -F ${BACKUP_POOL}/${SNAPSHOT_PARENT_FLAT}${NRML}"
		zfs send ${ZFS_SEND_FLAGS} -i ${COMPLETED_JOB} ${SNAPSHOT_NAME} | zfs receive -F ${BACKUP_POOL}/${SNAPSHOT_PARENT_FLAT}
		if [ ${?} -ne 0 ]
		then
			ERROR_ID="Sending incremental snapshot of existing filesystem."
			ERROR_DATASET="${SNAPSHOT_NAME}"
			error_occurred
		fi
	else
		# ZFS dataset DOES NOT exist on backup pool.
		echo -e "\n${YELL}ZFS filesystem DOES NOT exist on backup pool:${NRML}\n${SNAPSHOT_PARENT}"
		echo -e "\nZFS filesystem DOES NOT exist on backup pool:\n${SNAPSHOT_PARENT}" >> ${LOG_FILE_PATH}

		# Send new filesystem to backup pool.
		echo -e "${LBLU}zfs send ${ZFS_SEND_FLAGS} -p ${SNAPSHOT_NAME} | zfs receive -u ${BACKUP_POOL}/${SNAPSHOT_PARENT_FLAT}${NRML}"
		zfs send ${ZFS_SEND_FLAGS} -p ${SNAPSHOT_NAME} | zfs receive -u ${BACKUP_POOL}/${SNAPSHOT_PARENT_FLAT}
		if [ ${?} -ne 0 ]
		then
			ERROR_ID="Sending new filesystem."
			ERROR_DATASET="${SNAPSHOT_NAME}"
			error_occurred
		fi

		SNAPSHOT_PARENT_MOUNT_POINT=`zfs get -H -o value mountpoint ${SNAPSHOT_PARENT}`
		if [ "${SNAPSHOT_PARENT_MOUNT_POINT}" != "none" ]
		then
			zfs set mountpoint=${BACKUP_POOL_ROOT_PATH}/${FILESYSTEM_POOL}${SNAPSHOT_PARENT_MOUNT_POINT} ${BACKUP_POOL}/${SNAPSHOT_PARENT_FLAT}
			if [ ${?} -ne 0 ]
			then
				ERROR_ID="Setting mountpoint of backup pool filesystem."
				ERROR_DATASET="${BACKUP_POOL}/${SNAPSHOT_PARENT}"
				error_occurred
			fi
			zfs set quota=none ${BACKUP_POOL}/${SNAPSHOT_PARENT_FLAT}
			if [ ${?} -ne 0 ]
			then
				ERROR_ID="Setting quota to 'none' for backup pool filesystem."
				ERROR_DATASET="${BACKUP_POOL}/${SNAPSHOT_PARENT}"
				error_occurred
			fi
		fi
	fi
done

# Wait for backupz state to be unlocked.
while [ -f ${STATE_PATH}.lock ]
do
	echo -e "\n${YELL}Waiting for backupz state lock file to be unlocked...${NRML}\n"
	sleep 2
done

# Lock the backupz state with a lock file copy.
cp ${STATE_PATH} ${STATE_PATH}.lock

# Assuming backup was successful, set job state to 'completed' and completed_job_name and current_job_name accordingly.
${UCL_CMD} set -f ${STATE_PATH} .pools.${BACKUP_POOL}.filesystems.${FILESYSTEM}.job_state "completed"
${UCL_CMD} set -f ${STATE_PATH} .pools.${BACKUP_POOL}.filesystems.${FILESYSTEM}.completed_job_name "${NOW}"
${UCL_CMD} set -f ${STATE_PATH} .pools.${BACKUP_POOL}.filesystems.${FILESYSTEM}.current_job_name "null"

# Remove backupz state lock.
rm ${STATE_PATH}.lock

# If this is not the first backupz job run, destroy any unwanted, previous snapshots.
if [ "${COMPLETED_JOB}" != "no-previous-job-completed" ]
then
	echo -e "\n\n${YELL}Recursively destroy previous and unwanted snapshots from source pool...${NRML}"
	echo -e "\n\nRecursively destroy previous and unwanted snapshots from source pool..." >> ${LOG_FILE_PATH}

	for SNAPSHOT_NAME in ${SNAPSHOT_NAMES}
	do
		SNAPSHOT_PARENT=`echo ${SNAPSHOT_NAME} | sed "s/@.*//"`

		# Destroy previously completed snapshots on pool, we only want them on the backup pool.
		# We must always keep the previous snapshot for sending incrementally.
		cat ${DATASETS_LIST_PATH} | grep ${SNAPSHOT_PARENT}@${COMPLETED_JOB} > /dev/null 2>&1
		if [ ${?} -eq 0 ]
		then
			echo -e "\n${YELL}Destroy previously completed snapshot:${NRML}\n${SNAPSHOT_PARENT}@${COMPLETED_JOB}"
			echo -e "\nDestroy previously completed snapshot:\n${SNAPSHOT_PARENT}@${COMPLETED_JOB}" >> ${LOG_FILE_PATH}
			zfs destroy ${SNAPSHOT_PARENT}@${COMPLETED_JOB}
			if [ ${?} -ne 0 ]
			then
				echo -e "\n${LRED}ERROR:${NRML} Failed to destroy snapshot '${SNAPSHOT_PARENT}@${COMPLETED_JOB}'\n"
				echo -e "\nERROR: Failed to destroy snapshot '${SNAPSHOT_PARENT}@${COMPLETED_JOB}'\n" >> ${LOG_FILE_PATH}
			fi
		fi
	done
fi

echo -e ""
echo -e "\n\nRecursively re-mounting filesystems on backup pool...\n" >> ${LOG_FILE_PATH}

# Recursively remount backup pool filesystems
# We'll ASSUME that it's OK to proceed without warning if the 'zfs mount' command returns with an error.
for FILESYSTEM_TO_MOUNT in `zfs list -H -o name -r ${BACKUP_POOL}/${FILESYSTEM_FLAT}`
do
	echo -e "Mounting ${FILESYSTEM_TO_MOUNT} ..." >> ${LOG_FILE_PATH}
	echo -e "${YELL}Mounting ${FILESYSTEM_TO_MOUNT} ...${NRML}"
	zfs mount ${FILESYSTEM_TO_MOUNT}
done

# Write post-job stats to log file.
TIMESTAMP=`${DATE_CMD} +%Y-%m-%d_%H-%M-%S`
echo -e "\n${TIMESTAMP} Backup operations for job '${NOW}' finished." >> ${LOG_FILE_PATH}
echo -e "\n${TIMESTAMP} zpool list:" >> ${LOG_FILE_PATH}
zpool list >> ${LOG_FILE_PATH}
echo -e "\n${TIMESTAMP} zpool status:" >> ${LOG_FILE_PATH}
zpool status >> ${LOG_FILE_PATH}

echo -e "\nBackupz job '${NOW}' complete!" >> ${LOG_FILE_PATH}
echo -e "\n${LGRN}Backupz job '${NRML}${NOW}${LGRN}' complete!${NRML}\n"

################################################################################
