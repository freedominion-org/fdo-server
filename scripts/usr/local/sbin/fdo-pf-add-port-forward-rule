#!/bin/sh

# Copyright (c) 2018 Euan Thoms <euan@potensol.com>.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


##### GLOBAL STATIC VARIABLE DECLARATIONS ######################################

SCRIPT_NAME=`basename ${0}`
RULE_NAME="${1}"
LOCAL_IP="${2}"
TCP_PORTS="${3}"
UDP_PORTS="${4}"
NUM_MANDATORY_ARGS=4
IS_INTERACTIVE="yes"
FDO_SERVER_SCRIPT=${FDO_SERVER_SCRIPT:-"fdo-server"}
UCL_CMD="/usr/local/bin/uclcmd"
FDO_CONFIG_ROOT=${FDO_CONFIG_ROOT:-"/usr/local/etc/fdo"}
HOST_CONF_PATH=${HOST_CONF_PATH:-"${FDO_CONFIG_ROOT}/host.conf"}
PF_CONF_PATH=${PF_CONF_PATH:-"/etc/pf.conf"}

TERM="xterm"
LRED="\033[1;31m"
LGRN="\033[1;32m"
LBLU="\033[1;34m"
LCYN="\033[1;36m"
CYAN="\033[0;36m"
YELL="\033[1;33m"
ORNG="\033[0;33m"
GREY="\033[0;37m"
DGRY="\033[1;30m"
NRML="\033[0;00m"

CARRIAGE_RETURN="
"

##### COMMAND USAGE INFO #######################################################

usage ()
{
	if [ "${NO_DISPLAY_USAGE}" = "yes" ]
	then
		return 1
	fi

	echo -e ""
	echo -e "${LCYN}    ---- ${SCRIPT_NAME} command usage ----${NRML}"
	echo -e ""
	echo -e "${YELL}Description:${NRML} Add pf rules for port forwarding for this host."
	echo -e ""
	echo -e "${YELL}Usage:   ${LGRN}${SCRIPT_NAME} rule_name local_ip_address tcp_ports udp_ports [--non-interactive]${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} cups_server 10.0.10.10 631 none${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} samba_server 10.0.10.3 139,445 137,138${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} vnc_servers 10.0.10.4 5900:5909 none --non-interactive${NRML}"
	echo -e ""
	echo -e "${YELL}Options:${NRML}"
	echo -e "${YELL}         --non-interactive ; will not prompt or commit changes to the config repo.${NRML}"
	echo -e ""
	echo -e "${YELL}Argument syntax:${NRML}"
	echo -e "${YELL}         tcp_ports/udp_ports ; comma seperated numerical port identifiers,${NRML}"
	echo -e "${YELL}                               use a colon to indicate a range, if none set to 'none'.${NRML}"
	echo -e ""
}


##### PARSE ARGUMENTS ##########################################################

ARG_INDEX=1
for ARG in "${@}"
do
	if [ ${ARG_INDEX} -gt ${NUM_MANDATORY_ARGS} ]
	then
		OPTIONAL_ARG_NAME=`echo ${ARG} | cut -d= -f1`
		OPTIONAL_ARG_VALUE=`echo ${ARG} | cut -d= -f2`
		case ${OPTIONAL_ARG_NAME} in
			--non-interactive)
				IS_INTERACTIVE="no"
				;;
			*)
				echo -e "\n${LRED}ERROR:${NRML} Invalid argument!\n       Aborting.\n"
				usage
				exit 1
				;;
		esac
	fi

	ARG_INDEX=$(( ${ARG_INDEX} + 1 ))

done


##### FUNCTIONS ################################################################

# source readee function.
. /usr/local/bin/fdo-readee

question_yes_no ()
{
	while true
		do
		echo -e "${LCYN}${1}${NRML}"
		readee -p "${LCYN}(yes/no): ${NRML}" ANSWER
		if [ "${ANSWER}" = "yes" ] || [ "${ANSWER}" = "no" ]
		then
			break
		fi
		echo ""
	done
}

test_valid_rule_name ()
{
	TEST_CASE="${1}"

	VALID_RULE_NAME="yes"

	if [ ${TEST_CASE} = "" ]
	then
		VALID_RULE_NAME="no"
		return 1
	fi

	IS_SYNTAX_OK=`echo "${TEST_CASE}" | sed -r "s/^[a-zA-Z0-9]+(_[a-zA-Z0-9]+[a-zA-Z0-9]*)*//" | wc -L`
	if [ ${IS_SYNTAX_OK}  -ne 0 ]
	then
		VALID_RULE_NAME="no"
		return 2
	fi

}

test_valid_port_list ()
{

	TEST_CASE="${1}"

	VALID_PORT_LIST="yes"

	if [ "${TEST_CASE}" = "none" ]
	then
		return 0
	fi

	if [ "${TEST_CASE}" = "" ]
	then
		VALID_PORT_LIST="no"
		return 1
	fi

	IS_SYNTAX_OK=`echo "${TEST_CASE}" | sed -r "s/^[1-9]+[0-9]*([:]?[1-9]+[0-9]*)?(,[1-9]+[0-9]*([:]?[1-9]+[0-9]*)?)*//" | wc -L`
	if [ ${IS_SYNTAX_OK}  -ne 0 ]
	then
		VALID_PORT_LIST="no"
		return 2
	fi

}

test_valid_inet_address ()
{

	TEST_CASE="${1}"

	VALID_INET_ADDRESS="yes"

	if [ "${TEST_CASE}" = "" ]
	then
		VALID_INET_ADDRESS="no"
		return 1
	fi

	IS_SYNTAX_OK=`echo "${TEST_CASE}" | sed "s/^[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}$//" | wc -L`
	if [ ${IS_SYNTAX_OK}  -ne 0 ]
	then
		VALID_INET_ADDRESS="no"
		return 2
	fi

	NO_ZEROS_IN_FRONT=`echo "${TEST_CASE}" | sed "s/\.0[0-9]//" | sed "s/^0//"`
	if [ "${NO_ZEROS_IN_FRONT}" != "${TEST_CASE}" ]
	then
		VALID_INET_ADDRESS="no"
		return 3
	fi

	ONE=`echo "${TEST_CASE}" | cut -d. -f1`
	TWO=`echo "${TEST_CASE}" | cut -d. -f2`
	THREE=`echo "${TEST_CASE}" | cut -d. -f3`
	FOUR=`echo "${TEST_CASE}" | cut -d. -f4`

	if [ ${ONE} -gt 255 ] || [ ${TWO} -gt 255 ] || [ ${THREE} -gt 255 ] || [ ${FOUR} -gt 255 ]
	then
		VALID_INET_ADDRESS="no"
		return 4
	fi

}

test_if_host ()
{
	procstat 0 > /dev/null 2>&1
	if [ ${?} -eq 0 ]
	then
		IS_HOST=yes
	else
		IS_HOST=no
	fi
}

backup_file ()
{
	FILE_PATH="${1}"
	CHANGE_AGENT="${2}"
	if [ -f "${FILE_PATH}" ]
	then
		BACKUP_FILE_PATH="${FILE_PATH}.backup.${CHANGE_AGENT}"
		cp "${FILE_PATH}" "${BACKUP_FILE_PATH}" 2> /dev/null
		if [ ${?} -ne 0 ]
		then
			echo -e "\n${LRED}ERROR:${NRML} Failed to backup file '${ORNG}${FILE_PATH}${NRML}'!\n"
			BACKUP_FILE_PATH=""
			return 2
		fi
	else
		echo -e "\n${LRED}ERROR:${NRML} File '${ORNG}${FILE_PATH}${NRML}' does not exist!\n       Unable to backup.\n"
		BACKUP_FILE_PATH=""
		return 1
	fi

	return 0
}

restore_file ()
{
	FILE_PATH=${1}
	CHANGE_AGENT="${2}"

	if [ -f "${FILE_PATH}" ] && [ -f "${FILE_PATH}.backup.${CHANGE_AGENT}" ]
	then
		diff -q "${FILE_PATH}" "${FILE_PATH}.backup.${CHANGE_AGENT}" > /dev/null 2>&1
		if [ ${?} -ne 0 ]
		then
			# File and backup differ, replace the file content from the backup copy.
			cat "${FILE_PATH}.backup.${CHANGE_AGENT}" > "${FILE_PATH}"
			if [ ${?} -ne 0 ]
			then
				return 2
			fi
		fi
		# Remove the backup.
		rm "${FILE_PATH}.backup.${CHANGE_AGENT}"
		if [ ${?} -ne 0 ]
		then
			return 2
		fi
	else
		# File has been removed, so move backup to file path.
		mv "${FILE_PATH}.backup.${CHANGE_AGENT}" "${FILE_PATH}"
		if [ ${?} -ne 0 ]
		then
			return 2
		fi
	fi

	return 0

}

undo_backup_file ()
{
	FILE_PATH=${1}
	CHANGE_AGENT="${2}"

	if [ -f "${FILE_PATH}.backup.${CHANGE_AGENT}" ]
	then
		# Remove the backup.
		rm "${FILE_PATH}.backup.${CHANGE_AGENT}"
		if [ ${?} -ne 0 ]
		then
			return 2
		fi
	fi

	return 0

}

undo_add_rule ()
{
	ERROR_COUNT=0

	echo -e "\n${ORNG}Undoing add port forward rule process...${NRML}\n"

	# Restore existing system config files.
    if [ ${ADD_RULE_SYSTEM_MODIFIED} = true ]
    then
		# Restore pf.conf config file.
		restore_file ${PF_CONF_PATH} ${SCRIPT_NAME}
		ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	fi

	# Reload pf service.
    if [ ${ADD_RULE_SERVICE_RELOADED} = true ]
    then
		service pf reload > /dev/null
		ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	fi

	# Undo repo modifications.
    if [ ${ADD_RULE_REPO_MODIFIED} = true ]
    then
        # Roll back local repo to last good commit (!!!DANGEROUS!!!).
        if [ "${COMMIT_BEFORE_ADD_RULE}" != "" ]
        then
            git reset --hard ${COMMIT_BEFORE_ADD_RULE}
            ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
            git clean -f -d
            ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
        fi
    fi

	if [ ${ERROR_COUNT} -ne 0 ]
	then
		echo -e "\n${LRED}ERROR:${NRML} An error occurred whilst trying to undo add port forward rule!\n"
	else
		echo -e ""
	fi
}

##### SANITY TESTS #############################################################

if [ ${#} -lt ${NUM_MANDATORY_ARGS} ]
then
	echo -e "\n${LRED}ERROR:${NRML} Incorrect number of arguments!\n       Aborting.\n"
	usage
	exit 1
fi

# Check we are running with root privileges.
if [ `id -u` -ne 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} This command must be run with root (super-user) privileges!\n       Aborting.\n"
	exit 1
fi

test_if_host

if [ "${IS_HOST}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} This command must be run from the host!\n       Aborting.\n"
	exit 1
fi

# Check that the host.conf file exists.
if [ ! -e "${HOST_CONF_PATH}" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The host config file \n       '${ORNG}${HOST_CONF_PATH}${NRML}'"
	echo -e "       appears to be missing.\n       Aborting.\n"
	exit 1
fi

# Check that the host.conf file is accessible.
TEST_UCL=`${UCL_CMD} get -u -f ${HOST_CONF_PATH} .general 2>&1`
if [ ${?} -ne 0 ] || [ "${TEST_UCL}" = "null" ] || [ "${TEST_UCL}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} Failed to access the config file '${HOST_CONF_PATH}'!\n       Aborting.\n"
	exit 2
fi

# Check that the pf.conf config file exists.
if [ ! -f ${PF_CONF_PATH} ]
then
	echo -e "\n${LRED}ERROR:${NRML} The pf config file '${PF_CONF_PATH}' does not exist!\n       Aborting.\n"
	usage
	exit 1
fi

# Check for unsaved registered host config files.
echo -e "\n${YELL}Now we need to check if there are any unsaved changes to this hosts registered\nconfig files...${NRML}\n"
${FDO_SERVER_SCRIPT} check-configs --script > /dev/null 2>&1
if [ ${?} -gt 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} One or more host config files are not updated in the repo."
	echo -e "       Please use '${LBLU}${FDO_SERVER_SCRIPT} check-configs${NRML}' subcommand to see what's out-of-date."
	echo -e "       Please use '${LBLU}${FDO_SERVER_SCRIPT} update-config${NRML}' subcommannd to keep the repo up-to-date.\n       Aborting.\n"
	exit 1
fi

# Test if rule_name is valid.
test_valid_rule_name "${RULE_NAME}"
if [ "${VALID_RULE_NAME}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} Rule name invalid!\n"
	exit 1
fi

# Test if rule_name already exists.
cat ${PF_CONF_PATH} | egrep "${RULE_NAME}_ip =" > /dev/null 2>&1
if [ ${?} -eq 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} Rule name '${RULE_NAME}' is already in use!\n"
	exit 1
fi

# Test if local_ip_address is valid.
test_valid_inet_address "${LOCAL_IP}"
if [ "${VALID_INET_ADDRESS}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} Local IP address is invalid!\n"
	exit 1
fi

# Test if tcp_ports is valid.
test_valid_port_list "${TCP_PORTS}"
if [ "${VALID_PORT_LIST}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} TCP port list ('tcp_ports') is invalid!\n"
	exit 1
fi

# Test if udp_ports is valid.
test_valid_port_list "${UDP_PORTS}"
if [ "${VALID_PORT_LIST}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} UDP port list ('udp_ports') is invalid!\n"
	exit 1
fi

# Test if both tcp_ports and udp_ports are 'none'.
if [ "${TCP_PORTS}" = "none" ] && [ "${UDP_PORTS}" = "none" ]
then
	echo -e "\n${LRED}ERROR:${NRML} No ports specified!\n"
	exit 1
fi


##### MAIN EXECUTION THREAD ####################################################

trap 'undo_add_rule ; exit 3' HUP INT QUIT KILL TERM

ERROR_COUNT=0

ADD_RULE_SERVICE_RELOADED=false
ADD_RULE_REPO_MODIFIED=false
ADD_RULE_SYSTEM_MODIFIED=false

# Move into local repo directory.
cd "/${REPO_NAME}"
if [ ${?} -ne 0 ]
then
    echo -e "\n${LRED}ERROR:${NRML} Unable to enter the repo directory; '${ORNG}/${REPO_NAME}${NRML}'!"
    return 2
fi

# Save git commit reference so we can roll back changes later.
COMMIT_BEFORE_ADD_RULE=`git log --format=format:%H -1`

# Prepare macro and rule definitions as variables.
IP_MACRO_DEF="\\${CARRIAGE_RETURN}${RULE_NAME}_ip = \"${LOCAL_IP}\""
if [ "${TCP_PORTS}" = "none" ]
then
	TCP_PORTS_MACRO_DEF=""
else
	TCP_PORTS_MACRO_DEF="\\${CARRIAGE_RETURN}${RULE_NAME}_tcp_ports = \"{ ${TCP_PORTS} }\""
	TCP_RULES_DEF="\\${CARRIAGE_RETURN}rdr on \$ext_if proto tcp from any to any port \$${RULE_NAME}_tcp_ports -> \$${RULE_NAME}_ip"
fi
if [ "${UDP_PORTS}" = "none" ]
then
	UDP_PORTS_MACRO_DEF=""
else
	UDP_PORTS_MACRO_DEF="\\${CARRIAGE_RETURN}${RULE_NAME}_udp_ports = \"{ ${UDP_PORTS} }\""
	UDP_RULES_DEF="\\${CARRIAGE_RETURN}rdr on \$ext_if proto udp from any to any port \$${RULE_NAME}_udp_ports -> \$${RULE_NAME}_ip"
fi

# Backup pf.conf config file in case something goes wrong.
backup_file ${PF_CONF_PATH} ${SCRIPT_NAME}
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

ADD_RULE_SYSTEM_MODIFIED=true

# Add new port foward rule macros to pf config file.
sed -i "" "s|\(^[#]* PORT FORWARD RULES MACROS [#]*\)|\1\\${CARRIAGE_RETURN}${IP_MACRO_DEF}${TCP_PORTS_MACRO_DEF}${UDP_PORTS_MACRO_DEF}|" ${PF_CONF_PATH}
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

# Add new TCP port foward rules to pf config file.
if [ "${TCP_PORTS}" != "none" ]
then
	sed -i "" "s|\(^[#]* PORT FORWARD TCP RULES [#]*\)|\1\\${CARRIAGE_RETURN}${TCP_RULES_DEF}|" ${PF_CONF_PATH}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
fi

# Add new UDP port foward rules to pf config file.
if [ "${UDP_PORTS}" != "none" ]
then
	sed -i "" "s|\(^[#]* PORT FORWARD UDP RULES [#]*\)|\1\\${CARRIAGE_RETURN}${UDP_RULES_DEF}|" ${PF_CONF_PATH}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
fi

if [ ${ERROR_COUNT} -ne 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} Something went wrong updating the configuration files!\n       Aborting.\n"
	undo_add_rule
	exit 2
fi

if [ "${IS_INTERACTIVE}" = "yes" ]
then
	question_yes_no "\nWould you like to reload the pf service for changes to take effect?"
	if [ "${ANSWER}" = "yes" ]
	then
		ADD_RULE_SERVICE_RELOADED=true
	fi
else
	ADD_RULE_SERVICE_RELOADED=true
fi

if [ ${ADD_RULE_SERVICE_RELOADED} = true ]
then
	echo -e "\n${YELL}Reloading pf service...${NRML}\n"
	service pf reload > /dev/null
	if [ ${?} -eq 0 ]
	then
		echo -e "\n${LGRN}Successfully reloaded pf service!${NRML}\n"
	else
		echo -e "\n${LRED}Reload of pf service returned an error!${NRML}\n"
		undo_add_rule
		exit 2
	fi
fi

# Update configuration in the local repo and if interactive mode then push to remote repo.
ADD_RULE_REPO_MODIFIED=true
if [ "${IS_INTERACTIVE}" = "yes" ]
then
	echo -e "\n${FDO_SERVER_SCRIPT} update-config ${PF_CONF_PATH} ...\n"
	CHANGE_MESSAGE="add port forwarding rule '${RULE_NAME}' to pf config" FETCH_LATEST_SELF="no" ${FDO_SERVER_SCRIPT} update-config ${PF_CONF_PATH}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
else
	echo -e "\n${FDO_SERVER_SCRIPT} update-config ${PF_CONF_PATH} ...\n"
	CHANGE_MESSAGE="add port forwarding rule '${RULE_NAME}' to pf config" GIT_NO_PUSH="yes" FETCH_LATEST_SELF="no" ${FDO_SERVER_SCRIPT} update-config ${PF_CONF_PATH}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
fi

if [ ${ERROR_COUNT} -gt 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} Something went wrong updating the config repo!\n       Aborting.\n"
	undo_add_rule
	exit 2
fi

undo_backup_file ${PF_CONF_PATH} ${SCRIPT_NAME}

################################################################################
