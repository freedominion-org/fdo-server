#!/bin/sh

# Copyright (c) 2018 Euan Thoms <euan@potensol.com>.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


##### GLOBAL STATIC VARIABLE DECLARATIONS ######################################

SCRIPT_NAME=`basename ${0}`
LOCAL_PATH="${1}"
NUM_MANDATORY_ARGS=1
FDO_SERVER_SCRIPT=${FDO_SERVER_SCRIPT:-"fdo-server"}
UCL_CMD="/usr/local/bin/uclcmd"
FDO_CONFIG_ROOT=${FDO_CONFIG_ROOT:-"/usr/local/etc/fdo"}
HOST_CONF_PATH=${HOST_CONF_PATH:-"${FDO_CONFIG_ROOT}/host.conf"}
SSHFS_DAEMON_CONF_PATH=${SSHFS_DAEMON_CONF_PATH:-"${FDO_CONFIG_ROOT}/sshfs-daemon.conf"}
SSHFS_DAEMON_KEY_PREFIX="${FDO_CONFIG_ROOT}/sshfs_daemon_keys"

TERM="xterm"
LRED="\033[1;31m"
LGRN="\033[1;32m"
LBLU="\033[1;34m"
LCYN="\033[1;36m"
CYAN="\033[0;36m"
YELL="\033[1;33m"
ORNG="\033[0;33m"
GREY="\033[0;37m"
DGRY="\033[1;30m"
NRML="\033[0;00m"

CARRIAGE_RETURN="
"

##### COMMAND USAGE INFO #######################################################

usage ()
{
	if [ "${NO_DISPLAY_USAGE}" = "yes" ]
	then
		return 1
	fi

	echo -e ""
	echo -e "${LCYN}    ---- ${SCRIPT_NAME} command usage ----${NRML}"
	echo -e ""
	echo -e "${YELL}Description:${NRML} Remove an sshfs-daemon connection to a remote host from this host."
	echo -e ""
	echo -e "${YELL}Usage:   ${LGRN}${SCRIPT_NAME} local_path [--non-interactive]${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} /home/joe/host1${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} /remote-logs/host3 --non-interactive${NRML}"
	echo -e ""
	echo -e "${YELL}Options:${NRML}"
	echo -e ""
	echo -e "${YELL}         --non-interactive ; will not prompt or commit changes to the config repo.${NRML}"
	echo -e ""
}


##### PARSE ARGUMENTS ##########################################################

ARG_INDEX=1
for ARG in "${@}"
do
	if [ ${ARG_INDEX} -gt ${NUM_MANDATORY_ARGS} ]
	then
		OPTIONAL_ARG_NAME=`echo ${ARG} | cut -d= -f1`
		OPTIONAL_ARG_VALUE=`echo ${ARG} | cut -d= -f2`
		case ${OPTIONAL_ARG_NAME} in
			--non-interactive)
				IS_INTERACTIVE="no"
				;;
			*)
				echo -e "\n${LRED}ERROR:${NRML} Invalid argument!\n       Aborting.\n"
				usage
				exit 1
				;;
		esac
	fi

	ARG_INDEX=$(( ${ARG_INDEX} + 1 ))

done


##### FUNCTIONS ################################################################

# source readee function
. /usr/local/bin/fdo-readee

question_yes_no ()
{
	while true
		do
		echo -e "${LCYN}${1}${NRML}"
		readee -p "${LCYN}(yes/no): ${NRML}" ANSWER
		if [ "${ANSWER}" = "yes" ] || [ "${ANSWER}" = "no" ]
		then
			break
		fi
		echo ""
	done
}

test_if_host ()
{
	procstat 0 > /dev/null 2>&1
	if [ ${?} -eq 0 ]
	then
		IS_HOST=yes
	else
		IS_HOST=no
	fi
}

is_mounted () {

	IFS=${CARRIAGE_RETURN}
	SSHFS_MOUNTPOINTS=`mount -p -t fusefs.sshfs | awk -F '\t'+ '{print $2}' | awk -F " fusefs.sshfs" '{print $1}'`
	for MOUNTPOINT in ${SSHFS_MOUNTPOINTS}
	do
		if [ "${MOUNTPOINT}" = "${1}" ]
		then
			return 0
		fi
	done
	return 1
}


##### SANITY TESTS #############################################################

if [ ${#} -lt ${NUM_MANDATORY_ARGS} ]
then
	echo -e "\n${LRED}ERROR:${NRML} Incorrect number of arguments!\n       Aborting.\n"
	usage
	exit 1
fi

test_if_host

if [ "${IS_HOST}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} This command must be run from the host!\n       Aborting.\n"
	exit 1
fi

# Check for unsaved registered host config files.
echo -e "\n${YELL}Now we need to check if there are any unsaved changes to this hosts registered\nconfig files...${NRML}\n"
${FDO_SERVER_SCRIPT} check-configs --script > /dev/null 2>&1
if [ ${?} -gt 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} One or more host config files are not updated in the repo."
	echo -e "       Please use '${LBLU}${FDO_SERVER_SCRIPT} check-configs${NRML}' subcommand to see what's out-of-date."
	echo -e "       Please use '${LBLU}${FDO_SERVER_SCRIPT} update-config${NRML}' subcommannd to keep the repo up-to-date.\n       Aborting.\n"
	exit 1
fi

# Check that the host.conf file exists.
if [ ! -e "${HOST_CONF_PATH}" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The host config file \n       '${ORNG}${HOST_CONF_PATH}${NRML}'"
	echo -e "       appears to be missing.\n       Aborting.\n"
	exit 1
fi

# Check that the host.conf file is accessible.
TEST_UCL=`${UCL_CMD} get -u -f ${HOST_CONF_PATH} .general 2>&1`
if [ ${?} -ne 0 ] || [ "${TEST_UCL}" = "null" ] || [ "${TEST_UCL}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} Failed to access the config file '${HOST_CONF_PATH}'!\n       Aborting.\n"
	exit 2
fi

# Check that the sshfs-daemon subsystem is initialised.
SSHFS_DAEMON_SUBSYS_COMPAT=`${UCL_CMD} get -f ${HOST_CONF_PATH} -q .subsystems.sshfs-daemon_compat`
if [ "${SSHFS_DAEMON_SUBSYS_COMPAT}" = "null" ] || [ "${SSHFS_DAEMON_SUBSYS_COMPAT}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} It appears that the SSHFS-daemon subsystem is not initialised."
	echo -e "       Consider using the command:"
	echo -e "       ${LBLU}${SCRIPT_NAME} init-sshfs-daemon${NRML}\n       Aborting.\n"
	exit 1
fi

# Check that the sshfs-daemon.conf file exists.
if [ ! -e "${SSHFS_DAEMON_CONF_PATH}" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The sshfs daemon config file \n       '${ORNG}${HOST_CONF_PATH}${NRML}'"
	echo -e "       appears to be missing.\n       Aborting.\n"
	exit 1
fi

# Check that the sshfs-daemon.conf file is accessible.
TEST_UCL=`${UCL_CMD} get -u -f ${SSHFS_DAEMON_CONF_PATH} .general 2>&1`
if [ ${?} -ne 0 ] || [ "${TEST_UCL}" = "null" ] || [ "${TEST_UCL}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} Failed to access the config file '${SSHFS_DAEMON_CONF_PATH}'!\n       Aborting.\n"
	exit 2
fi


##### MAIN EXECUTION THREAD ####################################################

ERROR_COUNT=0

# Warn if the local_path is mounted.
is_mounted "${LOCAL_PATH}"
if [ ${?} -eq 0 ]
then
	echo -e "\n${ORNG}WARNING:${NRML} The following local path appears to be mounted;"
	echo -e "         '${LOCAL_PATH}'\n"
	question_yes_no "Would you like to continue regardless of the mount state?"
	if [ "${ANSWER}" = "no" ]
	then
		echo -e ""
		exit 1
	else
		# Unmount the connection.
		echo -e "\n${YELL}Unmounting the connection...${NRML}\n"
		umount "${LOCAL_PATH}"
	fi
fi

# Flatten the local_path so we can use it in a file name.
LOCAL_PATH_FLAT=`echo "${LOCAL_PATH}" | sed "s/\//_/g"`
LOCAL_PATH_MD5=`echo "${LOCAL_PATH}" | md5 -q`
SSHFS_DAEMON_KEY="${SSHFS_DAEMON_KEY_PREFIX}/${LOCAL_PATH_FLAT}.${LOCAL_PATH_MD5}"

# Get the index of the local_path in sshfs-daemon.conf.
LOCAL_PATH_EXISTS=false
CONNECTION_INDEX=0
while [ `${UCL_CMD} get -f ${SSHFS_DAEMON_CONF_PATH} -q .connections.${CONNECTION_INDEX}` != "null" ]
do
	TEST_LOCAL_PATH=`${UCL_CMD} get -f ${SSHFS_DAEMON_CONF_PATH} -q .connections.${CONNECTION_INDEX}.local_path`
	if [ "${LOCAL_PATH}" = "${TEST_LOCAL_PATH}" ]
	then
		LOCAL_PATH_EXISTS=true
		LOCAL_PATH_INDEX=${CONNECTION_INDEX}
		break
	fi
	CONNECTION_INDEX=$(( ${CONNECTION_INDEX} + 1 ))
done

# If local_path was not found, abort with error.
if [ ${LOCAL_PATH_EXISTS} = false ]
then
	echo -e "\n${LRED}ERROR:${NRML} No connection exists with the local path;"
	echo -e "       '${LOCAL_PATH}'"
	echo -e "       Aborting.\n"
	exit 1
fi

# Remove the connection from the sshfs-daemon config file.
echo -e "\n${YELL}Removing sshfs connection...${NRML}\n"
${UCL_CMD} remove -f ${SSHFS_DAEMON_CONF_PATH} -o ${SSHFS_DAEMON_CONF_PATH} .connections.${LOCAL_PATH_INDEX}

# Remove any ssh keys.
echo -e "\n${YELL}Removing any associated SSH keys...${NRML}\n"
if [ -f "${SSHFS_DAEMON_KEY}" ]
then
	rm "${SSHFS_DAEMON_KEY}"
fi
if [ -f "${SSHFS_DAEMON_KEY}.pub" ]
then
	rm "${SSHFS_DAEMON_KEY}.pub"
	echo -e "\n${ORNG}You may need to manually remove any public ssh keys from the remote users' ${NRML}"
	echo -e "${ORNG}authorized_keys file on the remote system.${NRML}\n"
else
	SSHFS_DAEMON_KEY="none"
fi

# Update configuration in the local repo and if interactive mode then push to remote repo.
if [ "${SSHFS_DAEMON_KEY}" != "none" ]
then
	echo -e "\n${FDO_SERVER_SCRIPT} remove-config ${SSHFS_DAEMON_KEY} ...\n"
	GIT_NO_PUSH="yes" FETCH_LATEST_SELF="no" ${FDO_SERVER_SCRIPT} remove-config "${SSHFS_DAEMON_KEY}"
	echo -e "\n${FDO_SERVER_SCRIPT} remove-config ${SSHFS_DAEMON_KEY}.pub ...\n"
	GIT_NO_PUSH="yes" FETCH_LATEST_SELF="no" ${FDO_SERVER_SCRIPT} remove-config "${SSHFS_DAEMON_KEY}.pub"
fi

echo -e "\n${FDO_SERVER_SCRIPT} update-config ${SSHFS_DAEMON_CONF_PATH} ...\n"
if [ "${IS_INTERACTIVE}" = "no" ]
then
	CHANGE_MESSAGE="remove sshfs connection for local_path '${LOCAL_PATH}'" GIT_NO_PUSH="yes" FETCH_LATEST_SELF="no" ${FDO_SERVER_SCRIPT} update-config "${SSHFS_DAEMON_CONF_PATH}"
else
	CHANGE_MESSAGE="remove sshfs connection for local_path '${LOCAL_PATH}'" FETCH_LATEST_SELF="no" ${FDO_SERVER_SCRIPT} update-config "${SSHFS_DAEMON_CONF_PATH}"
fi

echo -e ""

if [ ${ERROR_COUNT} -gt 0 ]
then
	exit 2
else
	echo -e "\n${LGRN}Successfully removed SSHFS connection for:\n'${NRML}${LOCAL_PATH}${LGRN}'${NRML}\n"
fi

################################################################################
