#!/bin/sh

# Copyright (c) 2018 Euan Thoms <euan@potensol.com>.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


##### GLOBAL STATIC VARIABLE DECLARATIONS ######################################

SCRIPT_NAME=`basename ${0}`
LOCAL_PATH="${1}"
NUM_MANDATORY_ARGS=1
FDO_SERVER_SCRIPT="fdo-server"
FDO_CONF_DIR="/usr/local/etc/fdo"
SSHFSD_CONF_PATH="${FDO_CONF_DIR}/sshfsd_shares.conf"
SSHFSD_KEY_PREFIX="${FDO_CONF_DIR}/sshfsd_key"

TERM="xterm"
LRED="\033[1;31m"
LGRN="\033[1;32m"
LBLU="\033[1;34m"
LCYN="\033[1;36m"
CYAN="\033[0;36m"
YELL="\033[1;33m"
ORNG="\033[0;33m"
GREY="\033[0;37m"
DGRY="\033[1;30m"
NRML="\033[0;00m"

CARRIAGE_RETURN="
"

##### COMMAND USAGE INFO #######################################################

usage ()
{
	if [ "${NO_DISPLAY_USAGE}" = "yes" ]
	then
		return 1
	fi

	echo -e ""
	echo -e "${LCYN}    ---- ${SCRIPT_NAME} command usage ----${NRML}"
	echo -e ""
	echo -e "${YELL}Description:${NRML} Remove an sshfs connection to a remote host from this host."
	echo -e ""
	echo -e "${YELL}Usage:   ${LGRN}${SCRIPT_NAME} local_path [--non-interactive]${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} /home/joe/host1${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} /remote-logs/host3 --non-interactive${NRML}"
	echo -e ""
	echo -e "${YELL}Options:${NRML}"
	echo -e ""
	echo -e "${YELL}         --non-interactive ; will not prompt or commit changes to the config repo.${NRML}"
	echo -e ""
}


##### PARSE ARGUMENTS ##########################################################

ARG_INDEX=1
for ARG in "${@}"
do
	if [ ${ARG_INDEX} -gt ${NUM_MANDATORY_ARGS} ]
	then
		OPTIONAL_ARG_NAME=`echo ${ARG} | cut -d= -f1`
		OPTIONAL_ARG_VALUE=`echo ${ARG} | cut -d= -f2`
		case ${OPTIONAL_ARG_NAME} in
			--non-interactive)
				IS_INTERACTIVE="no"
				;;
			*)
				echo -e "\n${LRED}ERROR:${NRML} Invalid argument!\n       Aborting.\n"
				usage
				exit 1
				;;
		esac
	fi

	ARG_INDEX=$(( ${ARG_INDEX} + 1 ))

done


##### FUNCTIONS ################################################################

# source readee function
. /usr/local/bin/fdo-readee

question_yes_no ()
{
	while true
		do
		echo -e "${LCYN}${1}${NRML}"
		readee -p "${LCYN}(yes/no): ${NRML}" ANSWER
		if [ "${ANSWER}" = "yes" ] || [ "${ANSWER}" = "no" ]
		then
			break
		fi
		echo ""
	done
}

test_if_host ()
{
	procstat 0 > /dev/null 2>&1
	if [ ${?} -eq 0 ]
	then
		IS_HOST=yes
	else
		IS_HOST=no
	fi
}


##### SANITY TESTS #############################################################

if [ ${#} -lt ${NUM_MANDATORY_ARGS} ]
then
	echo -e "\n${LRED}ERROR:${NRML} Incorrect number of arguments!\n       Aborting.\n"
	usage
	exit 2
fi

test_if_host

if [ "${IS_HOST}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} This command must be run from the host!\n       Aborting.\n"
	exit 3
fi

if [ ! -f ${SSHFSD_CONF_PATH} ]
then
	echo -e "\n${LRED}ERROR:${NRML} The sshfs daemon config file '${SSHFSD_CONF_PATH}' does not exist!\n       Aborting.\n"
	usage
	exit 4
fi

# TODO: Test that the local_path is valid. Considering that
# UNIX paths can contain just about any character, this may not be practical.
# Use exit code 5.


##### MAIN EXECUTION THREAD ####################################################

ERROR_COUNT=0

# Check if the local_path exists in sshfsd_shares.conf
cat "${SSHFSD_CONF_PATH}" | grep -v "^#" | awk '{print $2}' | grep "^${LOCAL_PATH}$" > /dev/null 2>&1
if [ ${?} -ne 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} No connection exists with the local path;"
	echo -e "       '${LOCAL_PATH}'"
	echo -e "       Aborting.\n"
	exit 6
fi

# Warn if the local_path is mounted
mount | grep "${LOCAL_PATH}" > /dev/null 2>&1
if [ ${?} -eq 0 ]
then
	echo -e "\n${ORNG}WARNING:${NRML} The following local path appears to be mounted;"
	echo -e "         '${LOCAL_PATH}'\n"
	question_yes_no "Would you like to continue regardless of the mount state?"
	if [ "${ANSWER}" = "no" ]
	then
		exit 7
	else
		# Unmount the connection
		echo -e "\n${YELL}Unmounting the connection...${NRML}\n"
		umount "${LOCAL_PATH}"
	fi
fi

# Flatten the local_path so we can use it in a file name
LOCAL_PATH_FLAT=`echo ${LOCAL_PATH} | sed "s/\//_/g"`
SSHFSD_KEY="${SSHFSD_KEY_PREFIX}${LOCAL_PATH_FLAT}"

# Remove any ssh keys
echo -e "\n${YELL}Removing any SSH keys...${NRML}\n"
if [ -f "${SSHFSD_KEY}" ]
then
	rm "${SSHFSD_KEY}"
	# TODO: add message explaining the need to manually remove ssh public key from remoter users autrhorized_keys file
fi
if [ -f "${SSHFSD_KEY}.pub" ]
then
	rm "${SSHFSD_KEY}.pub"
fi

# Remove the connection from the sshfsd shares config file
sed -i "" "/ ${LOCAL_PATH} /d" "${SSHFSD_CONF_PATH}"

# TODO: test for failure of above

# Update configuration in the local repo and if interactive mode then push to remote repo
if [ "${IS_INTERACTIVE}" = "no" ]
then
	echo -e "\n${FDO_SERVER_SCRIPT} update-config ${SSHFSD_CONF_PATH} ...\n"
	CHANGE_MESSAGE="remove sshfs connection for local_path '${LOCAL_PATH}'" GIT_NO_PUSH="yes" ${FDO_SERVER_SCRIPT} update-config "${SSHFSD_CONF_PATH}"
else
	question_yes_no "\nWould you like to update the repo with the config changes?"
	if [ "${ANSWER}" = "yes" ]
	then
		echo -e "\n${FDO_SERVER_SCRIPT} update-config ${SSHFSD_CONF_PATH} ...\n"
		CHANGE_MESSAGE="remove sshfs connection for local_path '${LOCAL_PATH}'" ${FDO_SERVER_SCRIPT} update-config "${SSHFSD_CONF_PATH}"
	fi
fi

echo -e ""

if [ ${ERROR_COUNT} -gt 0 ]
then
	exit 15
fi

################################################################################
