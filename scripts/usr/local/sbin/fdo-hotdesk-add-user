#!/bin/sh

# Copyright (c) 2016 Euan Thoms <euan@potensol.com>.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


##### GLOBAL STATIC VARIABLE DECLARATIONS ######################################

SCRIPT_NAME=`basename ${0}`
USERNAME="${1}"
DISPLAY_NAME="${2}"
NUM_MANDATORY_ARGS=2
FDO_SERVER_SCRIPT=${FDO_SERVER_SCRIPT:-"fdo-server"}
UCL_CMD="/usr/local/bin/uclcmd"
FDO_CONFIG_ROOT=${FDO_CONFIG_ROOT:-"/usr/local/etc/fdo"}
HOST_CONF_PATH=${HOST_CONF_PATH:-"${FDO_CONFIG_ROOT}/host.conf"}
HOTDESK_CONF_PATH=${HOTDESK_CONF_PATH:-"${FDO_CONFIG_ROOT}/hotdesk.conf"}
IS_INTERACTIVE="yes"
USER_UID=${USER_UID:-""}
USER_PASSWORD=${USER_PASSWORD:-""}
HOTDESK_UID_MIN=5001
HOTDESK_UID_MAX=9999

TERM="xterm"
LRED="\033[1;31m"
LGRN="\033[1;32m"
LBLU="\033[1;34m"
LCYN="\033[1;36m"
CYAN="\033[0;36m"
YELL="\033[1;33m"
ORNG="\033[0;33m"
GREY="\033[0;37m"
DGRY="\033[1;30m"
NRML="\033[0;00m"

CARRIAGE_RETURN="
"

##### COMMAND USAGE INFO #######################################################

usage ()
{
	if [ "${NO_DISPLAY_USAGE}" = "yes" ]
	then
		return 1
	fi

	echo -e ""
	echo -e "${LCYN}    ---- ${SCRIPT_NAME} command usage ----${NRML}"
	echo -e ""
	echo -e "${YELL}Description:${NRML} Add a hotdesk user to a host configured for FDo NIS/NFS hotdesking."
	echo -e ""
	echo -e "${YELL}Usage:   ${LGRN}${SCRIPT_NAME} username display_name [--non-interactive]${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} joe.bloggs \"Joe Bloggs\"${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} joe.bloggs \"Joe Bloggs\" --non-interactive${NRML}"
	echo -e ""
	echo -e "${YELL}Options:${NRML}"
	echo -e ""
	echo -e "${YELL}--non-interactive ; Will not prompt or commit changes to the config repo.${NRML}"
	echo -e ""
}


##### PARSE ARGUMENTS ##########################################################

ARG_INDEX=1
for ARG in "${@}"
do
	if [ ${ARG_INDEX} -gt ${NUM_MANDATORY_ARGS} ]
	then
		OPTIONAL_ARG_NAME=`echo ${ARG} | cut -d= -f1`
		OPTIONAL_ARG_VALUE=`echo ${ARG} | cut -d= -f2`
		case ${OPTIONAL_ARG_NAME} in
			--non-interactive)
				IS_INTERACTIVE="no"
				;;
			*)
				echo -e "\n${LRED}ERROR:${NRML} Invalid argument!\n       Aborting.\n"
				usage
				exit 1
				;;
		esac
	fi

	ARG_INDEX=$(( ${ARG_INDEX} + 1 ))

done


##### FUNCTIONS ################################################################

# source readee function
. /usr/local/bin/fdo-readee

question_yes_no ()
{
	while true
		do
		echo -e "${LCYN}${1}${NRML}"
		readee -p "${LCYN}(yes/no): ${NRML}" ANSWER
		if [ "${ANSWER}" = "yes" ] || [ "${ANSWER}" = "no" ]
		then
			break
		fi
		echo ""
	done
}

test_valid_integer ()
{

	TEST_CASE="${1}"
	TEST_MIN_VALUE=${2}
	TEST_MAX_VALUE=${3}

	VALID_INTEGER="yes"

	if [ "${TEST_CASE}" = "" ]
	then
		VALID_INTEGER="no"
		return 1
	fi

	IS_SYNTAX_OK=`echo "${TEST_CASE}" | sed -r "s/^[0-9]+//" | wc -L`
	if [ ${IS_SYNTAX_OK}  -ne 0 ]
	then
		VALID_INTEGER="no"
		return 2
	fi

	if [ ${TEST_CASE} -lt ${TEST_MIN_VALUE} ]
	then
		VALID_INTEGER="no"
		return 3
	fi

	if [ ${TEST_CASE} -gt ${TEST_MAX_VALUE} ]
	then
		VALID_INTEGER="no"
		return 4
	fi

}

test_if_host ()
{
	procstat 0 > /dev/null 2>&1
	if [ ${?} -eq 0 ]
	then
		IS_HOST=yes
	else
		IS_HOST=no
	fi
}

test_valid_person_name ()
{

	TEST_CASE="${1}"

	VALID_PERSON_NAME="yes"

	if [ "${TEST_CASE}" = "" ]
	then
		VALID_PERSON_NAME="no"
		return 1
	fi

	IS_SYNTAX_OK=`echo "${TEST_CASE}" | sed -r "s/^[a-zA-Z0-9]*[a-zA-Z0-9\ ]*[a-zA-Z0-9]+//" | wc -L`
	if [ ${IS_SYNTAX_OK}  -ne 0 ]
	then
		VALID_PERSON_NAME="no"
		return 2
	fi

	return 0
}

ucl_array_length ()
{
	UCL_ARRAY_LENGTH_FILE_PATH="${1}"
	UCL_ARRAY_LENGTH_VARIABLE="${2}"
	UCL_ARRAY_LENGTH=0

	UCL_ARRAY_LENGTH_OBJECT=`${UCL_CMD} get -f "${UCL_ARRAY_LENGTH_FILE_PATH}" "${UCL_ARRAY_LENGTH_VARIABLE}" 2> /dev/null`
	if [ ${?} -ne 0 ]
	then
		# Unexpected error accessing the UCL file.
		return 2
	fi

	if [ "${UCL_ARRAY_LENGTH_OBJECT}" != "[array]" ]
	then
		# The variable was not a valid array, return expected error.
		return 1
	fi

	while [ "${UCL_ARRAY_LENGTH_OBJECT}" != "null" ]
	do
		UCL_ARRAY_LENGTH_OBJECT=`${UCL_CMD} get -f "${UCL_ARRAY_LENGTH_FILE_PATH}" "${UCL_ARRAY_LENGTH_VARIABLE}.${UCL_ARRAY_LENGTH}"`
		if [ "${UCL_ARRAY_LENGTH_OBJECT}" != "null" ]
		then
			UCL_ARRAY_LENGTH=$(( ${UCL_ARRAY_LENGTH} + 1 ))
		fi
	done

	return 0
}

backup_file ()
{
	FILE_PATH="${1}"
	CHANGE_AGENT="${2}"
	if [ -f "${FILE_PATH}" ]
	then
		BACKUP_FILE_PATH="${FILE_PATH}.backup.${CHANGE_AGENT}"
		cp "${FILE_PATH}" "${BACKUP_FILE_PATH}" 2> /dev/null
		if [ ${?} -ne 0 ]
		then
			echo -e "\n${LRED}ERROR:${NRML} Failed to backup file '${ORNG}${FILE_PATH}${NRML}'!\n"
			BACKUP_FILE_PATH=""
			return 2
		fi
	else
		echo -e "\n${LRED}ERROR:${NRML} File '${ORNG}${FILE_PATH}${NRML}' does not exist!\n       Unable to backup.\n"
		BACKUP_FILE_PATH=""
		return 1
	fi

	return 0
}

restore_file ()
{
	FILE_PATH=${1}
	CHANGE_AGENT="${2}"

	if [ -f "${FILE_PATH}" ] && [ -f "${FILE_PATH}.backup.${CHANGE_AGENT}" ]
	then
		diff -q "${FILE_PATH}" "${FILE_PATH}.backup.${CHANGE_AGENT}" > /dev/null 2>&1
		if [ ${?} -ne 0 ]
		then
			# File and backup differ, replace the file content from the backup copy.
			cat "${FILE_PATH}.backup.${CHANGE_AGENT}" > "${FILE_PATH}"
			if [ ${?} -ne 0 ]
			then
				return 2
			fi
		fi
		# Remove the backup.
		rm "${FILE_PATH}.backup.${CHANGE_AGENT}"
		if [ ${?} -ne 0 ]
		then
			return 2
		fi
	else
		# File has been removed, so move backup to file path.
		mv "${FILE_PATH}.backup.${CHANGE_AGENT}" "${FILE_PATH}"
		if [ ${?} -ne 0 ]
		then
			return 2
		fi
	fi

	return 0

}

undo_backup_file ()
{
	FILE_PATH=${1}
	CHANGE_AGENT="${2}"

	if [ -f "${FILE_PATH}.backup.${CHANGE_AGENT}" ]
	then
		# Remove the backup.
		rm "${FILE_PATH}.backup.${CHANGE_AGENT}"
		if [ ${?} -ne 0 ]
		then
			return 2
		fi
	fi

	return 0

}

undo_add_user ()
{
	ERROR_COUNT=0

	echo -e "\n${ORNG}Undoing add user process...${NRML}\n"

	# Destroy the hotdesk users' home directory filesystem.
	if [ ${USER_HOME_FS_CREATED} = true ]
	then
		echo -e "${YELL}Destroying the users' home filesystem...${NRML}\n"
		zfs destroy -rpf ${HOME_ZFS_NAME}/${USERNAME}
		ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	fi

	# Restore local system and NIS users database.
	echo -e "\n${YELL}Restoring local system and NIS users databases...${NRML}\n"
	restore_file /etc/exports ${SCRIPT_NAME}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	restore_file /etc/passwd ${SCRIPT_NAME}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	restore_file /etc/master.passwd ${SCRIPT_NAME}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	restore_file /etc/pwd.db ${SCRIPT_NAME}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	restore_file /etc/spwd.db ${SCRIPT_NAME}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	restore_file /var/yp/master.passwd ${SCRIPT_NAME}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	sleep 1
	touch /var/yp/master.passwd
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	cd /var/yp
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	make
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	cd -
	service mountd reload
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

	# Restore hotdesk.conf UCL config file.
	restore_file ${HOTDESK_CONF_PATH} ${SCRIPT_NAME}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

	if [ ${ERROR_COUNT} -ne 0 ]
	then
		echo -e "\n${LRED}ERROR:${NRML} An error occurred whilst trying to undo add user!\n"
	else
		echo -e ""
	fi
}


##### SANITY TESTS #############################################################

if [ ${#} -lt ${NUM_MANDATORY_ARGS} ]
then
	echo -e "\n${LRED}ERROR:${NRML} Incorrect number of arguments!\n       Aborting.\n"
	usage
	exit 1
fi

# Check we are running with root privileges.
if [ `id -u` -ne 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} This command must be run with root (super-user) privileges!\n       Aborting.\n"
	exit 1
fi

test_if_host

if [ "${IS_HOST}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} This command must be run from the host!\n       Aborting.\n"
	exit 1
fi

# Check that the host.conf file exists.
if [ ! -e "${HOST_CONF_PATH}" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The host config file \n       '${ORNG}${HOST_CONF_PATH}${NRML}'"
	echo -e "       appears to be missing.\n       Aborting.\n"
	exit 1
fi

# Check that the host.conf file is accessible.
TEST_UCL=`${UCL_CMD} get -u -f ${HOST_CONF_PATH} .general 2>&1`
if [ ${?} -ne 0 ] || [ "${TEST_UCL}" = "null" ] || [ "${TEST_UCL}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} Failed to access the config file '${HOST_CONF_PATH}'!\n       Aborting.\n"
	exit 2
fi

# Check that the hotdesk subsystem is initialised.
HOTDESK_SUBSYS_COMPAT=`${UCL_CMD} get -f ${HOST_CONF_PATH} -q .subsystems.hotdesk_compat`
if [ "${HOTDESK_SUBSYS_COMPAT}" = "null" ] || [ "${HOTDESK_SUBSYS_COMPAT}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} It appears that the Hotdesk subsystem is not initialised."
	echo -e "       Consider using the command:"
	echo -e "       ${LBLU}${SCRIPT_NAME} init-hotdesk${NRML}\n       Aborting.\n"
	return 1
fi

# Check that the hotdesk.conf file is accessible.
TEST_UCL=`${UCL_CMD} get -u -f ${HOTDESK_CONF_PATH} .general 2>&1`
if [ ${?} -ne 0 ] || [ "${TEST_UCL}" = "null" ] || [ "${TEST_UCL}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} Failed to access the config file '${HOTDESK_CONF_PATH}'!\n       Aborting.\n"
	exit 2
fi

# Check for unsaved registered host config files.
echo -e "\n${YELL}Now we need to check if there are any unsaved changes to this hosts registered\nconfig files...${NRML}\n"
${FDO_SERVER_SCRIPT} check-configs --script > /dev/null 2>&1
if [ ${?} -gt 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} One or more host config files are not updated in the repo."
	echo -e "       Please use '${LBLU}${FDO_SERVER_SCRIPT} check-configs${NRML}' subcommand to see what's out-of-date."
	echo -e "       Please use '${LBLU}${FDO_SERVER_SCRIPT} update-config${NRML}' subcommannd to keep the repo up-to-date.\n       Aborting.\n"
	exit 1
fi

# Check that we are not currently running a backupz operation.
pgrep -fl "fdo-backupz " > /dev/null 2>&1
if [ ${?} -eq 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} There appears to be a backupz operation running!\n       Aborting.\n"
	exit 1
fi

# Check that we are not currently running a repair backupz state operation.
pgrep -fl "fdo-backupz-repair-state " > /dev/null 2>&1
if [ ${?} -eq 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} There appears to be a backupz repair operation running!\n       Aborting.\n"
	exit 1
fi

# Check that the username only contains letters, numbers, periods, underscores and hyphens between 3 and 30 characters.
IS_SYNTAX_OK=`echo "${USERNAME}" | sed -r "s/^[a-z0-9][a-z0-9\.\_\-]+[a-z0-9]//" | wc -L`
IS_LENGTH_OK=`echo "${USERNAME}" | sed -r "s/^(.{3,30})//" | wc -L`
if [ ${IS_SYNTAX_OK} -ne 0 ] || [ "${USERNAME}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The username can not be '${ORNG}${USERNAME}${NRML}'."
	echo -e "       It must be between 3 and 30 characters and only contain lower case"
	echo -e "       letters, numbers, periods, underscores and hyphens.\n       Aborting.\n"
	exit 1
fi

# Check that the display_name only contains letters numbers and spaces.
test_valid_person_name "${DISPLAY_NAME}"
if [ "${VALID_PERSON_NAME}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The display_name can not be '${ORNG}${DISPLAY_NAME}${NRML}'."
	echo -e "       It must contain only letters, numbers and spaces.\n       Aborting.\n"
	exit 1
fi

# Check that user doesn't already exist.
pw user show ${USERNAME} > /dev/null 2>&1
if [ ${?} -eq 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} The user '${ORNG}${USERNAME}${NRML}' already exists on the system!\n       Aborting.\n"
	exit 1
fi

# Check that NIS user doesn't already exist.
ypcat passwd | cut -d":" -f1 | grep "^${USERNAME}$" > /dev/null 2>&1
if [ ${?} -eq 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} The NIS user '${ORNG}${USERNAME}${NRML}' already exists in the YP maps!\n       Aborting.\n"
	exit 1
fi


##### MAIN EXECUTION THREAD ####################################################

trap 'undo_add_user ; exit 3' HUP INT QUIT KILL TERM

ERROR_COUNT=0
USER_HOME_FS_CREATED=false

# Get pool for hotdesk users' home directories.
HOME_POOL=`${UCL_CMD} get -f ${HOST_CONF_PATH} -q .storage.hotdesk_pool`
if [ "${HOME_POOL}" = "null" ] || [ "${HOME_POOL}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The Hotdesk home pool specified in the config file:"
	echo -e "       '${ORNG}${HOST_CONF_PATH}${NRML}'\n       is not valid! Aborting.\n"
	exit 1
fi

# Get root filesystem for hotdesk users' home directories.
HOME_FS=`${UCL_CMD} get -f ${HOTDESK_CONF_PATH} -q .general.root_filesystem`
if [ "${HOME_FS}" = "null" ] || [ "${HOME_FS}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The Hotdesk home root filesystem specified in the config file:"
	echo -e "       '${ORNG}${HOTDESK_CONF_PATH}${NRML}'\n       is not valid! Aborting.\n"
	exit 1
fi

# Get root filesystem mountpoint for hotdesk users' home directories.
HOME_MP=`${UCL_CMD} get -f ${HOTDESK_CONF_PATH} -q .general.root_mountpoint`
if [ "${HOME_MP}" = "null" ] || [ "${HOME_MP}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The Hotdesk home root mountpoint specified in the config file:"
	echo -e "       '${ORNG}${HOTDESK_CONF_PATH}${NRML}'\n       is not valid! Aborting.\n"
	exit 1
fi

# Get hotdesk users' default home folder quota from config files.
DEFAULT_HOME_FOLDER_QUOTA=`${UCL_CMD} get -f ${HOTDESK_CONF_PATH} -q .general.default_home_folder_quota`
if [ "${DEFAULT_HOME_FOLDER_QUOTA}" = "null" ] || [ "${DEFAULT_HOME_FOLDER_QUOTA}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The Hotdesk default home folder quota specified in the config file:"
	echo -e "       '${ORNG}${HOTDESK_CONF_PATH}${NRML}'\n       is not valid! Aborting.\n"
	exit 1
fi

HOME_ZFS_NAME="${HOME_POOL}/${HOME_FS}"

# Determine the NFS subnet and subnet mask.
DEFAULT_LAN_SUBNET_B="10.0"
CONFIG_LAN_NET_IFACE=`${UCL_CMD} get -f ${HOST_CONF_PATH} -q .network.interface.lan.id`
if [ "${CONFIG_LAN_NET_IFACE}" = "null" ] || [ "${CONFIG_LAN_NET_IFACE}" = "" ]
then
	echo -e "\n${ORNG}WARNING:${NRML} Unable to retrieve the LAN network interface identifier in the config file:"
	echo -e "'${ORNG}${HOST_CONF_PATH}${NRML}'.\n"
	SET_LAN_SUBNET_B="${DEFAULT_LAN_SUBNET_B}"
else
	DETECTED_LAN_SUBNET_B=`ifconfig ${CONFIG_LAN_NET_IFACE} | grep "inet.*netmask 0xffff0000" | awk '{print $2}' | sort | head -1 | cut -d. -f1,2`
	if [ "${DETECTED_LAN_SUBNET_B}" = "" ]
	then
		SET_LAN_SUBNET_B="${DEFAULT_LAN_SUBNET_B}"
	else
		SET_LAN_SUBNET_B="${DETECTED_LAN_SUBNET_B}"
	fi
fi
FDO_LAN_SUBNET_B=${FDO_LAN_SUBNET_B:-"${SET_LAN_SUBNET_B}"}
NFS_SUBNET_C=${NFS_SUBNET_C:-"${FDO_LAN_SUBNET_B}.40"}
NFS_SUBNET_MASK=${NFS_SUBNET_MASK:-"255.255.255.0"}

# Backup affected system files in case something goes wrong.
backup_file /etc/exports ${SCRIPT_NAME}
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
backup_file /var/yp/master.passwd ${SCRIPT_NAME}
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
backup_file /etc/passwd ${SCRIPT_NAME}
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
backup_file /etc/master.passwd ${SCRIPT_NAME}
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
backup_file /etc/pwd.db ${SCRIPT_NAME}
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
backup_file /etc/spwd.db ${SCRIPT_NAME}
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
backup_file ${HOTDESK_CONF_PATH} ${SCRIPT_NAME}
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

# Add new NIS user locally.
if [ "${IS_INTERACTIVE}" = "yes" ] && [ "${USER_UID}" = "" ]
then
	question_yes_no "\nWould you like to specify the UID of the new user?"
	if [ "${ANSWER}" = "yes" ]
	then
		USER_UID=""
		while [ "${USER_UID}" = "" ]
		do
			echo -e ""
			readee -p "${LCYN}Enter the new users' UID [${HOTDESK_UID_MIN}-${HOTDESK_UID_MAX}]: ${NRML}" USER_UID_TEMP

			# Check that the UID is valid.
			test_valid_integer "${USER_UID_TEMP}" ${HOTDESK_UID_MIN} ${HOTDESK_UID_MAX}
			if [ "${VALID_INTEGER}" = "yes" ]
			then
				question_yes_no "\nYou have entered '${NRML}${USER_UID_TEMP}${LCYN}' as the new users' UID.\nIs this correct?"
				if [ "${ANSWER}" = "yes" ]
				then
					USER_UID=${USER_UID_TEMP}
				fi
			else
				echo -e "\n${LRED}ERROR:${NRML} The new users' UID can not be '${ORNG}${USER_UID_TEMP}${NRML}'."
				echo -e "       It must contain only numbers, greater than ${HOTDESK_UID_MIN} and less than ${HOTDESK_UID_MAX}.\n"
			fi
		done
	fi
fi

echo -e ""

# Get lists of in use uid numbers from local, nis and hotdesk.conf.
ALL_CURRENT_LOCAL_UIDS=`cat /etc/passwd | sed "/^#/d" | cut -d: -f3 | sed "s:[^0-9]*::g"`
ALL_CURRENT_NIS_UIDS=`ypcat passwd | sed "/^#/d" | cut -d: -f3 | sed "s:[^0-9]*::g"`
ALL_CURRENT_UCL_UIDS=""
USER_INDEX=0
while [ `${UCL_CMD} get -f ${HOTDESK_CONF_PATH} -q .users.${USER_INDEX}` != "null" ]
do
	UCL_USER_UID=`${UCL_CMD} get -f ${HOTDESK_CONF_PATH} -q .users.${USER_INDEX}.uid`
	ALL_CURRENT_UCL_UIDS="${ALL_CURRENT_UCL_UIDS}${CARRIAGE_RETURN}${UCL_USER_UID}"
	USER_INDEX=$(( ${USER_INDEX} + 1 ))
done

if [ "${USER_UID}" = "" ]
then
	# We get here if the uid is unspecified, let us automatically assign the next available.

	# Get next available uid within allowed range.
	NEXT_USER_UID_FOUND=false
	NEXT_USER_UID=${HOTDESK_UID_MIN}
	while [ ${NEXT_USER_UID_FOUND} = false ] && [ ${NEXT_USER_UID} -lt ${HOTDESK_UID_MAX} ]
	do
		echo "${ALL_CURRENT_LOCAL_UIDS}" | grep -w "${NEXT_USER_UID}" > /dev/null 2>&1
		RESULT1=${?}
		echo "${ALL_CURRENT_NIS_UIDS}" | grep -w "${NEXT_USER_UID}" > /dev/null 2>&1
		RESULT2=${?}
		echo "${ALL_CURRENT_UCL_UIDS}" | grep -w "${NEXT_USER_UID}" > /dev/null 2>&1
		RESULT3=${?}
		if [ ${RESULT1} -ne 0 ] && [ ${RESULT2} -ne 0 ] && [ ${RESULT3} -ne 0 ]
		then
			NEXT_USER_UID_FOUND=true
			USER_UID=${NEXT_USER_UID}
		fi
		NEXT_USER_UID=$(( ${NEXT_USER_UID} + 1 ))
	done
	if [ ${NEXT_USER_UID_FOUND} = false ]
	then
		echo -e "\n${LRED}ERROR:${NRML} Could not find the next available UID for the Hotdesk user!\n       Aborting."
		undo_add_user
		exit 1
	fi
else
	# Test if specified uid is valid.
	test_valid_integer "${USER_UID}" ${HOTDESK_UID_MIN} ${HOTDESK_UID_MAX}
	if [ "${VALID_INTEGER}" = "no" ]
	then
		echo -e "\n${LRED}ERROR:${NRML} The Hotdesk user UID specified is not valid!\n       Aborting."
		undo_add_user
		exit 1
	fi

	# Test if specified uid is not already in use.
	echo "${ALL_CURRENT_LOCAL_UIDS}" | grep -w "${USER_UID}" > /dev/null 2>&1
	RESULT1=${?}
	echo "${ALL_CURRENT_NIS_UIDS}" | grep -w "${USER_UID}" > /dev/null 2>&1
	RESULT2=${?}
	echo "${ALL_CURRENT_UCL_UIDS}" | grep -w "${USER_UID}" > /dev/null 2>&1
	RESULT3=${?}
	if [ ${RESULT1} -eq 0 ] || [ ${RESULT2} -eq 0 ] || [ ${RESULT3} -eq 0 ]
	then
		echo -e "\n${LRED}ERROR:${NRML} The Hotdesk user UID specified is already in use!\n       Aborting."
		undo_add_user
		exit 1
	fi
fi

# Add the user to the local system.
if [ "${USER_PASSWORD}" = "" ]
then
	pw useradd -n ${USERNAME} -c "${DISPLAY_NAME}" -d /home/${USERNAME} -g users -s /bin/bash -u ${USER_UID}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
else
	echo "${USER_PASSWORD}" | pw useradd -n ${USERNAME} -c "${DISPLAY_NAME}" -d /home/${USERNAME} -g users -s /bin/bash -u ${USER_UID} -h 0
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
fi

# If using interactive mode and password is not specified via environment variable, set it manually.
if [ "${IS_INTERACTIVE}" = "yes" ] && [ "${USER_PASSWORD}" = "" ]
then
	echo -e ""
	passwd ${USERNAME}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	echo -e ""
fi

# Get the users encrypted password from /etc/master.passwd file.
ENCRYPTED_PASSWORD=`cat /etc/master.passwd | grep "^${USERNAME}:" | cut -d: -f2`
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

# Get the users effective uid from /etc/master.passwd file.
EFFECTIVE_USER_UID=`cat /etc/master.passwd | grep "^${USERNAME}:" | cut -d: -f3`
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

# Get the users array index from the hotdesk config file.
ucl_array_length ${HOTDESK_CONF_PATH} .users
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
HOTDESK_USERS_ARRAY_INDEX=${UCL_ARRAY_LENGTH}

# Now add the hotdesk user info to the hotdesk.conf.
${UCL_CMD} set -f ${HOTDESK_CONF_PATH} -t object .users.${HOTDESK_USERS_ARRAY_INDEX} "{ username = \"${USERNAME}\"; }"
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
${UCL_CMD} set -f ${HOTDESK_CONF_PATH} -t number .users.${HOTDESK_USERS_ARRAY_INDEX}.uid "${EFFECTIVE_USER_UID}"
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
${UCL_CMD} set -f ${HOTDESK_CONF_PATH} -t string .users.${HOTDESK_USERS_ARRAY_INDEX}.display_name "${DISPLAY_NAME}"
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
${UCL_CMD} set -f ${HOTDESK_CONF_PATH} -t string .users.${HOTDESK_USERS_ARRAY_INDEX}.encrypted_password "${ENCRYPTED_PASSWORD}"
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

# Create ZFS filesystem for home folder.
zfs create -o quota=${DEFAULT_HOME_FOLDER_QUOTA} ${HOME_ZFS_NAME}/${USERNAME}
RETURN_CODE=${?}
ERROR_COUNT=$(( ${ERROR_COUNT} + ${RETURN_CODE} ))
if [ ${RETURN_CODE} -eq 0 ]
then
	USER_HOME_FS_CREATED=true
fi

# Change ownership of home folder.
chown -R ${USERNAME}:users ${HOME_MP}/${USERNAME}
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

# Add home folder to NFS exports.
echo "${HOME_MP}/${USERNAME} -maproot=root -network ${NFS_SUBNET_C} -mask ${NFS_SUBNET_MASK}" >> /etc/exports
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
echo -e ""
service mountd reload
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

# Add local user to NIS maps.
cd /var/yp
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
cat /etc/master.passwd | egrep "^${USERNAME}:" >> master.passwd
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

echo -e ""

# Update the new NIS domain.
make
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

if [ ${ERROR_COUNT} -ne 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} Something went wrong adding the user!"
	echo -e "       Aborting.\n"
	undo_add_user
	exit 2
fi

# Update configuration in the local repo and if interactive mode then push to remote repo.
echo -e "\n${YELL}Updating configuration to the repo...${NRML}\n"
if [ "${IS_INTERACTIVE}" = "no" ]
then
	CHANGE_MESSAGE="add hotdesk user '${USERNAME}'" GIT_NO_PUSH="yes" FETCH_LATEST_SELF="no" ${FDO_SERVER_SCRIPT} update-config "${HOTDESK_CONF_PATH}"
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
else
	CHANGE_MESSAGE="add hotdesk user '${USERNAME}'" FETCH_LATEST_SELF="no" ${FDO_SERVER_SCRIPT} update-config "${HOTDESK_CONF_PATH}"
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
fi

if [ ${ERROR_COUNT} -ne 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} Something went wrong saving the configuration to the repo!\n"
	exit 2
fi

# Since everything seems successful, we can remove the backup configs.
undo_backup_file /etc/exports ${SCRIPT_NAME}
undo_backup_file /var/yp/master.passwd ${SCRIPT_NAME}
undo_backup_file /etc/passwd ${SCRIPT_NAME}
undo_backup_file /etc/master.passwd ${SCRIPT_NAME}
undo_backup_file /etc/pwd.db ${SCRIPT_NAME}
undo_backup_file /etc/spwd.db ${SCRIPT_NAME}
undo_backup_file ${HOTDESK_CONF_PATH} ${SCRIPT_NAME}

echo -e "\n${LGRN}Successfully added the hotdesk user '${NRML}${USERNAME}${LGRN}'.${NRML}\n"

################################################################################
