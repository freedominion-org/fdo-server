#!/bin/sh

# Copyright (c) 2016 Euan Thoms <euan@potensol.com>.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


##### GLOBAL STATIC VARIABLE DECLARATIONS ######################################

SCRIPT_NAME=`basename ${0}`
USERNAME="${1}"
DISPLAY_NAME="${2}"
NUM_MANDATORY_ARGS=2
UCL_CMD="/usr/local/bin/uclcmd"
FDO_CONFIG_ROOT=${FDO_CONFIG_ROOT:-"/usr/local/etc/fdo"}
HOST_CONF_PATH=${HOST_CONF_PATH:-"${FDO_CONFIG_ROOT}/host.conf"}
HOTDESK_CONF_PATH=${HOTDESK_CONF_PATH:-"${FDO_CONFIG_ROOT}/hotdesk.conf"}

TERM="xterm"
LRED="\033[1;31m"
LGRN="\033[1;32m"
LBLU="\033[1;34m"
LCYN="\033[1;36m"
CYAN="\033[0;36m"
YELL="\033[1;33m"
ORNG="\033[0;33m"
GREY="\033[0;37m"
DGRY="\033[1;30m"
NRML="\033[0;00m"

CARRIAGE_RETURN="
"

##### COMMAND USAGE INFO #######################################################

usage ()
{
	if [ "${NO_DISPLAY_USAGE}" = "yes" ]
	then
		return 1
	fi

	echo -e ""
	echo -e "${LCYN}    ---- ${SCRIPT_NAME} command usage ----${NRML}"
	echo -e ""
	echo -e "${YELL}Description:${NRML} Add a hotdesk user to a host configured for FDo NIS/NFS hotdesking."
	echo -e ""
	echo -e "${YELL}Usage:   ${LGRN}${SCRIPT_NAME} username display_name${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} joe.bloggs \"Joe Bloggs\"${NRML}"
	echo -e ""
}


##### PARSE ARGUMENTS ##########################################################

ARG_INDEX=1
for ARG in "${@}"
do
	if [ ${ARG_INDEX} -gt ${NUM_MANDATORY_ARGS} ]
	then
		OPTIONAL_ARG_NAME=`echo ${ARG} | cut -d= -f1`
		OPTIONAL_ARG_VALUE=`echo ${ARG} | cut -d= -f2`
		case ${OPTIONAL_ARG_NAME} in
			*)
				echo -e "\n${LRED}ERROR:${NRML} Invalid argument!\n       Aborting.\n"
				usage
				exit 1
				;;
		esac
	fi

	ARG_INDEX=$(( ${ARG_INDEX} + 1 ))

done


##### FUNCTIONS ################################################################

# source readee function
. /usr/local/bin/fdo-readee

question_yes_no ()
{
	while true
		do
		echo -e "${LCYN}${1}${NRML}"
		readee -p "${LCYN}(yes/no): ${NRML}" ANSWER
		if [ "${ANSWER}" = "yes" ] || [ "${ANSWER}" = "no" ]
		then
			break
		fi
		echo ""
	done
}

test_valid_integer ()
{

	TEST_CASE="${1}"
	TEST_MIN_VALUE=${2}
	TEST_MAX_VALUE=${3}

	VALID_INTEGER="yes"

	if [ "${TEST_CASE}" = "" ]
	then
		VALID_INTEGER="no"
		return 1
	fi

	IS_SYNTAX_OK=`echo "${TEST_CASE}" | sed -r "s/^[0-9]+//" | wc -L`
	if [ ${IS_SYNTAX_OK}  -ne 0 ]
	then
		VALID_INTEGER="no"
		return 2
	fi

	if [ ${TEST_CASE} -lt ${TEST_MIN_VALUE} ]
	then
		VALID_INTEGER="no"
		return 3
	fi

	if [ ${TEST_CASE} -gt ${TEST_MAX_VALUE} ]
	then
		VALID_INTEGER="no"
		return 4
	fi

}

test_if_host ()
{
	procstat 0 > /dev/null 2>&1
	if [ ${?} -eq 0 ]
	then
		IS_HOST=yes
	else
		IS_HOST=no
	fi
}


##### SANITY TESTS #############################################################

if [ ${#} -lt ${NUM_MANDATORY_ARGS} ]
then
	echo -e "\n${LRED}ERROR:${NRML} Incorrect number of arguments!\n       Aborting.\n"
	usage
	exit 1
fi

test_if_host

if [ "${IS_HOST}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} This command must be run from the host!\n       Aborting.\n"
	exit 1
fi

# Check that we are not currently running a backupz operation.
pgrep -fl "fdo-backupz " > /dev/null 2>&1
if [ ${?} -eq 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} There appears to be a backupz operation running!\n       Aborting.\n"
	exit 1
fi

# Check that we are not currently running a repair backupz state operation.
pgrep -fl "fdo-backupz-repair-state " > /dev/null 2>&1
if [ ${?} -eq 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} There appears to be a backupz repair operation running!\n       Aborting.\n"
	exit 1
fi


##### MAIN EXECUTION THREAD ####################################################

ERROR_COUNT=0

# Get hotdesk users' home folder pool from config files.
HOME_POOL=`${UCL_CMD} get -f ${HOST_CONF_PATH} -q .storage.hotdesk_pool`
if [ ${?} -ne 0 ] || [ "${HOME_POOL}" = "null" ] || [ "${HOME_POOL}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The Hotdesk home pool specified in the config file"
	echo -e "       '${HOST_CONF_PATH}'\n       is not valid! Aborting.\n"
	exit 1
fi

# Get hotdesk users' home folder root filesystem from config files.
HOME_FS=`${UCL_CMD} get -f ${HOTDESK_CONF_PATH} -q .general.root_filesystem`
if [ ${?} -ne 0 ] || [ "${HOME_FS}" = "null" ] || [ "${HOME_FS}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The Hotdesk home root filesystem specified in the config file"
	echo -e "       '${HOTDESK_CONF_PATH}'\n       is not valid! Aborting.\n"
	exit 1
fi

# Get hotdesk users' default home folder quota from config files.
DEFAULT_HOME_FOLDER_QUOTA=`${UCL_CMD} get -f ${HOTDESK_CONF_PATH} -q .general.default_home_folder_quota`
if [ ${?} -ne 0 ] || [ "${DEFAULT_HOME_FOLDER_QUOTA}" = "null" ] || [ "${DEFAULT_HOME_FOLDER_QUOTA}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The Hotdesk default home folder quota specified in the config file"
	echo -e "       '${HOTDESK_CONF_PATH}'\n       is not valid! Aborting.\n"
	exit 1
fi

HOME_ZFS_NAME="${HOME_POOL}/${HOME_FS}"

# Determine the NFS subnet and subnet mask.
DEFAULT_LAN_SUBNET_B="10.0"
CONFIG_LAN_NET_IFACE=`${UCL_CMD} get -f ${HOST_CONF_PATH} -q .network.interface.lan.id`
if [ ${?} -ne 0 ] || [ "${CONFIG_LAN_NET_IFACE}" = "null" ] || [ "${CONFIG_LAN_NET_IFACE}" = "" ]
then
	echo -e "\n${ORNG}WARNING:${NRML} Unable to retrieve the LAN network interface identifier in the config file '${HOST_CONF_PATH}'!\n"
	SET_LAN_SUBNET_B="${DEFAULT_LAN_SUBNET_B}"
else
	DETECTED_LAN_SUBNET_B=`ifconfig ${CONFIG_LAN_NET_IFACE} | grep "inet.*netmask 0xffff0000" | awk '{print $2}' | sort | head -1 | cut -d. -f1,2`
	if [ "${DETECTED_LAN_SUBNET_B}" = "" ]
	then
		SET_LAN_SUBNET_B="${DEFAULT_LAN_SUBNET_B}"
	else
		SET_LAN_SUBNET_B="${DETECTED_LAN_SUBNET_B}"
	fi
fi
FDO_LAN_SUBNET_B=${FDO_LAN_SUBNET_B:-"${SET_LAN_SUBNET_B}"}
NFS_SUBNET_C=${NFS_SUBNET_C:-"${FDO_LAN_SUBNET_B}.40"}
NFS_SUBNET_MASK=${NFS_SUBNET_MASK:-"255.255.255.0"}

# Add new NIS user locally
question_yes_no "\nWould you like to specify the UID of the new user?"
if [ "${ANSWER}" = "yes" ]
then
	USER_UID=""
	while [ "${USER_UID}" = "" ]
	do
		echo -e ""
		readee -p "${LCYN}Enter the new users' UID: ${NRML}" USER_UID_TEMP
		# Check that the UID is valid.
		test_valid_integer "${USER_UID_TEMP}" 1000 100000
		if [ "${VALID_INTEGER}" = "yes" ]
		then
			question_yes_no "\nYou have entered '${USER_UID_TEMP}' as the new users' UID.\nIs this correct?"
			if [ "${ANSWER}" = "yes" ]
			then
				USER_UID=${USER_UID_TEMP}
			fi
		else
			echo -e "\n${LRED}ERROR:${NRML} The new users' UID can not be '${USER_UID}'."
			echo -e "       It must contain only numbers, greater than 1000 and less than 100000.\n"
		fi
	done
	echo -e ""
	pw useradd -n ${USERNAME} -c "${DISPLAY_NAME}" -d /home/${USERNAME} -g users -s /bin/bash -u ${USER_UID}
else
	echo -e ""
	pw useradd -n ${USERNAME} -c "${DISPLAY_NAME}" -d /home/${USERNAME} -g users -s /bin/bash
fi
echo -e ""
passwd ${USERNAME}
echo -e ""

# Create ZFS filesystem for home folder
zfs create -o quota=${DEFAULT_HOME_FOLDER_QUOTA} ${HOME_ZFS_NAME}/${USERNAME}

# Change ownership of home folder
chown -R ${USERNAME}:users /fdo-hotdesk-home/${USERNAME}

## TODO: add export (share) and user from hotdesk subsystem UCL config.
# Add home folder to NFS exports
echo "/fdo-hotdesk-home/${USERNAME} -maproot=root -network ${NFS_SUBNET_C} -mask ${NFS_SUBNET_MASK}" >> /etc/exports
echo -e ""
service mountd reload

# Add local user to NIS maps
cd /var/yp
cat /etc/master.passwd | egrep "^${USERNAME}:" >> master.passwd

echo -e ""
make

echo -e "\n${LGRN}Operation complete!${NRML}\n"

if [ ${ERROR_COUNT} -gt 0 ]
then
	exit 2
fi

################################################################################
