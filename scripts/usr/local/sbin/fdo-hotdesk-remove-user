#!/bin/sh

# Copyright (c) 2016 Euan Thoms <euan@potensol.com>.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


##### GLOBAL STATIC VARIABLE DECLARATIONS ######################################

SCRIPT_NAME=`basename ${0}`
USERNAME="${1}"
NUM_MANDATORY_ARGS=1
UCL_CMD="/usr/local/bin/uclcmd"
FDO_CONFIG_ROOT=${FDO_CONFIG_ROOT:-"/usr/local/etc/fdo"}
HOST_CONF_PATH=${HOST_CONF_PATH:-"${FDO_CONFIG_ROOT}/host.conf"}
HOTDESK_CONF_PATH=${HOTDESK_CONF_PATH:-"${FDO_CONFIG_ROOT}/hotdesk.conf"}
SYSTEM_STATE_ROOT=${SYSTEM_STATE_ROOT:-"/var/db"}
BACKUPZ_STATE_PATH=${STATE_PATH:-"${SYSTEM_STATE_ROOT}/fdo-backupz.state"}
DATE_CMD=/bin/date
NOW=`${DATE_CMD} +%Y-%m-%d_%H-%M`
FORCE_MODE="no"
IS_INTERACTIVE="yes"
RENAME_BACKUP_FS=${RENAME_BACKUP_FS:-"yes"}
HOTDESK_UID_MIN=5001
HOTDESK_UID_MAX=9999

TERM="xterm"
LRED="\033[1;31m"
LGRN="\033[1;32m"
LBLU="\033[1;34m"
LCYN="\033[1;36m"
CYAN="\033[0;36m"
YELL="\033[1;33m"
ORNG="\033[0;33m"
GREY="\033[0;37m"
DGRY="\033[1;30m"
NRML="\033[0;00m"

CARRIAGE_RETURN="
"

##### COMMAND USAGE INFO #######################################################

usage ()
{
	if [ "${NO_DISPLAY_USAGE}" = "yes" ]
	then
		return 1
	fi

	echo -e ""
	echo -e "${LCYN}    ---- ${SCRIPT_NAME} command usage ----${NRML}"
	echo -e ""
	echo -e "${YELL}Description:${NRML} Remove a hotdesk user from a host configured for"
	echo -e "             FDo NIS/NFS hotdesking."
	echo -e ""
	echo -e "${YELL}Usage:   ${LGRN}${SCRIPT_NAME} username [--force] [--non-interactive]${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} joe.bloggs${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} joe.bloggs --force${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} joe.bloggs --non-interactive${NRML}"
	echo -e ""
	echo -e "${YELL}Options:${NRML}"
	echo -e ""
	echo -e "${YELL}--force ; Ignore errors and force all removal steps.${NRML}"
	echo -e ""
	echo -e "${YELL}--non-interactive ; Will not prompt or commit changes to the config repo.${NRML}"
	echo -e ""
}


##### PARSE ARGUMENTS ##########################################################

ARG_INDEX=1
for ARG in "${@}"
do
	if [ ${ARG_INDEX} -gt ${NUM_MANDATORY_ARGS} ]
	then
		OPTIONAL_ARG_NAME=`echo ${ARG} | cut -d= -f1`
		OPTIONAL_ARG_VALUE=`echo ${ARG} | cut -d= -f2`
		case ${OPTIONAL_ARG_NAME} in
			--force)
				FORCE_MODE="yes"
				;;
			--non-interactive)
				IS_INTERACTIVE="no"
				;;
			*)
				echo -e "\n${LRED}ERROR:${NRML} Invalid argument!\n       Aborting.\n"
				usage
				exit 1
				;;
		esac
	fi

	ARG_INDEX=$(( ${ARG_INDEX} + 1 ))

done


##### FUNCTIONS ################################################################

# source readee function
. /usr/local/bin/fdo-readee

question_yes_no ()
{
	while true
	do
		echo -e "${LCYN}${1}${NRML}"
		readee -p "${LCYN}(yes|no): ${NRML}" ANSWER
		if [ "${ANSWER}" = "yes" ] || [ "${ANSWER}" = "no" ]
		then
			break
		fi
		echo ""
	done
}

test_if_host ()
{
	procstat 0 > /dev/null 2>&1
	if [ ${?} -eq 0 ]
	then
		IS_HOST=yes
	else
		IS_HOST=no
	fi
}

ucl_array_length ()
{
	UCL_ARRAY_LENGTH_FILE_PATH="${1}"
	UCL_ARRAY_LENGTH_VARIABLE="${2}"
	UCL_ARRAY_LENGTH=0

	UCL_ARRAY_LENGTH_OBJECT=`${UCL_CMD} get -f "${UCL_ARRAY_LENGTH_FILE_PATH}" "${UCL_ARRAY_LENGTH_VARIABLE}" 2> /dev/null`
	if [ ${?} -ne 0 ]
	then
		# Unexpected error accessing the UCL file.
		return 2
	fi

	if [ "${UCL_ARRAY_LENGTH_OBJECT}" != "[array]" ]
	then
		# The variable was not a valid array, return expected error.
		return 1
	fi

	while [ "${UCL_ARRAY_LENGTH_OBJECT}" != "null" ]
	do
		UCL_ARRAY_LENGTH_OBJECT=`${UCL_CMD} get -f "${UCL_ARRAY_LENGTH_FILE_PATH}" "${UCL_ARRAY_LENGTH_VARIABLE}.${UCL_ARRAY_LENGTH}"`
		if [ "${UCL_ARRAY_LENGTH_OBJECT}" != "null" ]
		then
			UCL_ARRAY_LENGTH=$(( ${UCL_ARRAY_LENGTH} + 1 ))
		fi
	done

	return 0
}

backup_file ()
{
	FILE_PATH="${1}"
	CHANGE_AGENT="${2}"
	if [ -f "${FILE_PATH}" ]
	then
		BACKUP_FILE_PATH="${FILE_PATH}.backup.${CHANGE_AGENT}"
		cp "${FILE_PATH}" "${BACKUP_FILE_PATH}" 2> /dev/null
		if [ ${?} -ne 0 ]
		then
			echo -e "\n${LRED}ERROR:${NRML} Failed to backup file '${ORNG}${FILE_PATH}${NRML}'!\n"
			BACKUP_FILE_PATH=""
			return 2
		fi
	else
		echo -e "\n${LRED}ERROR:${NRML} File '${ORNG}${FILE_PATH}${NRML}' does not exist!\n       Unable to backup.\n"
		BACKUP_FILE_PATH=""
		return 1
	fi

	return 0
}

restore_file ()
{
	FILE_PATH=${1}
	CHANGE_AGENT="${2}"

	if [ -f "${FILE_PATH}" ] && [ -f "${FILE_PATH}.backup.${CHANGE_AGENT}" ]
	then
		diff -q "${FILE_PATH}" "${FILE_PATH}.backup.${CHANGE_AGENT}" > /dev/null 2>&1
		if [ ${?} -ne 0 ]
		then
			# File and backup differ, replace the file content from the backup copy.
			cat "${FILE_PATH}.backup.${CHANGE_AGENT}" > "${FILE_PATH}"
			if [ ${?} -ne 0 ]
			then
				return 2
			fi
		fi
		# Remove the backup.
		rm "${FILE_PATH}.backup.${CHANGE_AGENT}"
		if [ ${?} -ne 0 ]
		then
			return 2
		fi
	else
		# File has been removed, so move backup to file path.
		mv "${FILE_PATH}.backup.${CHANGE_AGENT}" "${FILE_PATH}"
		if [ ${?} -ne 0 ]
		then
			return 2
		fi
	fi

	return 0

}

undo_backup_file ()
{
	FILE_PATH=${1}
	CHANGE_AGENT="${2}"

	if [ -f "${FILE_PATH}.backup.${CHANGE_AGENT}" ]
	then
		# Remove the backup.
		rm "${FILE_PATH}.backup.${CHANGE_AGENT}"
		if [ ${?} -ne 0 ]
		then
			return 2
		fi
	fi

	return 0

}

undo_remove_user ()
{
	ERROR_COUNT=0

	echo -e "\n${ORNG}Undoing remove user process...${NRML}\n"

	# Restore local system and NIS users database.
	restore_file /etc/exports ${SCRIPT_NAME}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	restore_file /etc/passwd ${SCRIPT_NAME}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	restore_file /etc/master.passwd ${SCRIPT_NAME}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	restore_file /etc/pwd.db ${SCRIPT_NAME}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	restore_file /etc/spwd.db ${SCRIPT_NAME}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	restore_file /var/yp/master.passwd ${SCRIPT_NAME}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	sleep 1
	touch /var/yp/master.passwd
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	cd /var/yp
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	make
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	cd -
	service mountd reload
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

	# Restore hotdesk.conf UCL config file.
	restore_file ${HOTDESK_CONF_PATH} ${SCRIPT_NAME}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

	if [ ${ERROR_COUNT} -ne 0 ]
	then
		echo -e "\n${LRED}ERROR:${NRML} An error occurred whilst trying to undo remove user!\n"
	else
		echo -e ""
	fi
}


##### SANITY TESTS #############################################################

if [ ${#} -lt ${NUM_MANDATORY_ARGS} ]
then
	echo -e "\n${LRED}ERROR:${NRML} Incorrect number of arguments!\n       Aborting.\n"
	usage
	exit 1
fi

# Check we are running with root privileges.
if [ `id -u` -ne 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} This command must be run with root (super-user) privileges!\n       Aborting.\n"
	exit 1
fi

test_if_host

if [ "${IS_HOST}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} This command must be run from the host!\n       Aborting.\n"
	exit 1
fi

# Check that the host.conf file exists.
if [ ! -e "${HOST_CONF_PATH}" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The host config file \n       '${ORNG}${HOST_CONF_PATH}${NRML}'"
	echo -e "       appears to be missing.\n       Aborting.\n"
	exit 1
fi

# Check that the host.conf file is accessible.
TEST_UCL=`${UCL_CMD} get -u -f ${HOST_CONF_PATH} .general 2>&1`
if [ ${?} -ne 0 ] || [ "${TEST_UCL}" = "null" ] || [ "${TEST_UCL}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} Failed to access the config file '${HOST_CONF_PATH}'!\n       Aborting.\n"
	exit 2
fi

# Check that the hotdesk subsystem is initialised.
HOTDESK_SUBSYS_COMPAT=`${UCL_CMD} get -f ${HOST_CONF_PATH} -q .subsystems.hotdesk_compat`
if [ "${HOTDESK_SUBSYS_COMPAT}" = "null" ] || [ "${HOTDESK_SUBSYS_COMPAT}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} It appears that the Hotdesk subsystem is not initialised."
	echo -e "       Consider using the command:"
	echo -e "       ${LBLU}${SCRIPT_NAME} init-hotdesk${NRML}\n       Aborting.\n"
	return 1
fi

# Check that the hotdesk.conf file is accessible.
TEST_UCL=`${UCL_CMD} get -u -f ${HOTDESK_CONF_PATH} .general 2>&1`
if [ ${?} -ne 0 ] || [ "${TEST_UCL}" = "null" ] || [ "${TEST_UCL}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} Failed to access the config file '${HOTDESK_CONF_PATH}'!\n       Aborting.\n"
	exit 2
fi

# Check for unsaved registered host config files.
echo -e "\n${YELL}Now we need to check if there are any unsaved changes to this hosts registered\nconfig files...${NRML}\n"
${FDO_SERVER_SCRIPT} check-configs --script > /dev/null 2>&1
if [ ${?} -gt 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} One or more host config files are not updated in the repo."
	echo -e "       Please use '${LBLU}${FDO_SERVER_SCRIPT} check-configs${NRML}' subcommand to see what's out-of-date."
	echo -e "       Please use '${LBLU}${FDO_SERVER_SCRIPT} update-config${NRML}' subcommannd to keep the repo up-to-date.\n       Aborting.\n"
	exit 1
fi

# Check that we are not currently running a backupz operation.
pgrep -fl "fdo-backupz " > /dev/null 2>&1
if [ ${?} -eq 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} There appears to be a backupz operation running!\n       Aborting.\n"
	exit 1
fi

# Check that we are not currently running a repair backupz state operation.
pgrep -fl "fdo-backupz-repair-state " > /dev/null 2>&1
if [ ${?} -eq 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} There appears to be a backupz repair operation running!\n       Aborting.\n"
	exit 1
fi

# Check that user exists.
pw user show ${USERNAME} > /dev/null 2>&1
if [ ${?} -ne 0 ]
then
	if [ "${FORCE_MODE}" =  "yes" ]
	then
		echo -e "\n${ORNG}WARNING:${NRML} Can't find the user on the system!\n"
	else
		echo -e "\n${LRED}ERROR:${NRML} Can't find the user on the system, please check username!\n       Aborting.\n"
		exit 1
	fi
fi

# Check that NIS user exists.
ypcat passwd | cut -d":" -f1 | grep "^${USERNAME}$" > /dev/null 2>&1
if [ ${?} -ne 0 ]
then
	if [ "${FORCE_MODE}" =  "yes" ]
	then
		echo -e "\n${ORNG}WARNING:${NRML} Can't find the NIS user!\n"
	else
		echo -e "\n${LRED}ERROR:${NRML} Can't find the NIS user, please check username and/or yp services!\n       Aborting.\n"
		exit 1
	fi
fi

# Check that user exists in hotdesk.conf.
USER_INDEX=0
USERNAME_FOUND_IN_UCL=false
while [ `${UCL_CMD} get -f ${HOTDESK_CONF_PATH} -q .users.${USER_INDEX}` != "null" ]
do
	TEST_USERNAME=`${UCL_CMD} get -f ${HOTDESK_CONF_PATH} -q .users.${USER_INDEX}.username`
	if [ "${USERNAME}" = "${TEST_USERNAME}" ]
	then
		USERNAME_FOUND_IN_UCL=true
		HOTDESK_USERS_ARRAY_INDEX=${USER_INDEX}
	fi
	USER_INDEX=$(( ${USER_INDEX} + 1 ))
done
if [ ${USERNAME_FOUND_IN_UCL} = false ]
then
	if [ "${FORCE_MODE}" =  "yes" ]
	then
		echo -e "\n${ORNG}WARNING:${NRML} Can't find the user in the Hotdesk subsystem config file!\n"
	else
		echo -e "\n${LRED}ERROR:${NRML} Can't find the user in the Hotdesk subsystem config file:"
		echo -e "       '${ORNG}${HOST_CONF_PATH}${NRML}'\n       Aborting.\n"
		exit 1
	fi
fi


##### MAIN EXECUTION THREAD ####################################################

trap 'undo_remove_user ; exit 3' HUP INT QUIT KILL TERM

ERROR_COUNT=0

# Get pool for hotdesk users' home directories.
HOME_POOL=`${UCL_CMD} get -f ${HOST_CONF_PATH} -q .storage.hotdesk_pool`
if [ "${HOME_POOL}" = "null" ] || [ "${HOME_POOL}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The Hotdesk home pool specified in the config file:"
	echo -e "       '${ORNG}${HOST_CONF_PATH}${NRML}'\n       is not valid! Aborting.\n"
	exit 1
fi

# Get root filesystem for hotdesk users' home directories.
HOME_FS=`${UCL_CMD} get -f ${HOTDESK_CONF_PATH} -q .general.root_filesystem`
if [ "${HOME_FS}" = "null" ] || [ "${HOME_FS}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The Hotdesk home root filesystem specified in the config file:"
	echo -e "       '${ORNG}${HOTDESK_CONF_PATH}${NRML}'\n       is not valid! Aborting.\n"
	exit 1
fi

# Get root filesystem mountpoint for hotdesk users' home directories.
HOME_MP=`${UCL_CMD} get -f ${HOTDESK_CONF_PATH} -q .general.root_mountpoint`
if [ "${HOME_MP}" = "null" ] || [ "${HOME_MP}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The Hotdesk home root mountpoint specified in the config file:"
	echo -e "       '${ORNG}${HOTDESK_CONF_PATH}${NRML}'\n       is not valid! Aborting.\n"
	exit 1
fi

# Ask confirmation, since it's a destructive process.
if [ "${IS_INTERACTIVE}" = "yes" ]
then
	echo -e ""
	question_yes_no "Confirm removal of hotdesk user '${NRML}${USERNAME}${LCYN}'?"
	if [ "${ANSWER}" = "no" ]
	then
		echo -e "\nAborting.\n"
		exit 1
	fi
fi

HOME_ZFS_NAME="${HOME_POOL}/${HOME_FS}"

# Backup affected system files in case something goes wrong.
backup_file /etc/exports ${SCRIPT_NAME}
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
backup_file /var/yp/master.passwd ${SCRIPT_NAME}
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
backup_file /etc/passwd ${SCRIPT_NAME}
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
backup_file /etc/master.passwd ${SCRIPT_NAME}
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
backup_file /etc/pwd.db ${SCRIPT_NAME}
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
backup_file /etc/spwd.db ${SCRIPT_NAME}
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
backup_file ${HOTDESK_CONF_PATH} ${SCRIPT_NAME}
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

# Remove user from  hotdesk.conf.
echo -e "\n${YELL}Removing the user from the Hotdesk subsystem config file...${NRML}\n"
${UCL_CMD} remove -f ${HOTDESK_CONF_PATH} -o ${HOTDESK_CONF_PATH} .users.${HOTDESK_USERS_ARRAY_INDEX}
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

# Remove users' home directory from /etc/exports.
echo -e "\n${YELL}Removing the user from the exports file...${NRML}\n"
SED_REMOVE_LINE="/\\${HOME_MP}\/${USERNAME} /d"
sed -i "" "${SED_REMOVE_LINE}" /etc/exports
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

# Reload NFS service after modifying /etc/exports.
echo -e "\n${YELL}Restarting mountd...${NRML}\n"
service mountd reload
if [ ${?} -ne 0 ]
then
	echo -e "\n${ORNG}WARNING:${NRML} Failed to reload the '${ORNG}mountd${NRML}' service!\n"
fi

# Remove user from the NIS database.
echo -e "\n${YELL}Removing the user from NIS...${NRML}\n"
cd /var/yp
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
sed -i "" "/^${USERNAME}:/d" master.passwd
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
make
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
cd -

# Remove user from the local system.
echo -e "\n${YELL}Removing the user from system...${NRML}\n"
rmuser -y ${USERNAME}
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

if [ ${ERROR_COUNT} -ne 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} Something went wrong removing the user!"
	if [ "${FORCE_MODE}" = "yes" ]
	then
		echo -e ""
	else
		echo -e "       Aborting.\n"
		undo_remove_user
		exit 2
	fi
fi

# Destroy the hotdesk users' home directory filesystem.
zfs list -H -o name ${HOME_ZFS_NAME}/${USERNAME} > /dev/null 2>&1
if [ ${?} -eq 0 ]
then
	echo -e "\n${YELL}Destroying the users' home filesystem...${NRML}\n"
	zfs destroy -rpf ${HOME_ZFS_NAME}/${USERNAME}
	if [ ${?} -ne 0 ]
	then
		echo -e "\n${LRED}ERROR:${NRML} Failed to destroy Hotdesk users' home filesystem!"
		if [ "${FORCE_MODE}" = "yes" ]
		then
			echo -e ""
		else
			echo -e "       Aborting.\n"
			undo_remove_user
			exit 2
		fi
	else
		echo -e "\n${YELL}Hotdesk user home filesystem destroyed.${NRML}\n"
	fi
else
	if [ "${FORCE_MODE}" = "yes" ]
	then
		echo -e "\n${ORNG}WARNING:${NRML} Hotdesk users' home filesystem does not exist!\n"
	else
		echo -e "\n${LRED}ERROR:${NRML} Hotdesk users' home filesystem does not exist!\n       Aborting.\n"
		undo_remove_user
		exit 1
	fi
fi

# If the backupz state file exists, try to rename the backup of hotdesk users' home directory.
if [ -e "${BACKUPZ_STATE_PATH}" ]
then

	# Try to find the backup pool filesystem that holds the hotdesk users' home directory.
	BACKUP_FS=""
	for POOL_NAME in `zpool list -H -o name | grep -v "${HOME_POOL}"`
	do
		TEST_BACKUP_POOL=`${UCL_CMD} get -f ${BACKUPZ_STATE_PATH} -u .pools.${POOL_NAME}`
		if [ "${TEST_BACKUP_POOL}" != "" ]
		then
			# ASSUME: the hotdesk users' home directory can be in a backup pool in only one of two possible filesystem topologies:
			#         (i)  ${BACKUP_POOL}/${HOME_POOL}/${HOME_FS}/${USERNAME}
			#         (ii) ${BACKUP_POOL}/${HOME_POOL}__${HOME_FS}/${USERNAME}
			TEST_HOME_POOL=`${UCL_CMD} get -f ${BACKUPZ_STATE_PATH} -u .pools.${POOL_NAME}.filesystems.${HOME_POOL}`
			if [ "${TEST_HOME_POOL}" != "" ]
			then
				zfs list -H -o name "${POOL_NAME}/${HOME_POOL}/${HOME_FS}/${USERNAME}" > /dev/null 2>&1
				if [ ${?} -eq 0 ]
				then
					BACKUP_FS="${POOL_NAME}/${HOME_POOL}/${HOME_FS}/${USERNAME}"
					break
				fi
			fi
			TEST_HOME_FS=`${UCL_CMD} get -f ${BACKUPZ_STATE_PATH} -u .pools.${POOL_NAME}.filesystems.${HOME_POOL}/${HOME_FS}`
			if [ "${TEST_HOME_FS}" != "" ]
			then
				zfs list -H -o name "${POOL_NAME}/${HOME_POOL}__${HOME_FS}/${USERNAME}" > /dev/null 2>&1
				if [ ${?} -eq 0 ]
				then
					BACKUP_FS="${POOL_NAME}/${HOME_POOL}__${HOME_FS}/${USERNAME}"
					break
				fi
			fi
		fi

	done

	# If we found a backup of the home directory filesystem, handle it.
	if [ "${BACKUP_FS}" = "" ]
	then
		echo -e "\n${YELL}INFO:${NRML} No backup filesystem found for the users' home directory."
		echo -e "\n${ORNG}WARNING:${NRML} If backupz is in use for the hotdesk users' home filesystem,"
		echo -e "         consider destroying or renaming it."
		echo -e "         e.g: '${ORNG}<backup_pool>/${HOME_ZFS_NAME}/${USERNAME}${NRML}'\n"
	else
		echo -e "\n${YELL}INFO:${NRML} Found a backup filesystem for the users' home directory:"
		echo -e "      '${ORNG}${BACKUP_FS}${NRML}'"
		echo -e "      This could be a problem if the same username is re-used in future!\n"

		if [ "${IS_INTERACTIVE}" = "yes" ]
		then
			question_yes_no "Would you like to rename the backup of the users' home directory [RECOMMENDED]?"
			if [ "${ANSWER}" = "yes" ]
			then
				RENAME_BACKUP_FS="yes"
			fi
		fi
		if [ "${RENAME_BACKUP_FS}" = "yes" ]
		then
			echo -e "\n${YELL}Renaming backup filesystem for the users' home filesystem...\n"
			zfs rename -f ${BACKUP_FS} ${BACKUP_FS}_REMOVED-${NOW} > /dev/null 2>&1
			if [ ${?} -ne 0 ]
			then
				echo -e "\n${LRED}ERROR:${NRML} An error occured trying to rename the filesystem:\n       ${BACKUP_FS}\n"
			fi
		fi
	fi
fi

# Update configuration in the local repo and if interactive mode then push to remote repo.
echo -e "\n${YELL}Updating configuration to the repo...${NRML}\n"
if [ "${IS_INTERACTIVE}" = "no" ]
then
	CHANGE_MESSAGE="remove hotdesk user '${USERNAME}'" GIT_NO_PUSH="yes" FETCH_LATEST_SELF="no" ${FDO_SERVER_SCRIPT} update-config "${HOTDESK_CONF_PATH}"
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
else
	CHANGE_MESSAGE="remove hotdesk user '${USERNAME}'" FETCH_LATEST_SELF="no" ${FDO_SERVER_SCRIPT} update-config "${HOTDESK_CONF_PATH}"
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
fi

if [ ${ERROR_COUNT} -ne 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} Something went wrong saving the configuration to the repo!\n"
	exit 2
fi

# Since everything seems successful, we can remove the backup configs.
undo_backup_file /etc/exports ${SCRIPT_NAME}
undo_backup_file /var/yp/master.passwd ${SCRIPT_NAME}
undo_backup_file /etc/passwd ${SCRIPT_NAME}
undo_backup_file /etc/master.passwd ${SCRIPT_NAME}
undo_backup_file /etc/pwd.db ${SCRIPT_NAME}
undo_backup_file /etc/spwd.db ${SCRIPT_NAME}
undo_backup_file ${HOTDESK_CONF_PATH} ${SCRIPT_NAME}

echo -e "\n${LGRN}Successfully removed the hotdesk user '${NRML}${USERNAME}${LGRN}'.${NRML}\n"

################################################################################
