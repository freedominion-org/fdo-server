#!/bin/sh

# Copyright (c) 2018 Euan Thoms <euan@potensol.com>.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


##### GLOBAL STATIC VARIABLE DECLARATIONS ######################################

SCRIPT_NAME=`basename ${0}`
USER_NAME="${1}"
REMOTE_HOST="${2}"
REMOTE_PATH="${3}"
LOCAL_PATH="${4}"
REMOTE_PORT="22"
NUM_MANDATORY_ARGS=4
IS_INTERACTIVE="yes"
FDO_SERVER_SCRIPT="fdo-server"
SSHFSD_CONF_PATH="/usr/local/etc/fdo/sshfsd_shares.conf"

TERM="xterm"
LRED="\033[1;31m"
LGRN="\033[1;32m"
LBLU="\033[1;34m"
LCYN="\033[1;36m"
CYAN="\033[0;36m"
YELL="\033[1;33m"
ORNG="\033[0;33m"
GREY="\033[0;37m"
DGRY="\033[1;30m"
NRML="\033[0;00m"

CARRIAGE_RETURN="
"

##### COMMAND USAGE INFO #######################################################

usage ()
{
	if [ "${NO_DISPLAY_USAGE}" = "yes" ]
	then
		return 1
	fi

	echo -e ""
	echo -e "${LCYN}    ---- ${SCRIPT_NAME} command usage ----${NRML}"
	echo -e ""
	echo -e "${YELL}Description:${NRML} Add an sshfs connection to a remote host from this host."
	echo -e ""
	echo -e "${YELL}Usage:   ${LGRN}${SCRIPT_NAME} remote_user remote_host remote_path local_path [--port=port_number] [--non-interactive]${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} joe host1.example.net /home/joe /home/joe/host1${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} jen host2.example.net /home/jen /home/jen/host2 --port=2201${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} log host3.example.net /var/log /remote-logs/host3 --non-interactive${NRML}"
	echo -e ""
	echo -e "${YELL}Options:${NRML}"
	echo -e "${YELL}         --non-interactive ; will not prompt or commit changes to the config repo.${NRML}"
	echo -e ""
}


##### PARSE ARGUMENTS ##########################################################

ARG_INDEX=1
for ARG in "${@}"
do
	if [ ${ARG_INDEX} -gt ${NUM_MANDATORY_ARGS} ]
	then
		OPTIONAL_ARG_NAME=`echo ${ARG} | cut -d= -f1`
		OPTIONAL_ARG_VALUE=`echo ${ARG} | cut -d= -f2`
		case ${OPTIONAL_ARG_NAME} in
			--port)
				PORT_NUMBER="${OPTIONAL_ARG_VALUE}"
				# TODO: add support for optional non-standard port number
				echo -e "\n${ORNG}UNAVAILABLE:${NRML} Sorry, the non-standard port option is not implemented yet.\n             Aborting.\n"
				exit 1
				;;
			--non-interactive)
				IS_INTERACTIVE="no"
				;;
			*)
				echo -e "\n${LRED}ERROR:${NRML} Invalid argument!\n       Aborting.\n"
				usage
				exit 1
				;;
		esac
	fi

	ARG_INDEX=$(( ${ARG_INDEX} + 1 ))

done


##### FUNCTIONS ################################################################

# source readee function
. /usr/local/bin/fdo-readee

question_yes_no ()
{
	while true
		do
		echo -e "${LCYN}${1}${NRML}"
		readee -p "${LCYN}(yes/no): ${NRML}" ANSWER
		if [ "${ANSWER}" = "yes" ] || [ "${ANSWER}" = "no" ]
		then
			break
		fi
		echo ""
	done
}

test_valid_integer ()
{

	TEST_CASE="${1}"
	TEST_MIN_VALUE=${2}
	TEST_MAX_VALUE=${3}

	VALID_INTEGER="yes"

	if [ "${TEST_CASE}" = "" ]
	then
		VALID_INTEGER="no"
		return 1
	fi

	IS_SYNTAX_OK=`echo "${TEST_CASE}" | sed -r "s/^[0-9]+//" | wc -L`
	if [ ${IS_SYNTAX_OK}  -ne 0 ]
	then
		VALID_INTEGER="no"
		return 2
	fi

	if [ ${TEST_CASE} -lt ${TEST_MIN_VALUE} ]
	then
		VALID_INTEGER="no"
		return 3
	fi

	if [ ${TEST_CASE} -gt ${TEST_MAX_VALUE} ]
	then
		VALID_INTEGER="no"
		return 4
	fi

}

test_valid_inet_address ()
{

	TEST_CASE="${1}"

	VALID_INET_ADDRESS="yes"

	if [ "${TEST_CASE}" = "" ]
	then
		VALID_INET_ADDRESS="no"
		return 1
	fi

	IS_SYNTAX_OK=`echo "${TEST_CASE}" | sed "s/^[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}$//" | wc -L`
	if [ ${IS_SYNTAX_OK}  -ne 0 ]
	then
		VALID_INET_ADDRESS="no"
		return 2
	fi

	NO_ZEROS_IN_FRONT=`echo "${TEST_CASE}" | sed "s/\.0[0-9]//" | sed "s/^0//"`
	if [ "${NO_ZEROS_IN_FRONT}" != "${TEST_CASE}" ]
	then
		VALID_INET_ADDRESS="no"
		return 3
	fi

	ONE=`echo "${TEST_CASE}" | cut -d. -f1`
	TWO=`echo "${TEST_CASE}" | cut -d. -f2`
	THREE=`echo "${TEST_CASE}" | cut -d. -f3`
	FOUR=`echo "${TEST_CASE}" | cut -d. -f4`

	if [ ${ONE} -gt 255 ] || [ ${TWO} -gt 255 ] || [ ${THREE} -gt 255 ] || [ ${FOUR} -gt 255 ]
	then
		VALID_INET_ADDRESS="no"
		return 4
	fi

}

test_valid_fqhn ()
{

	TEST_CASE="${1}"

	VALID_FQHN="yes"

	if [ "${TEST_CASE}" = "" ]
	then
		VALID_FQHN="no"
		return 1
	fi

	IS_SYNTAX_OK=`echo "${TEST_CASE}" | sed -r "s/^((([a-zA-Z0-9]+[\-])*[a-zA-Z0-9]+)+\.)+[a-zA-Z0-9]+//" | wc -L`
	if [ ${IS_SYNTAX_OK}  -ne 0 ]
	then
		VALID_FQHN="no"
		return 2
	fi

}

test_if_host ()
{
	procstat 0 > /dev/null 2>&1
	if [ ${?} -eq 0 ]
	then
		IS_HOST=yes
	else
		IS_HOST=no
	fi
}


##### SANITY TESTS #############################################################

if [ ${#} -lt ${NUM_MANDATORY_ARGS} ]
then
	echo -e "\n${LRED}ERROR:${NRML} Incorrect number of arguments!\n       Aborting.\n"
	usage
	exit 2
fi

test_if_host

if [ "${IS_HOST}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} This command must be run from the host!\n       Aborting.\n"
	exit 3
fi

# Test that the remote user is valid
TEST=`echo "${REMOTE_USER}" | sed "s/^[a-zA-Z0-9._-]\{3,\}$//" | wc -w`
if [ ${TEST} -ne 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} The remote user '${REMOTE_USER}' is invalid!"
	echo -e "       It must only contain letters, numbers, hyphens, underscores and periods "
	echo -e "       with a minumum of 3 characters.\n"
	exit 4
fi

# Test that the remote host is valid.
test_valid_fqhn  "${REMOTE_HOST}"
test_valid_inet_address "${REMOTE_HOST}"
if [ "${VALID_FQHN}" = "no" ] && [ "${VALID_INET_ADDRESS}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The remote host '${REMOTE_HOST}' is invalid!"
	echo -e "       For host names:"
	echo -e "       It must only contain letters, numbers, periods and hyphens."
	echo -e "       It must not begin or end with a hyphen or a period."
	echo -e "       Aborting.\n"
	exit 5
fi

# TODO: Test that the remote_path and local_path are valid. Considering that
# UNIX paths can contain just about any character, this may not be practical.
# Use exit codes 6 and 7.


test_valid_integer "${PORT_NUMBER}" 1 65535
if [ "${VALID_INTEGER}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The port number '${PORT_NUMBER}' is invalid!"
	echo -e "       It must be a number between 1 and 65535."
	echo -e "       Aborting.\n"
	exit 8
fi

##### MAIN EXECUTION THREAD ####################################################

ERROR_COUNT=0

# Check if the local_path already exists in sshfsd_shares.conf
cat "${SSHFSD_CONF_PATH}" | grep -v "^#" | awk '{print $2}' | grep "^${LOCAL_PATH}$" > /dev/null 2>&1
if [ ${?} -eq 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} A connection already exists with the local path;"
	echo -e "       '${LOCAL_PATH}'"
	echo -e "       Aborting.\n"
	exit 9
fi

# Check if the local_path is a valid directory
if [ ! -d "${LOCAL_PATH}" ]
then
	echo -e "\n${LRED}ERROR:${NRML} Cannot find the local path;"
	echo -e "       '${LOCAL_PATH}'"
	echo -e "       Aborting.\n"
	exit 10
fi

# Warn if the local_path is not empty
TEST=`ls -A1 "${LOCAL_PATH}" | wc -l`
if [ ${TEST} -gt 0 ]
then
	echo -e "\n${ORNG}WARNING:${NRML} The following local path is not empty;"
	echo -e "         '${LOCAL_PATH}'\n"
fi

# Now let's add the entry to the sshfs daemon config file
echo "${REMOTE_USER}@${REMOTE_HOST}:${REMOTE_PATH} ${LOCAL_PATH}" >> "${SSHFSD_CONF_PATH}"

# Update configuration in the local repo and if interactive mode then push to remote repo
if [ "${IS_INTERACTIVE}" = "no" ]
then
	echo -e "\n${FDO_SERVER_SCRIPT} update-config ${SSHFSD_CONF_PATH} ...\n"
	CHANGE_MESSAGE="add sshfs connection for local_path '${LOCAL_PATH}'" GIT_NO_PUSH="yes" ${FDO_SERVER_SCRIPT} update-config "${SSHFSD_CONF_PATH}"
else
	question_yes_no "\nWould you like to update the repo with the config changes?"
	if [ "${ANSWER}" = "yes" ]
	then
		echo -e "\n${FDO_SERVER_SCRIPT} update-config ${SSHFSD_CONF_PATH} ...\n"
		CHANGE_MESSAGE="add sshfs connection for local_path '${LOCAL_PATH}'" ${FDO_SERVER_SCRIPT} update-config "${SSHFSD_CONF_PATH}"
	fi
fi

if [ ${ERROR_COUNT} -gt 0 ]
then
	exit 11
fi

################################################################################
