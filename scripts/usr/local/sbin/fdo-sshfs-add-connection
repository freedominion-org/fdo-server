#!/bin/sh

# Copyright (c) 2018 Euan Thoms <euan@potensol.com>.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


##### GLOBAL STATIC VARIABLE DECLARATIONS ######################################

SCRIPT_NAME=`basename ${0}`
REMOTE_USER="${1}"
REMOTE_HOST="${2}"
REMOTE_PATH="${3}"
LOCAL_PATH="${4}"
REMOTE_PORT="22"
NUM_MANDATORY_ARGS=4
IS_INTERACTIVE="yes"
FDO_SERVER_SCRIPT=${FDO_SERVER_SCRIPT:-"fdo-server"}
UCL_CMD="/usr/local/bin/uclcmd"
FDO_CONFIG_ROOT=${FDO_CONFIG_ROOT:-"/usr/local/etc/fdo"}
HOST_CONF_PATH=${HOST_CONF_PATH:-"${FDO_CONFIG_ROOT}/host.conf"}
SSHFS_DAEMON_CONF_PATH=${SSHFS_DAEMON_CONF_PATH:-"${FDO_CONFIG_ROOT}/sshfs-daemon.conf"}
SSHFS_DAEMON_KEY_PREFIX="${FDO_CONFIG_ROOT}/sshfs_daemon_keys"
DO_GEN_KEY=${DO_GEN_KEY:-"no"}

TERM="xterm"
LRED="\033[1;31m"
LGRN="\033[1;32m"
LBLU="\033[1;34m"
LCYN="\033[1;36m"
CYAN="\033[0;36m"
YELL="\033[1;33m"
ORNG="\033[0;33m"
GREY="\033[0;37m"
DGRY="\033[1;30m"
NRML="\033[0;00m"

CARRIAGE_RETURN="
"

##### COMMAND USAGE INFO #######################################################

usage ()
{
	if [ "${NO_DISPLAY_USAGE}" = "yes" ]
	then
		return 1
	fi

	echo -e ""
	echo -e "${LCYN}    ---- ${SCRIPT_NAME} command usage ----${NRML}"
	echo -e ""
	echo -e "${YELL}Description:${NRML} Add an sshfs-daemon connection to a remote host from this host."
	echo -e ""
	echo -e "${YELL}Usage:   ${LGRN}${SCRIPT_NAME} remote_user remote_host remote_path local_path [--port=port_number] [--non-interactive]${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} joe host1.example.net /home/joe /home/joe/host1${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} jen host2.example.net /home/jen /home/jen/host2 --port=2201${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} log host3.example.net /var/log /remote-logs/host3 --non-interactive${NRML}"
	echo -e ""
	echo -e "${YELL}Options:${NRML}"
	echo -e "${YELL}         --port ; specify a non-standard ssh port number.${NRML}"
	echo -e "${YELL}         --non-interactive ; will not prompt or commit changes to the config repo.${NRML}"
	echo -e ""
}


##### PARSE ARGUMENTS ##########################################################

ARG_INDEX=1
for ARG in "${@}"
do
	if [ ${ARG_INDEX} -gt ${NUM_MANDATORY_ARGS} ]
	then
		OPTIONAL_ARG_NAME=`echo ${ARG} | cut -d= -f1`
		OPTIONAL_ARG_VALUE=`echo ${ARG} | cut -d= -f2`
		case ${OPTIONAL_ARG_NAME} in
			--port)
				REMOTE_PORT="${OPTIONAL_ARG_VALUE}"
				;;
			--non-interactive)
				IS_INTERACTIVE="no"
				;;
			*)
				echo -e "\n${LRED}ERROR:${NRML} Invalid argument!\n       Aborting.\n"
				usage
				exit 1
				;;
		esac
	fi

	ARG_INDEX=$(( ${ARG_INDEX} + 1 ))

done


##### FUNCTIONS ################################################################

# source readee function
. /usr/local/bin/fdo-readee

question_yes_no ()
{
	while true
		do
		echo -e "${LCYN}${1}${NRML}"
		readee -p "${LCYN}(yes/no): ${NRML}" ANSWER
		if [ "${ANSWER}" = "yes" ] || [ "${ANSWER}" = "no" ]
		then
			break
		fi
		echo ""
	done
}

test_valid_integer ()
{

	TEST_CASE="${1}"
	TEST_MIN_VALUE=${2}
	TEST_MAX_VALUE=${3}

	VALID_INTEGER="yes"

	if [ "${TEST_CASE}" = "" ]
	then
		VALID_INTEGER="no"
		return 1
	fi

	IS_SYNTAX_OK=`echo "${TEST_CASE}" | sed -r "s/^[0-9]+//" | wc -L`
	if [ ${IS_SYNTAX_OK}  -ne 0 ]
	then
		VALID_INTEGER="no"
		return 2
	fi

	if [ ${TEST_CASE} -lt ${TEST_MIN_VALUE} ]
	then
		VALID_INTEGER="no"
		return 3
	fi

	if [ ${TEST_CASE} -gt ${TEST_MAX_VALUE} ]
	then
		VALID_INTEGER="no"
		return 4
	fi

}

test_valid_inet_address ()
{

	TEST_CASE="${1}"

	VALID_INET_ADDRESS="yes"

	if [ "${TEST_CASE}" = "" ]
	then
		VALID_INET_ADDRESS="no"
		return 1
	fi

	IS_SYNTAX_OK=`echo "${TEST_CASE}" | sed "s/^[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}$//" | wc -L`
	if [ ${IS_SYNTAX_OK}  -ne 0 ]
	then
		VALID_INET_ADDRESS="no"
		return 2
	fi

	NO_ZEROS_IN_FRONT=`echo "${TEST_CASE}" | sed "s/\.0[0-9]//" | sed "s/^0//"`
	if [ "${NO_ZEROS_IN_FRONT}" != "${TEST_CASE}" ]
	then
		VALID_INET_ADDRESS="no"
		return 3
	fi

	ONE=`echo "${TEST_CASE}" | cut -d. -f1`
	TWO=`echo "${TEST_CASE}" | cut -d. -f2`
	THREE=`echo "${TEST_CASE}" | cut -d. -f3`
	FOUR=`echo "${TEST_CASE}" | cut -d. -f4`

	if [ ${ONE} -gt 255 ] || [ ${TWO} -gt 255 ] || [ ${THREE} -gt 255 ] || [ ${FOUR} -gt 255 ]
	then
		VALID_INET_ADDRESS="no"
		return 4
	fi

}

test_valid_host_name ()
{

	TEST_CASE="${1}"

	VALID_HOST_NAME="yes"

	if [ "${TEST_CASE}" = "" ]
	then
		VALID_HOST_NAME="no"
		return 1
	fi

	# NOTE: we do not force the need for a multi-level hostname (FQHN)
	IS_SYNTAX_OK=`echo "${TEST_CASE}" | sed -r "s/^((([a-zA-Z0-9]+[\-])*[a-zA-Z0-9]+)+\.)*[a-zA-Z0-9]+//" | wc -L`
	if [ ${IS_SYNTAX_OK}  -ne 0 ]
	then
		VALID_HOST_NAME="no"
		return 2
	fi

}

test_if_host ()
{
	procstat 0 > /dev/null 2>&1
	if [ ${?} -eq 0 ]
	then
		IS_HOST=yes
	else
		IS_HOST=no
	fi
}

ucl_array_length ()
{
	UCL_ARRAY_LENGTH_FILE_PATH="${1}"
	UCL_ARRAY_LENGTH_VARIABLE="${2}"
	UCL_ARRAY_LENGTH=0

	UCL_ARRAY_LENGTH_OBJECT=`${UCL_CMD} get -f "${UCL_ARRAY_LENGTH_FILE_PATH}" "${UCL_ARRAY_LENGTH_VARIABLE}" 2> /dev/null`
	if [ ${?} -ne 0 ]
	then
		# Unexpected error accessing the UCL file.
		return 2
	fi

	if [ "${UCL_ARRAY_LENGTH_OBJECT}" != "[array]" ]
	then
		# The variable was not a valid array, return expected error.
		return 1
	fi

	while [ "${UCL_ARRAY_LENGTH_OBJECT}" != "null" ]
	do
		UCL_ARRAY_LENGTH_OBJECT=`${UCL_CMD} get -f "${UCL_ARRAY_LENGTH_FILE_PATH}" "${UCL_ARRAY_LENGTH_VARIABLE}.${UCL_ARRAY_LENGTH}"`
		if [ "${UCL_ARRAY_LENGTH_OBJECT}" != "null" ]
		then
			UCL_ARRAY_LENGTH=$(( ${UCL_ARRAY_LENGTH} + 1 ))
		fi
	done

	return 0
}

backup_file ()
{
	FILE_PATH="${1}"
	CHANGE_AGENT="${2}"
	if [ -f "${FILE_PATH}" ]
	then
		BACKUP_FILE_PATH="${FILE_PATH}.backup.${CHANGE_AGENT}"
		cp "${FILE_PATH}" "${BACKUP_FILE_PATH}" 2> /dev/null
		if [ ${?} -ne 0 ]
		then
			echo -e "\n${LRED}ERROR:${NRML} Failed to backup file '${ORNG}${FILE_PATH}${NRML}'!\n"
			BACKUP_FILE_PATH=""
			return 2
		fi
	else
		echo -e "\n${LRED}ERROR:${NRML} File '${ORNG}${FILE_PATH}${NRML}' does not exist!\n       Unable to backup.\n"
		BACKUP_FILE_PATH=""
		return 1
	fi

	return 0
}

restore_file ()
{
	FILE_PATH=${1}
	CHANGE_AGENT="${2}"

	if [ -f "${FILE_PATH}" ] && [ -f "${FILE_PATH}.backup.${CHANGE_AGENT}" ]
	then
		diff -q "${FILE_PATH}" "${FILE_PATH}.backup.${CHANGE_AGENT}" > /dev/null 2>&1
		if [ ${?} -ne 0 ]
		then
			# File and backup differ, replace the file with it's backup copy.
			mv "${FILE_PATH}.backup.${CHANGE_AGENT}" "${FILE_PATH}"
			if [ ${?} -ne 0 ]
			then
				return 2
			fi
		else
			# File is same as backup, remove the backup.
			rm "${FILE_PATH}.backup.${CHANGE_AGENT}"
			if [ ${?} -ne 0 ]
			then
				return 2
			fi
		fi
	fi

	return 0

}

undo_backup_file ()
{
	FILE_PATH=${1}
	CHANGE_AGENT="${2}"

	if [ -f "${FILE_PATH}.backup.${CHANGE_AGENT}" ]
	then
		# Remove the backup.
		rm "${FILE_PATH}.backup.${CHANGE_AGENT}"
		if [ ${?} -ne 0 ]
		then
			return 2
		fi
	fi

	return 0

}


##### SANITY TESTS #############################################################

if [ ${#} -lt ${NUM_MANDATORY_ARGS} ]
then
	echo -e "\n${LRED}ERROR:${NRML} Incorrect number of arguments!\n       Aborting.\n"
	usage
	exit 1
fi

# Check we are running with root privileges.
if [ `id -u` -ne 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} This command must be run with root (super-user) privileges!\n       Aborting.\n"
	exit 1
fi

test_if_host

if [ "${IS_HOST}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} This command must be run from the host!\n       Aborting.\n"
	exit 1
fi

# Check for unsaved registered host config files.
echo -e "\n${YELL}Now we need to check if there are any unsaved changes to this hosts registered\nconfig files...${NRML}\n"
${FDO_SERVER_SCRIPT} check-configs --script > /dev/null 2>&1
if [ ${?} -gt 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} One or more host config files are not updated in the repo."
	echo -e "       Please use '${LBLU}${FDO_SERVER_SCRIPT} check-configs${NRML}' subcommand to see what's out-of-date."
	echo -e "       Please use '${LBLU}${FDO_SERVER_SCRIPT} update-config${NRML}' subcommannd to keep the repo up-to-date.\n       Aborting.\n"
	exit 1
fi

# Check that the host.conf file exists.
if [ ! -e "${HOST_CONF_PATH}" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The host config file \n       '${ORNG}${HOST_CONF_PATH}${NRML}'"
	echo -e "       appears to be missing.\n       Aborting.\n"
	exit 1
fi

# Check that the host.conf file is accessible.
TEST_UCL=`${UCL_CMD} get -u -f ${HOST_CONF_PATH} .general 2>&1`
if [ ${?} -ne 0 ] || [ "${TEST_UCL}" = "null" ] || [ "${TEST_UCL}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} Failed to access the config file '${HOST_CONF_PATH}'!\n       Aborting.\n"
	exit 2
fi

# Check that the sshfs-daemon subsystem is initialised.
SSHFS_DAEMON_SUBSYS_COMPAT=`${UCL_CMD} get -f ${HOST_CONF_PATH} -q .subsystems.sshfs-daemon_compat`
if [ "${SSHFS_DAEMON_SUBSYS_COMPAT}" = "null" ] || [ "${SSHFS_DAEMON_SUBSYS_COMPAT}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} It appears that the SSHFS-daemon subsystem is not initialised."
	echo -e "       Consider using the command:"
	echo -e "       ${LBLU}${SCRIPT_NAME} init-sshfs-daemon${NRML}\n       Aborting.\n"
	exit 1
fi

# Check that the sshfs-daemon.conf file exists.
if [ ! -e "${SSHFS_DAEMON_CONF_PATH}" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The sshfs daemon config file \n       '${ORNG}${HOST_CONF_PATH}${NRML}'"
	echo -e "       appears to be missing.\n       Aborting.\n"
	exit 1
fi

# Check that the sshfs-daemon.conf file is accessible.
TEST_UCL=`${UCL_CMD} get -u -f ${SSHFS_DAEMON_CONF_PATH} .general 2>&1`
if [ ${?} -ne 0 ] || [ "${TEST_UCL}" = "null" ] || [ "${TEST_UCL}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} Failed to access the config file '${SSHFS_DAEMON_CONF_PATH}'!\n       Aborting.\n"
	exit 2
fi

# Check that the remote_user is valid.
IS_SYNTAX_OK=`echo "${REMOTE_USER}" | sed -r "s/^[a-z0-9][a-z0-9\.\_\-]+[a-z0-9]//" | wc -L`
IS_LENGTH_OK=`echo "${REMOTE_USER}" | sed -r "s/^(.{3,30})//" | wc -L`
if [ ${IS_SYNTAX_OK} -ne 0 ] || [ "${REMOTE_USER}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The remote_user can not be '${ORNG}${REMOTE_USER}${NRML}'."
	echo -e "       It must be between 3 and 30 characters and only contain lower case"
	echo -e "       letters, numbers, periods, underscores and hyphens.\n       Aborting.\n"
	exit 1
fi

# Check that the remote_host is valid.
test_valid_host_name  "${REMOTE_HOST}"
test_valid_inet_address "${REMOTE_HOST}"
if [ "${VALID_HOST_NAME}" = "no" ] && [ "${VALID_INET_ADDRESS}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The remote_host '${REMOTE_HOST}' is invalid!"
	echo -e "       For host names:"
	echo -e "       It must only contain letters, numbers, periods and hyphens."
	echo -e "       It must not begin or end with a hyphen or a period.\n       Aborting.\n"
	exit 1
fi

# Check if the remote_path does not end in a forward slash or a space.
TEST=`echo "${REMOTE_PATH}" | sed -r "s/.+.*[/ ]+$//" | wc -L`
if [ ${TEST} -eq 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} The remote_path is invalid!"
	echo -e "       It must not end with a forward slash or a space."
	echo -e "       Aborting.\n"
	exit 1
fi

# Check if the local_path already exists in sshfs-daemon.conf.
CONNECTION_INDEX=0
while [ `${UCL_CMD} get -f ${SSHFS_DAEMON_CONF_PATH} -q .connections.${CONNECTION_INDEX}` != "null" ]
do
	TEST_LOCAL_PATH=`${UCL_CMD} get -f ${SSHFS_DAEMON_CONF_PATH} -q .connections.${CONNECTION_INDEX}.local_path`
	if [ "${LOCAL_PATH}" = "${TEST_LOCAL_PATH}" ]
	then
		echo -e "\n${LRED}ERROR:${NRML} A connection already exists with the local path;"
		echo -e "       '${LOCAL_PATH}'"
		echo -e "       Aborting.\n"
		exit 1
	fi
	CONNECTION_INDEX=$(( ${CONNECTION_INDEX} + 1 ))
done

# Check if the local_path is a valid directory.
if [ ! -d "${LOCAL_PATH}" ]
then
	echo -e "\n${LRED}ERROR:${NRML} Cannot find the local path (mountpoint);"
	echo -e "       '${LOCAL_PATH}'"
	echo -e "       Aborting.\n"
	exit 1
fi

# Check if the local_path is a valid absolute path.
LOCAL_PATH_CHAR1=`echo "${LOCAL_PATH}" | cut -c1`
if [ "${LOCAL_PATH_CHAR1}" != "/" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The local path (mountpoint) is not a valid absolute path!"
	echo -e "       It must begin with a forward slash ('/')."
	echo -e "       Aborting.\n"
	exit 1
fi
LOCAL_PATH_DIRNAME=`dirname "${LOCAL_PATH}"`
LOCAL_PATH_BASENAME=`basename "${LOCAL_PATH}"`
if [ "${LOCAL_PATH_DIRNAME}" = "/" ]
then
	# The local path is one level above root, so we need to compensate the dirname.
	LOCAL_PATH_DIRNAME=""
fi
if [ "${LOCAL_PATH_DIRNAME}/${LOCAL_PATH_BASENAME}" != "${LOCAL_PATH}" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The local path (mountpoint) is not a valid absolute path!"
	echo -e "       It must not use any redundant forward slashes ('/')."
	echo -e "       Consider using the following path;"
	echo -e "       '${LOCAL_PATH_DIRNAME}/${LOCAL_PATH_BASENAME}'"
	echo -e "       Aborting.\n"
	exit 1
fi

# Check if the port number is valid.
test_valid_integer "${REMOTE_PORT}" 1 65535
if [ "${VALID_INTEGER}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The port number '${REMOTE_PORT}' is invalid!"
	echo -e "       It must be a number between 1 and 65535."
	echo -e "       Aborting.\n"
	exit 1
fi


##### MAIN EXECUTION THREAD ####################################################

ERROR_COUNT=0

# Warn if the local_path is not empty.
TEST=`ls -A1 "${LOCAL_PATH}" | wc -l`
if [ ${TEST} -ne 0 ]
then
	echo -e "\n${ORNG}WARNING:${NRML} The following local path is not empty;"
	echo -e "         '${LOCAL_PATH}'\n"
	question_yes_no "Would you like to continue regardless of the mountpoint state?"
	if [ "${ANSWER}" = "no" ]
	then
		echo -e ""
		exit 1
	fi
fi

# Ask if we should create an ssh key and copy it to the remote users' authorized keys
# for an unattended login.
SSHFS_DAEMON_KEY="none"
if [ "${IS_INTERACTIVE}" = "yes" ]
then
	question_yes_no "\nUNATTENDED LOGIN: Would you like to use an SSH key to authenticate as the remote user?"
	DO_GEN_KEY="${ANSWER}"
fi
if [ "${DO_GEN_KEY}" = "yes" ]
then
	# Create SSH keys directory, if it doesn't exist.
	if [ ! -d "${SSHFS_DAEMON_KEY_PREFIX}" ]
	then
		mkdir "${SSHFS_DAEMON_KEY_PREFIX}" 2> /dev/null
		if [ ${?} -ne 0 ]
		then
			echo -e "\n${LRED}ERROR:${NRML} A problem occured creating the SSH keys directory!\n       Aborting.\n"
			exit 2
		fi
	fi

	# Flatten the local_path so we can use it in a file name.
	LOCAL_PATH_FLAT=`echo "${LOCAL_PATH}" | sed "s/\//__/g"`
	LOCAL_PATH_MD5=`echo "${LOCAL_PATH}" | md5 -q`
	SSHFS_DAEMON_KEY="${SSHFS_DAEMON_KEY_PREFIX}/${LOCAL_PATH_FLAT}.${LOCAL_PATH_MD5}"
	echo -e ""

	# Generate an SSH key and store it in a programatically accessible place.
	ssh-keygen -q -f "${SSHFS_DAEMON_KEY}" -N ""
	if [ ${?} -ne 0 ]
	then
		echo -e "\n${LRED}ERROR:${NRML} A problem occured generating the SSH key file;"
		echo -e "       '${SSHFS_DAEMON_KEY}'"
		echo -e "       Aborting.\n"
		rm ${SSHFS_DAEMON_KEY} 2> /dev/null
		rm ${SSHFS_DAEMON_KEY}.pub 2> /dev/null
		exit 2
	fi

	echo -e "\n${YELL}SSH key generated!${NRML}"

	if [ "${IS_INTERACTIVE}" = "yes" ]
	then
		echo -e "\n${YELL}Next we need to copy it to the remote users' authorized_keys file.\nEnter the remote users password when prompted.${NRML}\n"

		# Copy the SSH key to the remote users' authorized keys file (~/.ssh/authorized_keys).
		ssh-copy-id -p "${REMOTE_PORT}" -i "${SSHFS_DAEMON_KEY}" "${REMOTE_USER}@${REMOTE_HOST}"
		if [ ${?} -ne 0 ]
		then
			echo -e "\n${LRED}ERROR:${NRML} A problem occured copying the SSH key file to the remote user/host;"
			echo -e "       '${REMOTE_USER}@${REMOTE_HOST}'"
			echo -e "       Aborting.\n"
			rm ${SSHFS_DAEMON_KEY} 2> /dev/null
			rm ${SSHFS_DAEMON_KEY}.pub 2> /dev/null
			exit 2
		fi
	fi
fi

# Backup sshfs-deamon config file in case something goes wrong.
backup_file ${SSHFS_DAEMON_CONF_PATH} ${SCRIPT_NAME}
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

# Get the connections array index from the sshfs-daemon config file.
ucl_array_length ${SSHFS_DAEMON_CONF_PATH} .connections
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
CONNECTIONS_ARRAY_INDEX=${UCL_ARRAY_LENGTH}

# Now let's add the entry to the sshfs-daemon config file.
${UCL_CMD} set -f ${SSHFS_DAEMON_CONF_PATH} -t object .connections.${CONNECTIONS_ARRAY_INDEX} "{ }"
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
${UCL_CMD} set -f ${SSHFS_DAEMON_CONF_PATH} -t string .connections.${CONNECTIONS_ARRAY_INDEX}.local_path "${LOCAL_PATH}"
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
${UCL_CMD} set -f ${SSHFS_DAEMON_CONF_PATH} -t string .connections.${CONNECTIONS_ARRAY_INDEX}.remote_host "${REMOTE_HOST}"
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
${UCL_CMD} set -f ${SSHFS_DAEMON_CONF_PATH} -t string .connections.${CONNECTIONS_ARRAY_INDEX}.remote_path "${REMOTE_PATH}"
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
${UCL_CMD} set -f ${SSHFS_DAEMON_CONF_PATH} -t string .connections.${CONNECTIONS_ARRAY_INDEX}.remote_user "${REMOTE_USER}"
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
${UCL_CMD} set -f ${SSHFS_DAEMON_CONF_PATH} -t number .connections.${CONNECTIONS_ARRAY_INDEX}.remote_port "${REMOTE_PORT}"
ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

if [ ${ERROR_COUNT} -ne 0 ]
then
	# Restore sshfs-deamon config file.
	restore_file ${SSHFS_DAEMON_CONF_PATH} ${SCRIPT_NAME}

	rm ${SSHFS_DAEMON_KEY} 2> /dev/null
	rm ${SSHFS_DAEMON_KEY}.pub 2> /dev/null

	echo -e "\n${LRED}ERROR:${NRML} Something went wrong updating the configuration files!\n       Aborting."
	exit 2
fi

# Update configuration in the local repo and if interactive mode then push to remote repo.
echo -e "\n${YELL}Updating configuration to the repo...${NRML}\n"
if [ "${SSHFS_DAEMON_KEY}" != "none" ]
then
	GIT_NO_PUSH="yes" FETCH_LATEST_SELF="no" ${FDO_SERVER_SCRIPT} add-config "${SSHFS_DAEMON_KEY}"
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	GIT_NO_PUSH="yes" FETCH_LATEST_SELF="no" ${FDO_SERVER_SCRIPT} add-config "${SSHFS_DAEMON_KEY}.pub"
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
fi

if [ "${IS_INTERACTIVE}" = "no" ]
then
	CHANGE_MESSAGE="add sshfs connection for local_path '${LOCAL_PATH}'" GIT_NO_PUSH="yes" FETCH_LATEST_SELF="no" ${FDO_SERVER_SCRIPT} update-config "${SSHFS_DAEMON_CONF_PATH}"
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
else
	CHANGE_MESSAGE="add sshfs connection for local_path '${LOCAL_PATH}'" FETCH_LATEST_SELF="no" ${FDO_SERVER_SCRIPT} update-config "${SSHFS_DAEMON_CONF_PATH}"
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
fi

if [ ${ERROR_COUNT} -ne 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} Something went wrong saving the configuration to the repo!\n"
	exit 2
fi

undo_backup_file ${SSHFS_DAEMON_CONF_PATH} ${SCRIPT_NAME}

echo -e "\n${LGRN}Successfully added SSHFS connection for:\n'${NRML}${LOCAL_PATH}${LGRN}'${NRML}\n"

################################################################################
