#!/bin/sh

# Copyright (c) 2018 Euan Thoms <euan@potensol.com>.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


##### GLOBAL STATIC VARIABLE DECLARATIONS ######################################

SCRIPT_NAME=`basename ${0}`
NUM_MANDATORY_ARGS=1
VM_NAME="${1}"
HOST_CONF_PATH=${HOST_CONF_PATH:-"/usr/local/etc/fdo/host.conf"}
VMS_CONF_PATH=${VMS_CONF_PATH:-"/usr/local/etc/fdo/vms.conf"}
VMS_ROOT_FS="fdo-vms"
VMS_ROOT_PATH="/${VMS_ROOT_FS}"
VM_RESOURCES_DIRNAME="resources"
VM_TEMPLATES_DIRNAME="templates"
VM_INSTANCES_DIRNAME="instances"
VM_RESOURCES_PATH="${VMS_ROOT_PATH}/${VM_RESOURCES_DIRNAME}"
VMM_PATH="/dev/vmm"
UCL_CMD="/usr/local/bin/uclcmd"
TMUX_CMD="/usr/local/bin/tmux"
BHYVELOAD_CMD="/usr/sbin/bhyveload"
GRUB_BHYVE_CMD="/usr/local/sbin/grub-bhyve"
BHYVE_CMD="/usr/sbin/bhyve"
BHYVECTL_CMD="/usr/sbin/bhyvectl"
DISPLAY_TYPE="instance"
VM_NAME_MIN="3"
VM_NAME_MAX="30"
VM_VNC_WAIT_STRING=""
VM_VNC_PASSWORD_STRING=""
VM_START_TRIES=5
VM_START_TIMEOUT=4
BOOT_IMAGE_INDEX=-1
BOOT_IMAGE_INDEX_MIN="-1"
BOOT_IMAGE_INDEX_MAX="4"
BHYVE_FLAGS="-A -H -P -w"
DEBUG=${DEBUG:-"false"}
SHOW_TMUX_COMMANDS=false
SKIP_BOOTLOADER=false

TERM="xterm"
LRED="\033[1;31m"
LGRN="\033[1;32m"
LBLU="\033[1;34m"
LCYN="\033[1;36m"
CYAN="\033[0;36m"
YELL="\033[1;33m"
ORNG="\033[0;33m"
GREY="\033[0;37m"
DGRY="\033[1;30m"
NRML="\033[0;00m"

CARRIAGE_RETURN="
"

##### COMMAND USAGE INFO #######################################################

usage ()
{
	if [ "${NO_DISPLAY_USAGE}" = "yes" ]
	then
		return 1
	fi

	echo -e ""
	echo -e "${LCYN}    ---- ${SCRIPT_NAME} command usage ----${NRML}"
	echo -e ""
	echo -e "${YELL}Description:${NRML} Start a specific VM on this host."
	echo -e ""
	echo -e "${YELL}Usage:   ${LGRN}${SCRIPT_NAME} vm_name [--wait] [--boot=<image_index>]${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} freebsd10${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} win10guest --wait${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} debian10 --boot=0${NRML}"
	echo -e ""
	echo -e "${YELL}Options:${RML}"
	echo -e "${YELL}         --wait            : wait for VNC connection before booting.${NRML}"
	echo -e "${YELL}         --boot            : boot a specific image, using it's index.${NRML}"
	echo -e ""
	echo -e "${YELL}Notes:${NRML}"
	echo -e "${YELL}         vm_name must be between 3 and 30 characters.${NRML}"
	echo -e "${YELL}         vm_name must only contain a-z, A-Z, 0-9 and _ (underscore).${NRML}"
	echo -e "${YELL}         vm_name must not begin or end with an underscore.${NRML}"
	echo -e "${YELL}         specified boot image only applies to grub and bhyveload.${NRML}"
	echo -e ""
}


##### PARSE ARGUMENTS ##########################################################

ARG_INDEX=1
for ARG in "${@}"
do
	if [ ${ARG_INDEX} -gt ${NUM_MANDATORY_ARGS} ]
	then
		OPTIONAL_ARG_NAME=`echo ${ARG} | cut -d= -f1`
		OPTIONAL_ARG_VALUE=`echo ${ARG} | cut -d= -f2`
		case ${OPTIONAL_ARG_NAME} in
			--wait)
				VM_VNC_WAIT_STRING=",wait"
				;;
			--boot)
				BOOT_IMAGE_INDEX=${OPTIONAL_ARG_VALUE}
				;;
			--skip-bootloader)
				SKIP_BOOTLOADER=true
				;;
			*)
				echo -e "\n${LRED}ERROR:${NRML} Invalid argument!\n       Aborting.\n"
				usage
				exit 1
				;;
		esac
	fi

	ARG_INDEX=$(( ${ARG_INDEX} + 1 ))

done


##### FUNCTIONS ################################################################

# source readee function
. /usr/local/bin/fdo-readee

question_yes_no ()
{
	while true
	do
		echo -e "${LCYN}${1}${NRML}"
		readee -p "${LCYN}(yes|no): ${NRML}" ANSWER
		if [ "${ANSWER}" = "yes" ] || [ "${ANSWER}" = "no" ]
		then
			break
		fi
		echo ""
	done
}

question_yes ()
{
	while true
	do
		echo -e "${LCYN}${1}${NRML}"
		readee -p "${LCYN}(yes): ${NRML}" ANSWER
		if [ "${ANSWER}" = "yes" ]
		then
			break
		fi
		echo ""
	done
}

test_valid_vm_name ()
{
	TEST_CASE="${1}"

	VALID_VM_NAME="yes"

	if [ "${TEST_CASE}" = "null" ] || [ "${TEST_CASE}" = "all" ] || [ "${TEST_CASE}" = "_ALL" ] || [ "${TEST_CASE}" = "" ]
	then
		VALID_VM_NAME="no"
		return 1
	fi

	if [ ${#TEST_CASE} -gt ${VM_NAME_MAX} ] || [ ${#TEST_CASE} -lt ${VM_NAME_MIN} ]
	then
		VALID_VM_NAME="no"
		return 2
	fi

	IS_SYNTAX_OK=`echo "${TEST_CASE}" | sed -r "s/^[a-zA-Z0-9]+(_[a-zA-Z0-9]+[a-zA-Z0-9]*)*//" | wc -L`
	if [ ${IS_SYNTAX_OK}  -ne 0 ]
	then
		VALID_VM_NAME="no"
		return 3
	fi
}

test_valid_integer ()
{

	TEST_CASE="${1}"
	TEST_MIN_VALUE=${2}
	TEST_MAX_VALUE=${3}

	VALID_INTEGER="yes"

	if [ "${TEST_CASE}" = "" ]
	then
		VALID_INTEGER="no"
		return 1
	fi

	IS_SYNTAX_OK=`echo "${TEST_CASE}" | sed -r "s/^[-]?[0-9]+//" | wc -L`
	if [ ${IS_SYNTAX_OK}  -ne 0 ]
	then
		VALID_INTEGER="no"
		return 2
	fi

	if [ "${TEST_MIN_VALUE}" != "" ] && [ $(echo "${TEST_CASE} < ${TEST_MIN_VALUE}" | bc) -ne 0 ]
	then
		VALID_INTEGER="no"
		return 3
	fi

	if [ "${TEST_MAX_VALUE}" != "" ] && [ $(echo "${TEST_CASE} > ${TEST_MAX_VALUE}" | bc) -ne 0 ]
	then
		VALID_INTEGER="no"
		return 4
	fi

	return 0
}

test_if_host ()
{
	procstat 0 > /dev/null 2>&1
	if [ ${?} -eq 0 ]
	then
		IS_HOST=yes
	else
		IS_HOST=no
	fi
}

get_vm_state ()
{
	TEST_VM_NAME="${1}"

	ls -1 ${VMM_PATH} 2> /dev/null | grep "^fdo-vm-${TEST_VM_NAME}$" > /dev/null
	if [ ${?} -eq 0 ]
	then
		VM_IS_LOADED="yes"
	else
		VM_IS_LOADED="no"
	fi

	pgrep -fl "bhyve.* fdo-vm-${TEST_VM_NAME}$" > /dev/null
	if [ ${?} -eq 0 ]
	then
		VM_IS_RUNNING="yes"
	else
		VM_IS_RUNNING="no"
	fi

	if [ "${VM_IS_LOADED}" = "yes" ] && [ "${VM_IS_RUNNING}" = "yes" ]
	then
		VM_STATE="running"
	elif [ "${VM_IS_LOADED}" = "yes" ] && [ "${VM_IS_RUNNING}" = "no" ]
	then
		VM_STATE="loaded"
	elif [ "${VM_IS_LOADED}" = "no" ] && [ "${VM_IS_RUNNING}" = "no" ]
	then
		VM_STATE="stopped"
	else
		VM_STATE="unknown"
	fi

}

start_vm ()
{
	NEXT_PCI_SLOT=1
	START_COMMAND="${TMUX_CMD} new-session -d -s fdo-vm-${VM_NAME} '${BHYVE_CMD} ${BHYVE_FLAGS} -s 0:0,hostbridge -s 31:0,lpc"

	NEXT_PCI_SLOT=$(( ${NEXT_PCI_SLOT} + 1 ))
	START_COMMAND="${START_COMMAND} -s ${NEXT_PCI_SLOT}:0,${VM_NIC_DRIVER},${VM_TAP_INTERFACE}"

	## ASSUME: bhyveload & grub; unless specified, bootloader disk path is the last image marked as bootable.
	BOOTLOADER_DISK_PATH=""
	GRUB_DEVICE_MAP=""
	GRUB_DEVICE_CD_NUM=0
	GRUB_DEVICE_HD_NUM=0
	IMAGE_INDEX=0
	IMAGE_TYPE=""

	# Loop over all images to build bootloader and start command strings.
	while [ "${IMAGE_TYPE}" != "null" ]
	do
		# Load current image parameters.
		VAR_IMAGE_TYPE="VM_IMAGE_${IMAGE_INDEX}_TYPE"
		eval IMAGE_TYPE="\$${VAR_IMAGE_TYPE}"
		VAR_IMAGE_FILENAME="VM_IMAGE_${IMAGE_INDEX}_FILENAME"
		eval IMAGE_FILENAME="\$${VAR_IMAGE_FILENAME}"
		VAR_IMAGE_BOOTABLE="VM_IMAGE_${IMAGE_INDEX}_BOOTABLE"
		eval IMAGE_BOOTABLE="\$${VAR_IMAGE_BOOTABLE}"
		VAR_IMAGE_GRUB_ROOT_DEVICE="VM_IMAGE_${IMAGE_INDEX}_GRUB_ROOT_DEVICE"
		eval IMAGE_GRUB_ROOT_DEVICE="\$${VAR_IMAGE_GRUB_ROOT_DEVICE}"
		VAR_IMAGE_GRUB_DIRECTORY="VM_IMAGE_${IMAGE_INDEX}_GRUB_DIRECTORY"
		eval IMAGE_GRUB_DIRECTORY="\$${VAR_IMAGE_GRUB_DIRECTORY}"
		VAR_IMAGE_GRUB_CONF_FILENAME="VM_IMAGE_${IMAGE_INDEX}_GRUB_CONF_FILENAME"
		eval IMAGE_GRUB_CONF_FILENAME="\$${VAR_IMAGE_GRUB_CONF_FILENAME}"
		VAR_IMAGE_SECTORSIZE="VM_IMAGE_${IMAGE_INDEX}_SECTORSIZE"
		eval IMAGE_SECTORSIZE="\$${VAR_IMAGE_SECTORSIZE}"
		VAR_IMAGE_USE_EXPERT_GRUB="VM_IMAGE_${IMAGE_INDEX}_USE_EXPERT_GRUB"
		eval IMAGE_USE_EXPERT_GRUB="\$${VAR_IMAGE_USE_EXPERT_GRUB}"

		echo -e "\nIMAGE_USE_EXPERT_GRUB = ${IMAGE_USE_EXPERT_GRUB}\n"

		# Determine if we want to replace the bootable device with this image.
		if [ ${IMAGE_BOOTABLE} = true ]
		then
			if [ ${BOOT_IMAGE_INDEX} -ge 0 ] && [ ${BOOT_IMAGE_INDEX} -ne ${IMAGE_INDEX} ]
			then
				REPLACE_BOOT_IMAGE=false
			else
				REPLACE_BOOT_IMAGE=true
			fi
		else
			REPLACE_BOOT_IMAGE=false
		fi

		case "${IMAGE_TYPE}" in
			"virtio-blk")
				GRUB_DEVICE_MAP="${GRUB_DEVICE_MAP}${CARRIAGE_RETURN}(hd${GRUB_DEVICE_HD_NUM}) ${VM_PATH}/${IMAGE_FILENAME}"
				if [ "${REPLACE_BOOT_IMAGE}" = true ]
				then
					BOOTLOADER_DISK_PATH="${VM_PATH}/${IMAGE_FILENAME}"
					if [ "${IMAGE_USE_EXPERT_GRUB}" = true ]
					then
						GRUB_ROOT_DEVICE="host"
					elif [ "${IMAGE_GRUB_ROOT_DEVICE}" = "null" ]
					then
						GRUB_ROOT_DEVICE="hd${GRUB_DEVICE_HD_NUM},1"
					else
						GRUB_ROOT_DEVICE="${IMAGE_GRUB_ROOT_DEVICE}"
					fi
					if [ "${IMAGE_USE_EXPERT_GRUB}" = true ]
					then
						GRUB_DIRECTORY="${VM_PATH}"
					elif [ "${IMAGE_GRUB_DIRECTORY}" = "null" ]
					then
						GRUB_DIRECTORY=""
					else
						GRUB_DIRECTORY="${IMAGE_GRUB_DIRECTORY}"
					fi
					if [ "${IMAGE_USE_EXPERT_GRUB}" = true ]
					then
						GRUB_CONF_FILENAME="${IMAGE_FILENAME}.grub.cfg"
					elif [ "${IMAGE_GRUB_CONF_FILENAME}" = "null" ]
					then
						GRUB_CONF_FILENAME=""
					else
						GRUB_CONF_FILENAME="${IMAGE_GRUB_CONF_FILENAME}"
					fi
				fi
				GRUB_DEVICE_HD_NUM=$(( ${GRUB_DEVICE_HD_NUM} + 1 ))
				NEXT_PCI_SLOT=$(( ${NEXT_PCI_SLOT} + 1 ))
				START_COMMAND="${START_COMMAND} -s ${NEXT_PCI_SLOT}:0,${IMAGE_TYPE},\"${VM_PATH}/${IMAGE_FILENAME}\",sectorsize=${IMAGE_SECTORSIZE}"
				;;

			"ahci-hd")
				GRUB_DEVICE_MAP="${GRUB_DEVICE_MAP}${CARRIAGE_RETURN}(hd${GRUB_DEVICE_HD_NUM}) ${VM_PATH}/${IMAGE_FILENAME}"
				if [ "${REPLACE_BOOT_IMAGE}" = true ]
				then
					BOOTLOADER_DISK_PATH="${VM_PATH}/${IMAGE_FILENAME}"
					if [ "${IMAGE_USE_EXPERT_GRUB}" = true ]
					then
						GRUB_ROOT_DEVICE="host"
					elif [ "${IMAGE_GRUB_ROOT_DEVICE}" = "null" ]
					then
						GRUB_ROOT_DEVICE="hd${GRUB_DEVICE_HD_NUM},1"
					else
						GRUB_ROOT_DEVICE="${IMAGE_GRUB_ROOT_DEVICE}"
					fi
					if [ "${IMAGE_USE_EXPERT_GRUB}" = true ]
					then
						GRUB_DIRECTORY="${VM_PATH}"
					elif [ "${IMAGE_GRUB_DIRECTORY}" = "null" ]
					then
						GRUB_DIRECTORY=""
					else
						GRUB_DIRECTORY="${IMAGE_GRUB_DIRECTORY}"
					fi
					if [ "${IMAGE_USE_EXPERT_GRUB}" = true ]
					then
						GRUB_CONF_FILENAME="${IMAGE_FILENAME}.grub.cfg"
					elif [ "${IMAGE_GRUB_CONF_FILENAME}" = "null" ]
					then
						GRUB_CONF_FILENAME=""
					else
						GRUB_CONF_FILENAME="${IMAGE_GRUB_CONF_FILENAME}"
					fi
				fi
				GRUB_DEVICE_HD_NUM=$(( ${GRUB_DEVICE_HD_NUM} + 1 ))
				NEXT_PCI_SLOT=$(( ${NEXT_PCI_SLOT} + 1 ))
				START_COMMAND="${START_COMMAND} -s ${NEXT_PCI_SLOT}:0,${IMAGE_TYPE},\"${VM_PATH}/${IMAGE_FILENAME}\",sectorsize=${IMAGE_SECTORSIZE}"
				;;

			"ahci-cd")
				GRUB_DEVICE_MAP="${GRUB_DEVICE_MAP}${CARRIAGE_RETURN}(cd${GRUB_DEVICE_CD_NUM}) ${VM_RESOURCES_PATH}/${IMAGE_FILENAME}"
				if [ "${REPLACE_BOOT_IMAGE}" = true ]
				then
					BOOTLOADER_DISK_PATH="${VM_RESOURCES_PATH}/${IMAGE_FILENAME}"
					GRUB_ROOT_DEVICE="cd${GRUB_DEVICE_CD_NUM}"
					GRUB_DIRECTORY=""
					if [ "${IMAGE_USE_EXPERT_GRUB}" = true ]
					then
						GRUB_ROOT_DEVICE="host"
					elif [ "${IMAGE_GRUB_ROOT_DEVICE}" = "null" ]
					then
						GRUB_ROOT_DEVICE="cd${GRUB_DEVICE_CD_NUM}"
					else
						GRUB_ROOT_DEVICE="${IMAGE_GRUB_ROOT_DEVICE}"
					fi
					if [ "${IMAGE_USE_EXPERT_GRUB}" = true ]
					then
						GRUB_DIRECTORY="${VM_PATH}"
					elif [ "${IMAGE_GRUB_DIRECTORY}" = "null" ]
					then
						GRUB_DIRECTORY=""
					else
						GRUB_DIRECTORY="${IMAGE_GRUB_DIRECTORY}"
					fi
					if [ "${IMAGE_USE_EXPERT_GRUB}" = true ]
					then
						GRUB_CONF_FILENAME="${IMAGE_FILENAME}.grub.cfg"
					elif [ "${IMAGE_GRUB_CONF_FILENAME}" = "null" ]
					then
						GRUB_CONF_FILENAME=""
					else
						GRUB_CONF_FILENAME="${IMAGE_GRUB_CONF_FILENAME}"
					fi
				fi
				GRUB_DEVICE_CD_NUM=$(( ${GRUB_DEVICE_CD_NUM} + 1 ))
				NEXT_PCI_SLOT=$(( ${NEXT_PCI_SLOT} + 1 ))
				START_COMMAND="${START_COMMAND} -s ${NEXT_PCI_SLOT}:0,${IMAGE_TYPE},\"${VM_RESOURCES_PATH}/${IMAGE_FILENAME}\""
				;;
		esac

		IMAGE_INDEX=$(( ${IMAGE_INDEX} + 1 ))
	done

	if [ "${VM_VNC_ENABLED}" = true ]
	then
		if [ "${VM_VNC_PASSWORD}" != "" ] && [ "${VM_VNC_PASSWORD}" != "null" ]
		then
			VM_VNC_PASSWORD_STRING=",password=${VM_VNC_PASSWORD}"
		else
			VM_VNC_PASSWORD_STRING=""
		fi
		START_COMMAND="${START_COMMAND} -s 29,fbuf,tcp=${VM_VNC_IPV4_ADDRESS}:${VM_VNC_PORT},w=${VM_VNC_WIDTH},h=${VM_VNC_HEIGHT}${VM_VNC_WAIT_STRING}${VM_VNC_PASSWORD_STRING}"
	elif [ "${VM_VNC_WAIT_STRING}" != "" ]
	then
		echo -e "\n${ORNG}WARNING:${NRML} VNC is disabled on this VM, so the --wait flag is redundant.\n"
	fi

	if [ "${VM_TABLET_ENABLED}" = true ]
	then
		START_COMMAND="${START_COMMAND} -s 30,xhci,tablet"
	fi

	case "${VM_BOOT_LOADER}" in
		"bhyveload")
			if [ "${BOOTLOADER_DISK_PATH}" = "" ]
			then
				echo -e "\n${LRED}ERROR:${NRML} bhyveload; No bootable disk set in vms.conf!\n"
				return 1
			fi
			BOOTLOADER_COMMAND="${BHYVELOAD_CMD} -c stdio -m ${VM_MEMSIZE} -d \"${BOOTLOADER_DISK_PATH}\" fdo-vm-${VM_NAME}"
			START_COMMAND="${START_COMMAND} -l com1,stdio"
			SHOW_TMUX_COMMANDS=true
			;;
		"grub")
			if [ "${BOOTLOADER_DISK_PATH}" = "" ]
			then
				echo -e "\n${LRED}ERROR:${NRML} grub; No bootable disk set in vms.conf!\n"
				return 1
			fi

			echo "${GRUB_DEVICE_MAP}" > ${VM_PATH}/device.map
			BOOTLOADER_COMMAND="${GRUB_BHYVE_CMD} -m ${VM_PATH}/device.map"
			BOOTLOADER_COMMAND="${BOOTLOADER_COMMAND} -r \"${GRUB_ROOT_DEVICE}\""

			if [ "${GRUB_DIRECTORY}" != "" ]
			then
				BOOTLOADER_COMMAND="${BOOTLOADER_COMMAND} -d \"${GRUB_DIRECTORY}\""
			fi

			if [ "${GRUB_CONF_FILENAME}" != "" ]
			then
				BOOTLOADER_COMMAND="${BOOTLOADER_COMMAND} -g \"${GRUB_CONF_FILENAME}\""
			fi

			BOOTLOADER_COMMAND="${BOOTLOADER_COMMAND} -M ${VM_MEMSIZE} fdo-vm-${VM_NAME}"
			START_COMMAND="${START_COMMAND} -l com1,stdio"
			SHOW_TMUX_COMMANDS=true
			;;
		"UEFI")
			START_COMMAND="${START_COMMAND} -l bootrom,/usr/local/share/uefi-firmware/BHYVE_UEFI.fd"
			;;
	esac

	START_COMMAND="${START_COMMAND} -c sockets=1,cores=${VM_CORES},threads=1 -m ${VM_MEMSIZE} fdo-vm-${VM_NAME}'"

	if [ "${DEBUG}" = "true" ]
	then
		echo -e "\nBOOTLOADER_COMMAND:\n${BOOTLOADER_COMMAND}"
		echo -e "\nSTART_COMMAND:\n${START_COMMAND}\n\n"
		question_yes "Proceed?"
	fi

	if [ "${BOOTLOADER_COMMAND}" != "" ] && [ ${SKIP_BOOTLOADER} = false ]
	then
		sh -c "${BOOTLOADER_COMMAND}"
		if [ ${?} -ne 0 ]
		then
			echo -e "\n${LRED}ERROR:${NRML} The bootloader command failed to complete successfully!\n"
			${BHYVECTL_CMD} --vm="fdo-vm-${VM_NAME}" --destroy
			return 1
		fi
	fi

	# Add VM tap interface to bridge, in case it's not yet added.
	VM_BRIDGE_NAME="bridge${VMS_BRIDGE_ID}"
	ifconfig "${VM_BRIDGE_NAME}" addm "${VM_TAP_INTERFACE}" > /dev/null 2>&1

	get_vm_state "${VM_NAME}"
	echo -e "\n\n${YELL}Starting VM ${VM_NAME} ...${NRML}"
	sh -c "${START_COMMAND}"
	START_TRY_COUNT=0
	while [ "${VM_STATE}" != "running" ] && [ ${START_TRY_COUNT} -lt ${VM_START_TRIES} ]
	do
		sleep ${VM_START_TIMEOUT}
		get_vm_state "${VM_NAME}"
		START_TRY_COUNT=$(( ${START_TRY_COUNT} +1 ))
	done

	get_vm_state "${VM_NAME}"
	if [ "${VM_STATE}" = "running" ]
	then
		echo -e "\n${LGRN}The VM is now running!${NRML}\n"
		if [ "${SHOW_TMUX_COMMANDS}" = true ]
		then
			echo -e "\n${YELL}INFO:${NRML} The VM will start in a tmux session labelled 'fdo-vm-${VM_NAME}'."
			echo -e "      To connect to the VM, use the following command from another terminal:"
			echo -e "      ${LBLU}tmux attach-session -t fdo-vm-${VM_NAME}${NRML}\n"
			echo -e "      To disconnect from the VM console, use the following key combination"
			echo -e "      from inside the tmux session:"
			echo -e "      ${LBLU}<Ctrl+b>${NRML} followed by ${LBLU}<d>${NRML}.\n"
		fi
		return 0
	else
		echo -e "\n${ORNG}WARNING:${NRML} The VM did not appear to start successfully!\n"
		if [ "${DEBUG}" != true ]
		then
			${TMUX_CMD} kill-session -t fdo-vm-${VM_NAME}
			${BHYVECTL_CMD} --vm="fdo-vm-${VM_NAME}" --destroy
		fi
		return 1
	fi

}


##### SANITY TESTS #############################################################

if [ ${#} -lt ${NUM_MANDATORY_ARGS} ]
then
	echo -e "\n${LRED}ERROR:${NRML} Incorrect number of arguments!\n       Aborting.\n"
	usage
	exit 1
fi

# Check we are running with root privileges.
if [ `id -u` -ne 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} This command must be run with root (super-user) privileges!\n       Aborting.\n"
	exit 1
fi

# Check that this is run from the host, and not a jail.
test_if_host

if [ "${IS_HOST}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} This command must be run from the host!\n       Aborting.\n"
	exit 1
fi

# Check that VMs config file exists.
if [ ! -f ${VMS_CONF_PATH} ]
then
	echo -e "\n${LRED}ERROR:${NRML} The VMs config file '${VMS_CONF_PATH}' does not exist!\n       Aborting.\n"
	exit 1
fi

# Check that the host.conf file is accessible.
TEST_CONTENTS=`${UCL_CMD} get -u -f ${HOST_CONF_PATH} .general 2>&1`
if [ ${?} -ne 0 ] || [ "${TEST_CONTENTS}" = "null" ] || [ "${TEST_CONTENTS}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} Failed to access the config file '${HOST_CONF_PATH}'!\n       Aborting.\n"
	exit 2
fi

# Check that the vms.conf file is accessible.
TEST_CONTENTS=`${UCL_CMD} get -u -f ${VMS_CONF_PATH} .general 2>&1`
if [ ${?} -ne 0 ] || [ "${TEST_CONTENTS}" = "null" ] || [ "${TEST_CONTENTS}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} Failed to access the config file '${VMS_CONF_PATH}'!\n       Aborting.\n"
	exit 2
fi

# Check that the VMs subsystem is initialised.
VMS_SUBSYS_COMPAT=`${UCL_CMD} get -f ${HOST_CONF_PATH} -q .subsystems.vms_compat`
if [ ${?} -ne 0 ] || [ "${VMS_SUBSYS_COMPAT}" = "null" ] || [ "${VMS_SUBSYS_COMPAT}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} It appears that the VMs subsystem is not initialised!"
	echo -e "       Consider using the command:"
	echo -e "       ${LBLU}${SCRIPT_NAME} init-vms${NRML}\n       Aborting.\n"
	exit 1
fi

# Get the VMs pool name from the host config file.
VMS_POOL_NAME=`${UCL_CMD} get -f ${HOST_CONF_PATH} -q .storage.vms_pool`
if [ ${?} -ne 0 ] || [ "${VMS_POOL_NAME}" = "null" ] || [ "${VMS_POOL_NAME}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} Failed to get the VMs pool name from the host config file!\n       Aborting.\n"
	exit 2
fi

# Get the VMs bridge id from the VMs config file.
VMS_BRIDGE_ID=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .network.bridge_id_num`
if [ ${?} -ne 0 ] || [ "${VMS_BRIDGE_ID}" = "null" ] || [ "${VMS_BRIDGE_ID}" = "" ]
then
	echo -e "\n${LRED}ERROR:${NRML} Failed to get the VMs bridge id from the VMs config file!\n       Aborting.\n"
	exit 2
fi

# Test that the VM name is valid.
test_valid_vm_name "${VM_NAME}"
if [ "${VALID_VM_NAME}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The given VM name (${VM_NAME}) is invalid!\n       Aborting.\n"
	exit 1
fi

# Test if the VM is already running.
get_vm_state "${VM_NAME}"
if [ "${VM_STATE}" = "running" ]
then
	echo -e "\n${ORNG}WARNING:${NRML} The VM (${VM_NAME}) is already running!\n         Skipping start routine.\n"
	exit 1
fi

# Test if specified boot image index is valid.
test_valid_integer "${BOOT_IMAGE_INDEX}" ${BOOT_IMAGE_INDEX_MIN} ${BOOT_IMAGE_INDEX_MAX}
if [ "${VALID_INTEGER}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The specified boot image index is not valid!\n       Aborting."
	exit 1
fi


##### MAIN EXECUTION THREAD ####################################################

ERROR_COUNT=0
TEMPLATE_INDEX=0
INSTANCE_INDEX=0

# Search for VM in templates and start if found
while [ `${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}` != "null" ]
do
	TEMPLATE_NAME=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.name`
	test_valid_vm_name "${TEMPLATE_NAME}"
	if [ "${VALID_VM_NAME}" = "yes" ]
	then
		if [ "${TEMPLATE_NAME}" = "${VM_NAME}" ]
		then
			# OK, we've found the VM, now let's load the parameters.
			VM_PATH=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.path`
			VM_CORES=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.cores`
			VM_MEMSIZE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.memory_size`
			VM_TAP_INTERFACE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.tap_interface`
			VM_NIC_DRIVER=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.nic_driver`
			VM_BOOT_LOADER=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.boot_loader`
			VM_VNC_ENABLED=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.vnc_enabled`
			VM_VNC_IPV4_ADDRESS=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.vnc_ipv4_address`
			VM_VNC_PORT=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.vnc_port`
			VM_VNC_WIDTH=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.vnc_width`
			VM_VNC_HEIGHT=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.vnc_height`
			VM_VNC_PASSWORD=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.vnc_password`
			VM_TABLET_ENABLED=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.tablet_enabled`
			VM_IMAGE_0_TYPE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.0.type`
			VM_IMAGE_0_FILENAME=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.0.filename`
			VM_IMAGE_0_SECTORSIZE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.0.sector_size`
			VM_IMAGE_0_BOOTABLE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.0.bootable`
			VM_IMAGE_0_GRUB_ROOT_DEVICE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.0.grub_root_device`
			VM_IMAGE_0_GRUB_DIRECTORY=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.0.grub_directory`
			VM_IMAGE_0_GRUB_CONF_FILENAME=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.0.grub_cfg`
			VM_IMAGE_0_USE_EXPERT_GRUB=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.0.use_expert_grub`
			VM_IMAGE_1_TYPE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.1.type`
			VM_IMAGE_1_FILENAME=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.1.filename`
			VM_IMAGE_1_SECTORSIZE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.1.sector_size`
			VM_IMAGE_1_BOOTABLE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.1.bootable`
			VM_IMAGE_1_GRUB_ROOT_DEVICE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.1.grub_root_device`
			VM_IMAGE_1_GRUB_DIRECTORY=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.1.grub_directory`
			VM_IMAGE_1_GRUB_CONF_FILENAME=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.1.grub_cfg`
			VM_IMAGE_1_USE_EXPERT_GRUB=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.1.use_expert_grub`
			VM_IMAGE_2_TYPE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.2.type`
			VM_IMAGE_2_FILENAME=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.2.filename`
			VM_IMAGE_2_SECTORSIZE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.2.sector_size`
			VM_IMAGE_2_BOOTABLE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.2.bootable`
			VM_IMAGE_2_GRUB_ROOT_DEVICE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.2.grub_root_device`
			VM_IMAGE_2_GRUB_DIRECTORY=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.2.grub_directory`
			VM_IMAGE_2_GRUB_CONF_FILENAME=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.2.grub_cfg`
			VM_IMAGE_2_USE_EXPERT_GRUB=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.2.use_expert_grub`
			VM_IMAGE_3_TYPE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.3.type`
			VM_IMAGE_3_FILENAME=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.3.filename`
			VM_IMAGE_3_SECTORSIZE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.3.sector_size`
			VM_IMAGE_3_BOOTABLE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.3.bootable`
			VM_IMAGE_3_GRUB_ROOT_DEVICE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.3.grub_root_device`
			VM_IMAGE_3_GRUB_DIRECTORY=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.3.grub_directory`
			VM_IMAGE_3_GRUB_CONF_FILENAME=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.3.grub_cfg`
			VM_IMAGE_3_USE_EXPERT_GRUB=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.3.use_expert_grub`
			VM_IMAGE_4_TYPE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.4.type`
			VM_IMAGE_4_FILENAME=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.4.filename`
			VM_IMAGE_4_SECTORSIZE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.4.sector_size`
			VM_IMAGE_4_BOOTABLE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.4.bootable`
			VM_IMAGE_4_GRUB_ROOT_DEVICE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.4.grub_root_device`
			VM_IMAGE_4_GRUB_DIRECTORY=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.4.grub_directory`
			VM_IMAGE_4_GRUB_CONF_FILENAME=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.4.grub_cfg`
			VM_IMAGE_4_USE_EXPERT_GRUB=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .templates.${TEMPLATE_INDEX}.images.4.use_expert_grub`
			VM_IMAGE_5_TYPE="null"
			start_vm
			if [ ${?} -ne 0 ]
			then
				exit ${?}
			fi
			
		fi
	else
		>&2 echo -e "\n${ORNG}WARNING:${NRML} Invalid VM name (${TEMPLATE_NAME}) found in vms.conf!"
	fi

	TEMPLATE_INDEX=$(( ${TEMPLATE_INDEX} +1 ))
done

# Search for VM in instances and start if found
while [ `${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}` != "null" ]
do
	INSTANCE_NAME=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.name`
	test_valid_vm_name "${INSTANCE_NAME}"
	if [ "${VALID_VM_NAME}" = "yes" ]
	then
		if [ "${INSTANCE_NAME}" = "${VM_NAME}" ]
		then
			# OK, we've found the VM, now let's load the parameters.
			VM_PATH=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.path`
			VM_CORES=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.cores`
			VM_MEMSIZE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.memory_size`
			VM_TAP_INTERFACE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.tap_interface`
			VM_NIC_DRIVER=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.nic_driver`
			VM_BOOT_LOADER=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.boot_loader`
			VM_VNC_ENABLED=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.vnc_enabled`
			VM_VNC_IPV4_ADDRESS=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.vnc_ipv4_address`
			VM_VNC_PORT=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.vnc_port`
			VM_VNC_WIDTH=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.vnc_width`
			VM_VNC_HEIGHT=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.vnc_height`
			VM_TABLET_ENABLED=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.tablet_enabled`
			VM_IMAGE_0_TYPE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.0.type`
			VM_IMAGE_0_FILENAME=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.0.filename`
			VM_IMAGE_0_SECTORSIZE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.0.sector_size`
			VM_IMAGE_0_BOOTABLE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.0.bootable`
			VM_IMAGE_0_GRUB_ROOT_DEVICE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.0.grub_root_device`
			VM_IMAGE_0_GRUB_DIRECTORY=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.0.grub_directory`
			VM_IMAGE_0_GRUB_CONF_FILENAME=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.0.grub_cfg`
			VM_IMAGE_0_USE_EXPERT_GRUB=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.0.use_expert_grub`
			VM_IMAGE_1_TYPE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.1.type`
			VM_IMAGE_1_FILENAME=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.1.filename`
			VM_IMAGE_1_SECTORSIZE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.1.sector_size`
			VM_IMAGE_1_BOOTABLE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.1.bootable`
			VM_IMAGE_1_GRUB_ROOT_DEVICE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.1.grub_root_device`
			VM_IMAGE_1_GRUB_DIRECTORY=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.1.grub_directory`
			VM_IMAGE_1_GRUB_CONF_FILENAME=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.1.grub_cfg`
			VM_IMAGE_1_USE_EXPERT_GRUB=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.1.use_expert_grub`
			VM_IMAGE_2_TYPE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.2.type`
			VM_IMAGE_2_FILENAME=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.2.filename`
			VM_IMAGE_2_SECTORSIZE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.2.sector_size`
			VM_IMAGE_2_BOOTABLE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.2.bootable`
			VM_IMAGE_2_GRUB_ROOT_DEVICE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.2.grub_root_device`
			VM_IMAGE_2_GRUB_DIRECTORY=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.2.grub_directory`
			VM_IMAGE_2_GRUB_CONF_FILENAME=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.2.grub_cfg`
			VM_IMAGE_2_USE_EXPERT_GRUB=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.2.use_expert_grub`
			VM_IMAGE_3_TYPE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.3.type`
			VM_IMAGE_3_FILENAME=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.3.filename`
			VM_IMAGE_3_SECTORSIZE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.3.sector_size`
			VM_IMAGE_3_BOOTABLE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.3.bootable`
			VM_IMAGE_3_GRUB_ROOT_DEVICE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.3.grub_root_device`
			VM_IMAGE_3_GRUB_DIRECTORY=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.3.grub_directory`
			VM_IMAGE_3_GRUB_CONF_FILENAME=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.3.grub_cfg`
			VM_IMAGE_3_USE_EXPERT_GRUB=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.3.use_expert_grub`
			VM_IMAGE_4_TYPE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.4.type`
			VM_IMAGE_4_FILENAME=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.4.filename`
			VM_IMAGE_4_SECTORSIZE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.4.sector_size`
			VM_IMAGE_4_BOOTABLE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.4.bootable`
			VM_IMAGE_4_GRUB_ROOT_DEVICE=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.4.grub_root_device`
			VM_IMAGE_4_GRUB_DIRECTORY=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.4.grub_directory`
			VM_IMAGE_4_GRUB_CONF_FILENAME=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.4.grub_cfg`
			VM_IMAGE_4_USE_EXPERT_GRUB=`${UCL_CMD} get -f ${VMS_CONF_PATH} -q .instances.${INSTANCE_INDEX}.images.4.use_expert_grub`
			VM_IMAGE_5="null"
			start_vm
			if [ ${?} -ne 0 ]
			then
				exit ${?}
			fi
		fi
	else
		>&2 echo -e "\n${ORNG}WARNING:${NRML} Invalid VM name (${INSTANCE_NAME}) found in vms.conf!"
	fi

	INSTANCE_INDEX=$(( ${INSTANCE_INDEX} +1 ))
done


if [ ${ERROR_COUNT} -gt 0 ]
then
	exit 2
fi

################################################################################
