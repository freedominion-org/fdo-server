#!/usr/local/bin/bash

# Copyright (c) 2016 Euan Thoms <euan@potensol.com>.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


##### GLOBAL STATIC VARIABLE DECLARATIONS ######################################

SCRIPT_NAME=`basename ${0}`
POOL=${1}
BACKUP_POOL=${2}
OFFSET_DAYS=${3}
INTERVAL_DAYS=${4}
NUM_MANDATORY_ARGS=4
FILESYSTEM_FILTER=""
SIMULATION_MODE="no"
NOW=`date +%s`
NOW_DATE_TIME=`date +%Y-%m-%d_%H-%M`
DAY_IN_SECS=86400

TERM="xterm"
LRED="\033[1;31m"
LGRN="\033[1;32m"
LBLU="\033[1;34m"
LCYN="\033[1;36m"
CYAN="\033[0;36m"
YELL="\033[1;33m"
ORNG="\033[0;33m"
GREY="\033[0;37m"
DGRY="\033[1;30m"
NRML="\033[0;00m"

CARRIAGE_RETURN="
"

##### COMMAND USAGE INFO #######################################################

usage ()
{
	if [ "${NO_DISPLAY_USAGE}" = "yes" ]
	then
		return 1
	fi

	echo -e ""
	echo -e "${LCYN}    ---- ${SCRIPT_NAME} command usage ----${NRML}"
	echo -e ""
	echo -e "${YELL}Usage:   ${LGRN}${SCRIPT_NAME} pool backup_pool offset interval [--simulate]${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} data backup 28 7${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} data backup 28 7 --simulate${NRML}"
	echo -e ""
	echo -e "${YELL}Usage:   ${LGRN}${SCRIPT_NAME} pool backup_pool offset interval [--filter=\"filesystem_filter\"] [--simulate]${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} data backup 28 7 --filter=\"/users\"${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} data backup 28 7 --filter=\"/users\" --simulate${NRML}"
	echo -e ""
	echo -e "${GREY}Note   :  offset and interval are in number of days.${NRML}"
	echo -e ""
	echo -e "${YELL}Options:${NRML}"
	echo -e ""
	echo -e "${YELL}--filter    Only thins snapshots with the specified pattern in it's${NRML}"
	echo -e "${YELL}            filesystem name.${NRML}"
	echo -e ""
	echo -e "${YELL}--simulate  Simulation mode. Will output the commands but not execute them.${NRML}"
	echo -e ""
}


##### PARSE ARGUMENTS ##########################################################

ARG_INDEX=1
for ARG in "${@}"
do
	if [ ${ARG_INDEX} -gt ${NUM_MANDATORY_ARGS} ]
	then
		OPTIONAL_ARG_NAME=`echo ${ARG} | cut -d= -f1`
		OPTIONAL_ARG_VALUE=`echo ${ARG} | cut -d= -f2`
		case ${OPTIONAL_ARG_NAME} in
			--filter)
				FILESYSTEM_FILTER="${OPTIONAL_ARG_VALUE}"
				;;
			--simulate)
				SIMULATION_MODE="yes"
				;;
			*)
				echo -e "\n${LRED}ERROR:${NRML} Invalid argument!\n       Aborting.\n"
				usage
				exit 1
				;;
		esac
	fi

	ARG_INDEX=$(( ${ARG_INDEX} + 1 ))

done


##### FUNCTIONS ################################################################

thin_snapshots_by_filesystem()
{

	FILESYSTEM=${1}

	SNAPSHOTS=`zfs list -r -d 1 -H -t snapshot -o name ${FILESYSTEM}`

	EARLIEST_TIMESTAMP=${NOW}
	i=0
	for SNAPSHOT in ${SNAPSHOTS}
	do
		SNAPSHOT_NAMES[${i}]=${SNAPSHOT}
		SNAPSHOT_TIMESTAMPS[${i}]=`echo ${SNAPSHOT} | sed 's|^.*@||' | xargs date -j -f "%Y-%m-%d_%H-%M" -- +%s`
		SNAPSHOT_ACTION[${i}]="keep"

		if [ ${SNAPSHOT_TIMESTAMPS[${i}]} -lt ${EARLIEST_TIMESTAMP} ]
		then
			EARLIEST_TIMESTAMP=${SNAPSHOT_TIMESTAMPS[${i}]}
		fi
		i=$(( ${i} + 1 ))
	done

	NUM_SNAPSHOTS=${#SNAPSHOT_NAMES[@]}

	FIRST_PROJECTION=$(( ${NOW} - ${OFFSET} ))

	PROJECTIONS[0]=${FIRST_PROJECTION}

	NEXT_PROJECTION=${FIRST_PROJECTION}

	j=1
	while [ ${NEXT_PROJECTION} -gt ${EARLIEST_TIMESTAMP} ]
	do
		NEXT_PROJECTION=$(( ${NEXT_PROJECTION} - ${INTERVAL} ))
		PROJECTIONS[${j}]=${NEXT_PROJECTION}
		j=$(( ${j} + 1 ))
	done

	# Add one more projection at the end (UNIX epoch +1) so we don't get out of index error
	PROJECTIONS[${j}]=1

	# Ensure that the latest 2 snapshot are always kept
	i=$(( ${i} - 2 ))

	j=0

	while [ ${i} -ge 0 ]
	do
		if [ ${SNAPSHOT_TIMESTAMPS[${i}]} -lt ${FIRST_PROJECTION} ]
		then

			NEXT_SNAPSHOT=${SNAPSHOT_TIMESTAMPS[$(( ${i} - 1 ))]}
			LAST_KEPT_TO_NEXT_DELTA=$(( ${SNAPSHOT_TIMESTAMPS[${LAST_SNAPSHOT_KEPT}]} - ${NEXT_SNAPSHOT} ))

			if [ ${SNAPSHOT_TIMESTAMPS[${i}]} -gt ${PROJECTIONS[${j}]} ] && [ ${i} -gt 0 ] && [ "${SNAPSHOT_NAMES[${i}]}" != "${LAST_SUCCESSFUL_BACKUP_SNAPSHOT}" ]
			then
				if [ ${NEXT_SNAPSHOT} -gt ${PROJECTIONS[$(( ${j} + 1 ))]} ] && [ ${LAST_KEPT_TO_NEXT_DELTA} -lt $(( ${INTERVAL} + ${DAY_IN_SECS} )) ]
				then
					SNAPSHOT_ACTION[${i}]="destroy"
				fi
			else
				NEXT_PROJECTION=0
				while [ ${NEXT_PROJECTION} -eq 0 ] || [ ${NEXT_PROJECTION} -gt ${NEXT_SNAPSHOT_PLUS_INTERVAL} ]
				do
					NEXT_PROJECTION=${PROJECTIONS[$(( ${j} + 1 ))]}
					NEXT_SNAPSHOT_PLUS_INTERVAL=$(( ${NEXT_SNAPSHOT} + ${INTERVAL} ))
					j=$(( ${j} + 1 ))
				done
				SNAPSHOT_ACTION[${i}]="keep"
				LAST_SNAPSHOT_KEPT=${i}
			fi
		fi

		if [ ${SIMULATION_MODE} = "yes" ]
		then
			echo "${SNAPSHOT_NAMES[${i}]} -> ${SNAPSHOT_ACTION[${i}]}" >> ${BACKUP_POOL_ROOT_PATH}/log/simulate.thin-snapshots.${POOL}@${BACKUP_POOL}.${NOW_DATE_TIME}.log
		else
			echo "${SNAPSHOT_NAMES[${i}]} -> ${SNAPSHOT_ACTION[${i}]}" >> ${BACKUP_POOL_ROOT_PATH}/log/thin-snapshots.${POOL}@${BACKUP_POOL}.${NOW_DATE_TIME}.log
		fi

		if [ "${SNAPSHOT_ACTION[${i}]}" = "destroy" ]
		then
			if [ ${SIMULATION_MODE} = "yes" ]
			then
				echo -e "${LBLU}zfs destroy ${SNAPSHOT_NAMES[${i}]}${NRML}"
			else
				zfs destroy ${SNAPSHOT_NAMES[${i}]}
			fi
		fi
		i=$(( ${i} - 1 ))
	done

}

test_if_host ()
{
	procstat 0 > /dev/null 2>&1
	if [ ${?} -eq 0 ]
	then
		IS_HOST=yes
	else
		IS_HOST=no
	fi
}


##### SANITY TESTS #############################################################

if [ ${#} -lt ${NUM_MANDATORY_ARGS} ]
then
	echo -e "\n${LRED}ERROR:${NRML} Incorrect number of arguments!\n       Aborting.\n"
	usage
	exit 1
fi

test_if_host

if [ "${IS_HOST}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} This command must be run from the host!\n       Aborting.\n"
	exit 1
fi

BACKUP_POOL_ATTRIBUTES=`zpool get -H all ${BACKUP_POOL} 2> /dev/null`
if [ ${?} -ne 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} The backup pool '${BACKUP_POOL}' does not appear to be imported.\n       Aborting.\n"
	exit 1
fi

BACKUP_POOL_HEALTH=`zpool get -H health ${BACKUP_POOL} | awk '{print $3}' 2> /dev/null`
if [ "${BACKUP_POOL_HEALTH}" != "ONLINE" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The backup pool '${BACKUP_POOL}' appears to be unhealthy.\n       Aborting.\n"
	exit 1
fi

POOL_ATTRIBUTES=`zpool get -H all ${POOL} 2> /dev/null`
if [ ${?} -ne 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} The pool '${POOL}' does not appear to be imported.\n       Aborting.\n"
	exit 1
fi

POOL_HEALTH=`zpool get -H health ${POOL} | awk '{print $3}' 2> /dev/null`
if [ "${POOL_HEALTH}" != "ONLINE" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The pool '${POOL}' appears to be unhealthy.\n       Aborting.\n"
	exit 1
fi

BACKUP_POOL_ROOT_PATH=`zfs list -H ${BACKUP_POOL} | awk '{print $5}'`

if [ -f ${BACKUP_POOL_ROOT_PATH}/last-backupz-error-${POOL}@${BACKUP_POOL}.inf ]
then
	echo -e "\n${LRED}ERROR:${NRML} The last backup from '${POOL}' to '${BACKUP_POOL}' failed!\n       Aborting.\n"
	exit 1
fi

if [ -f ${BACKUP_POOL_ROOT_PATH}/backupz-${POOL}-running.inf ]
then
	echo -e "\n${LRED}ERROR:${NRML} There apppers to be a backup running for '${POOL}'!\n       Aborting.\n"
	exit 1
fi


##### MAIN EXECUTION THREAD ####################################################

# Global dynamic variable declarations
OFFSET=$(( ${OFFSET_DAYS} * ${DAY_IN_SECS} ))
INTERVAL=$(( ${INTERVAL_DAYS} * ${DAY_IN_SECS} ))

# Create log filesystem if log directory doesn't already exist.
if [ ! -d ${BACKUP_POOL_ROOT_PATH}/log ]
then
	zfs create -o mountpoint=/${BACKUP_POOL_ROOT_PATH}/log -o compression=on ${BACKUP_POOL}/log
fi

# Get the last successful backup snaphot name
LAST_SUCCESSFUL_BACKUP_SNAPSHOT=`cat ${BACKUP_POOL_ROOT_PATH}/last-successful-backupz-${POOL}@${BACKUP_POOL}.inf`

if [ "${SIMULATION_MODE}" = "yes" ]
then
	echo -e "\n${YELL}   --- SIMULATION MODE ---   ${NRML}\n"
fi


if [ "${FILESYSTEM_FILTER}" != "" ]
then
	for FILESYSTEM in `zfs list -H -t filesystem -o name -r ${BACKUP_POOL}/${POOL} | egrep "${FILESYSTEM_FILTER}"`
	do
		thin_snapshots_by_filesystem ${FILESYSTEM}
	done
else
	for FILESYSTEM in `zfs list -H -t filesystem -o name -r ${BACKUP_POOL}/${POOL}`
	do
		thin_snapshots_by_filesystem ${FILESYSTEM}
	done
fi

################################################################################
