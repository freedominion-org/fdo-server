#!/bin/sh

# Copyright (c) 2018 Euan Thoms <euan@potensol.com>.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


##### GLOBAL STATIC VARIABLE DECLARATIONS ######################################

SCRIPT_NAME=`basename ${0}`
RULE_NAME=${1}
NUM_MANDATORY_ARGS=0
IS_INTERACTIVE="yes"
PPP_CONF_PATH=${PPP_CONF_PATH:-"/etc/ppp/ppp.conf"}

TERM="xterm"
LRED="\033[1;31m"
LGRN="\033[1;32m"
LBLU="\033[1;34m"
LCYN="\033[1;36m"
CYAN="\033[0;36m"
YELL="\033[1;33m"
ORNG="\033[0;33m"
GREY="\033[0;37m"
DGRY="\033[1;30m"
NRML="\033[0;00m"

CARRIAGE_RETURN="
"

##### COMMAND USAGE INFO #######################################################

usage ()
{
	if [ "${NO_DISPLAY_USAGE}" = "yes" ]
	then
		return 1
	fi

	echo -e ""
	echo -e "${LCYN}    ---- ${SCRIPT_NAME} command usage ----${NRML}"
	echo -e ""
	echo -e "${YELL}Description:${NRML} List ppp nat rules for port forwarding for this host."
	echo -e ""
	echo -e "${YELL}Usage:   ${LGRN}${SCRIPT_NAME} [--help] [--non-interactive]${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME}${NRML}"
	echo -e ""
	echo -e "${YELL}Options:${NRML}"
	echo -e "${YELL}         --help            : display command usage.${NRML}"
	echo -e "${YELL}         --non-interactive ; will not prompt or commit changes to the config repo.${NRML}"
	echo -e ""
}


##### PARSE ARGUMENTS ##########################################################

ARG_INDEX=1
for ARG in "${@}"
do
	if [ ${ARG_INDEX} -gt ${NUM_MANDATORY_ARGS} ]
	then
		OPTIONAL_ARG_NAME=`echo ${ARG} | cut -d= -f1`
		OPTIONAL_ARG_VALUE=`echo ${ARG} | cut -d= -f2`
		case ${OPTIONAL_ARG_NAME} in
			--help)
				usage
				exit
				;;
			--non-interactive)
				IS_INTERACTIVE="no"
				;;
			*)
				echo -e "\n${LRED}ERROR:${NRML} Invalid argument!\n       Aborting.\n"
				usage
				exit 1
				;;
		esac
	fi

	ARG_INDEX=$(( ${ARG_INDEX} + 1 ))

done


##### FUNCTIONS ################################################################

# source readee function
. /usr/local/bin/fdo-readee

question_yes_no ()
{
	while true
		do
		echo -e "${LCYN}${1}${NRML}"
		readee -p "${LCYN}(yes/no): ${NRML}" ANSWER
		if [ "${ANSWER}" = "yes" ] || [ "${ANSWER}" = "no" ]
		then
			break
		fi
		echo ""
	done
}

test_valid_rule_name ()
{
	TEST_CASE="${1}"

	VALID_RULE_NAME="yes"

	if [ ${TEST_CASE} = "" ]
	then
		VALID_RULE_NAME="no"
		return 1
	fi

	IS_SYNTAX_OK=`echo "${TEST_CASE}" | sed -r "s/^[a-z0-9]+(_[a-z0-9]+[a-z0-9]*)*//" | wc -L`
	if [ ${IS_SYNTAX_OK}  -ne 0 ]
	then
		VALID_RULE_NAME="no"
		return 2
	fi

}

test_if_host ()
{
	procstat 0 > /dev/null 2>&1
	if [ ${?} -eq 0 ]
	then
		IS_HOST=yes
	else
		IS_HOST=no
	fi
}


##### SANITY TESTS #############################################################

if [ ${#} -lt ${NUM_MANDATORY_ARGS} ]
then
	echo -e "\n${LRED}ERROR:${NRML} Incorrect number of arguments!\n       Aborting.\n"
	usage
	exit 2
fi

test_if_host

if [ "${IS_HOST}" = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} This command must be run from the host!\n       Aborting.\n"
	exit 3
fi

if [ ! -f ${PPP_CONF_PATH} ]
then
	echo -e "\n${LRED}ERROR:${NRML} The ppp nat config file '${PPP_CONF_PATH}' does not exist!\n       Aborting.\n"
	usage
	exit 4
fi


##### MAIN EXECUTION THREAD ####################################################

ERROR_COUNT=0

echo -e ""
echo -e "${GREY}==============================================================================${NRML}"
echo -e "[ Rule name ] ${LBLU}[Destination IP] ${CYAN}[ TCP ports ] ${YELL}[ UDP ports ]${NRML}"
echo -e "${GREY}==============================================================================${NRML}"

# Extract and display list of port forward rule names
FOUND_RULE_NAMES=$( cat ${PPP_CONF_PATH} | egrep "^ nat port .*rule_name=" | sed "s|\(^ nat port .*rule_name=\)\([a-z0-9_]*\)\(.*\)|\2|" | sort | uniq )
for RULE_NAME in ${FOUND_RULE_NAMES}
do
	test_valid_rule_name "${RULE_NAME}"
	if [ "${VALID_RULE_NAME}" = "yes" ]
	then
		DEST_IP=$(cat ${PPP_CONF_PATH} | egrep " rule_name=${RULE_NAME}" | egrep "^ nat port tcp|udp" | awk '{print $4}' | cut -d: -f1 | sort | uniq)

		TCP_PORTS=""
		TCP_PORT_LIST=$(cat ${PPP_CONF_PATH} | egrep " rule_name=${RULE_NAME}" | egrep "^ nat port tcp" | awk '{print $4}' | cut -d: -f2 | sort | uniq)
		for TCP_PORT in ${TCP_PORT_LIST}
		do
			if [ "${TCP_PORTS}" = "" ]
			then
				TCP_PORTS="${TCP_PORT}"
			else
				TCP_PORTS="${TCP_PORTS},${TCP_PORT}"
			fi
		done

		UDP_PORTS=""
		UDP_PORT_LIST=$(cat ${PPP_CONF_PATH} | egrep " rule_name=${RULE_NAME}" | egrep "^ nat port udp" | awk '{print $4}' | cut -d: -f2 | sort | uniq)
		for UDP_PORT in ${UDP_PORT_LIST}
		do
			if [ "${UDP_PORTS}" = "" ]
			then
				UDP_PORTS="${UDP_PORT}"
			else
				UDP_PORTS="${UDP_PORTS},${UDP_PORT}"
			fi
		done

		echo -e "${RULE_NAME}  ${LBLU}${DEST_IP}  ${CYAN}${TCP_PORTS}  ${YELL}${UDP_PORTS}${NRML}"
	else
		>&2 echo -e "${ORNG}${RULE_NAME}${NRML}    <- ${ORNG}WARNING:${NRML} Rule name found, but is invalid!"
	fi
	echo -e "${GREY}------------------------------------------------------------------------------${NRML}"
done

echo -e ""

if [ ${ERROR_COUNT} -gt 0 ]
then
	exit 5
fi

################################################################################
