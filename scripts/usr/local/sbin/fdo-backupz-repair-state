#!/bin/sh

# Copyright (c) 2016 Euan Thoms <euan@potensol.com>.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


##### GLOBAL STATIC VARIABLE DECLARATIONS ######################################

SCRIPT_NAME=`basename ${0}`
POOL=${1}
BACKUP_POOL=${2}
NUM_MANDATORY_ARGS=2
FORCE_MODE="no"

TERM="xterm"
LRED="\033[1;31m"
LGRN="\033[1;32m"
LBLU="\033[1;34m"
LCYN="\033[1;36m"
CYAN="\033[0;36m"
YELL="\033[1;33m"
ORNG="\033[0;33m"
GREY="\033[0;37m"
DGRY="\033[1;30m"
NRML="\033[0;00m"

CARRIAGE_RETURN="
"

##### COMMAND USAGE INFO #######################################################

usage ()
{
	if [ "${NO_DISPLAY_USAGE}" = "yes" ]
	then
		return 1
	fi

	echo -e ""
	echo -e "${LCYN}    ---- ${SCRIPT_NAME} command usage ----${NRML}"
	echo -e ""
	echo -e "${YELL}Usage:   ${LGRN}${SCRIPT_NAME} pool backup_pool [--force]${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} data backup${NRML}"
	echo -e "${NRML}Example: ${LBLU}${SCRIPT_NAME} data backup --force${NRML}"
	echo -e ""
	echo -e "${YELL}Options:${NRML}"
	echo -e ""
	echo -e "${YELL}--force  Ignore warnings / is_running marker and force operation.${NRML}"
}


##### PARSE ARGUMENTS ##########################################################

ARG_INDEX=1
for ARG in "${@}"
do
	if [ ${ARG_INDEX} -gt ${NUM_MANDATORY_ARGS} ]
	then
		OPTIONAL_ARG_NAME=`echo ${ARG} | cut -d= -f1`
		OPTIONAL_ARG_VALUE=`echo ${ARG} | cut -d= -f2`
		case ${OPTIONAL_ARG_NAME} in
			--force)
				FORCE_MODE="yes"
				;;
			*)
				echo -e "\n${LRED}ERROR:${NRML} Invalid argument!\n       Aborting.\n"
				usage
				exit 1
				;;
		esac
	fi

	ARG_INDEX=$(( ${ARG_INDEX} + 1 ))

done


##### SANITY TESTS #############################################################

if [ ${#} -lt ${NUM_MANDATORY_ARGS} ]
then
	echo -e "\n${LRED}ERROR:${NRML} Incorrect number of arguments!\n       Aborting.\n"
	usage
	exit 2
fi

BACKUP_POOL_ATTRIBUTES=`zpool list -H | egrep "^${BACKUP_POOL}	" 2> /dev/null`
if [ $? -ne 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} The backup pool '${BACKUP_POOL}' does not appear to be imported.\n       Aborting.\n"
	exit 3
fi

BACKUP_POOL_HEALTH=`echo ${BACKUP_POOL_ATTRIBUTES} | awk '{print $9}'`
if [ "${BACKUP_POOL_HEALTH}" != "ONLINE" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The backup pool '${BACKUP_POOL}' appears to be unhealthy.\n       Aborting.\n"
	exit 4
fi

POOL_ATTRIBUTES=`zpool list -H | egrep "^${POOL}	" 2> /dev/null`
if [ ${?} -ne 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} The pool '${POOL}' does not appear to be imported.\n       Aborting.\n"
	exit 5
fi

POOL_HEALTH=`echo ${POOL_ATTRIBUTES} | awk '{print $9}'`
if [ "${POOL_HEALTH}" != "ONLINE" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The pool '${POOL}' appears to be unhealthy.\n       Aborting.\n"
	exit 6
fi

BACKUP_POOL_ROOT_PATH=`zfs list -H ${BACKUP_POOL} | awk '{print $5}'`

if [ ! -f ${BACKUP_POOL_ROOT_PATH}/last-backupz-error-${POOL}@${BACKUP_POOL}.inf ] && [ ! -f ${BACKUP_POOL_ROOT_PATH}/backupz-${POOL}-running.inf ]
then
	echo -e "\n${LRED}ERROR:${NRML} Unable to find failed backup from '${POOL}' to '${BACKUP_POOL}'!\n       Aborting.\n"
	exit 7
fi

if [ -f ${BACKUP_POOL_ROOT_PATH}/backupz-${POOL}-running.inf ] && [ ${FORCE_MODE} = "no" ]
then
	echo -e "\n${LRED}ERROR:${NRML} There apppers to be a backup running for '${POOL}'!\nConsider using the --force option.\n       Aborting.\n"
	exit 8
fi

################################################################################


##### MAIN EXECUTION THREAD ####################################################

# Get the last successful backup snapshot suffix.
LAST_SUCCESSFUL_BACKUP_SNAPSHOT=`cat ${BACKUP_POOL_ROOT_PATH}/last-successful-backupz-${POOL}@${BACKUP_POOL}.inf`

# Get the last failed backup snapshot suffix.
if [ -f ${BACKUP_POOL_ROOT_PATH}/last-backupz-error-${POOL}@${BACKUP_POOL}.inf ]
then
	LAST_FAILED_BACKUP_SNAPSHOT=`cat ${BACKUP_POOL_ROOT_PATH}/last-backupz-error-${POOL}@${BACKUP_POOL}.inf`
else
	LAST_FAILED_BACKUP_SNAPSHOT=`cat ${BACKUP_POOL_ROOT_PATH}/last-backupz-${POOL}-running.inf`
fi

# If in force mode, kill any running backupz processes.
if [ "${FORCE_MODE}" = "yes" ]
then
	echo -e "\n${YELL}   --- FORCE MODE ---   ${NRML}\n"
	BACKUPZ_PID=`ps ax | egrep "backupz " | egrep "${POOL} ${BACKUP_POOL}" | awk '{print $1}'`
	if [ "${BACKUPZ_PID}" != "" ]
	then
		echo -e "\n${YELL}Killing running backupz processes...${NRML}\n"
		kill -9 ${BACKUPZ_PID}
		sleep 30
	fi
fi

# Just in case last failed backup is actually the last successful backup (should not happen).
if [ "${LAST_FAILED_BACKUP_SNAPSHOT}" = "${LAST_SUCCESSFUL_BACKUP_SNAPSHOT}" ]
then
	echo -e "\n${LRED}ERROR:${NRML} The last failed backup appears to be the same as the last"
	echo -e "       successful backup! This should never happen!\n       Aborting.\n"
	exit 9
fi

# Now we remove the failed backup snapshots from both the production pool and the backup pool.
echo -e "\n${YELL}Destroying failed backupz snapshots from the backup pool...${NRML}\n"
fdo-backupz-destroy-snapshot ${BACKUP_POOL} "@${LAST_FAILED_BACKUP_SNAPSHOT}"
if [ ${?} -ne 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} Failed to destroy failed backupz snaphots from '${BACKUP_POOL}'!\n       Aborting.\n"
	exit 10
fi

echo -e "\n${YELL}Destroying failed backupz snapshots from the production pool...${NRML}\n"
fdo-backupz-destroy-snapshot ${POOL} "@${LAST_FAILED_BACKUP_SNAPSHOT}"
if [ ${?} -ne 0 ]
then
	echo -e "\n${LRED}ERROR:${NRML} Failed to destroy failed backupz snaphots from '${POOL}'!\n       Aborting.\n"
	exit 11
fi

# After successfully destroying failed backup snapshots, let's remove the failed backup markers.
rm -f ${BACKUP_POOL_ROOT_PATH}/last-backupz-error-${POOL}@${BACKUP_POOL}.inf 2> /dev/null
rm -f ${BACKUP_POOL_ROOT_PATH}/last-backupz-${POOL}-running.inf 2> /dev/null

################################################################################
