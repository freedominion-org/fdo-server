#!/usr/local/bin/python2

# Copyright (c) 2016 Euan Thoms <euan@potensol.com>.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


# NOTES:
# Tested on FreeBSD 10.3
# Additional FreeBSD ports/packages: py-psycopg2/py27-psycopg2, py-daemon/py27-daemon # OR install from pip: python-daemon


import logging
import time
from daemon import runner
import subprocess
import psycopg2

class App():

    def __init__(self):

        self.stdin_path = '/dev/null'
        self.stdout_path = '/var/log/fdo-rdscreensized/stdout.log'
        self.stderr_path = '/var/log/fdo-rdscreensized/stderr.log'
        self.pidfile_path =  '/var/run/fdo-rdscreensized.pid'
        self.pidfile_timeout = 5

    def run(self):

        #logger.debug("Debug message")
        logger.info("Starting fdo-rdscreensized")
        #logger.warn("Warning message")
        #logger.error("Error message")

        dbHost = tuple(open('/usr/local/etc/fdo/remote-desktops-rdscreensized-db.conf','r'))[0].split('\n')[0]
        dbName = tuple(open('/usr/local/etc/fdo/remote-desktops-rdscreensized-db.conf','r'))[1].split('\n')[0]
        dbUsername = tuple(open('/usr/local/etc/fdo/remote-desktops-rdscreensized-db.conf','r'))[2].split('\n')[0]
        dbPassword = tuple(open('/usr/local/etc/fdo/remote-desktops-rdscreensized-db.conf','r'))[3].split('\n')[0]
        self.rdHost = tuple(open('/usr/local/etc/fdo/remote-desktops-rdscreensized-db.conf','r'))[4].split('\n')[0]

        while True:
            while not self.openDatabase(dbHost,dbName,dbUsername,dbPassword):
                time.sleep(30)

            while True:
                self.adjustScreenSize()
                time.sleep(10)

    def adjustScreenSize(self):

        logger.debug("Entered adjustScreenSize(self)")

        query = self.db.cursor()
        query.execute("select name,request_size,id from remote_desktops where host like '" + str(self.rdHost) + "' and request_size is not NULL;")

        resultset = query.fetchall()
        query.close()
        for row in resultset:
            desktopName = row[0]
            resolution = row[1]
            logger.info("Changing resolution for " + str(desktopName) + " to " + str(resolution))
            commandText = "su - " + str(desktopName) + " /usr/local/bin/VBoxManage controlvm " + str(desktopName) + " setvideomodehint " + str(resolution) + " 32" 
            logger.debug(str(commandText))
            if subprocess.call(commandText,shell=True) == 0:
                sqlCommand = "update remote_desktops set request_size = NULL where name like '" + str(desktopName) + "' and host like '" + str(self.rdHost) + "';"
                logger.debug(str(sqlCommand))
                updateQuery = self.db.cursor()
                updateQuery.execute(sqlCommand)
                self.db.commit()
                updateQuery.close()
 

    def openDatabase(self,host,schema,username,password):
        try:

            self.db = psycopg2.connect(host=host, user=username, password=password, database=schema)

            logger.info("Connected to database!")
            return True

        except psycopg2.Error:
            logger.error("ERROR CONNECTING TO DATABASE!")

        return False 

app = App()
logger = logging.getLogger("DaemonLog")
logger.setLevel(logging.INFO)
#logger.setLevel(logging.DEBUG)
formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
handler = logging.FileHandler("/var/log/fdo-rdscreensized/fdo-rdscreensized.log")
handler.setFormatter(formatter)
logger.addHandler(handler)
daemon_runner = runner.DaemonRunner(app)
daemon_runner.daemon_context.files_preserve=[handler.stream]
daemon_runner.do_action()
