#!/usr/local/bin/python

# Tested on FreeBSD 10.0
# Additional FreeBSD ports/packages: py-daemon # OR install from pip: python-daemon


import logging
import time
from daemon import runner
import subprocess
import psycopg2

class App():

    def __init__(self):

        self.rdHost = "desktops.example.net"

        self.stdin_path = '/dev/null'
        self.stdout_path = '/var/log/fdo-rdscreensized/stdout.log'
        self.stderr_path = '/var/log/fdo-rdscreensized/stderr.log'
        self.pidfile_path =  '/var/run/fdo-rdscreensized.pid'
        self.pidfile_timeout = 5

    def run(self):

        #logger.debug("Debug message")
        logger.info("Starting fdo-rdscreensized")
        #logger.warn("Warning message")
        #logger.error("Error message")

        dbUsername = "fdoclientos"
        dbPassword = "fdoclientospass"

        while True:
            while not self.openDatabase("pgsql.example.net","fdo-client-os",dbUsername,dbPassword):
                time.sleep(30)

            while True:
                self.adjustScreenSize()
                time.sleep(10)

    def adjustScreenSize(self):

        logger.debug("Entered adjustScreenSize(self)")

        query = self.db.cursor()
        query.execute("select name,request_size,id from remote_desktops where host like '" + str(self.rdHost) + "' and request_size is not NULL;")

        resultset = query.fetchall()
        query.close()
        for row in resultset:
            desktopName = row[0]
            resolution = row[1]
            logger.debug("change resolution for " + str(desktopName) + " to " + str(resolution))
            commandText = "/usr/local/bin/sudo -u " + str(desktopName) + " /usr/local/bin/VBoxManage controlvm " + str(desktopName) + " setvideomodehint " + str(resolution) + " 32" 
            logger.debug(str(commandText))
            if subprocess.call(commandText,shell=True) == 0:
                sqlCommand = "update remote_desktops set request_size = NULL where name like '" + str(desktopName) + "' and host like '" + str(self.rdHost) + "';"
                logger.debug(str(sqlCommand))
                updateQuery = self.db.cursor()
                updateQuery.execute(sqlCommand)
                self.db.commit()
                updateQuery.close()
 

    def openDatabase(self,host,schema,username,password):
        try:

            self.db = psycopg2.connect(host=host, user=username, password=password, database=schema)

            logger.info("Connected to database!")
            return True

        except psycopg2.Error:
            logger.error("ERROR CONNECTING TO DATABASE!")

        return False 

app = App()
logger = logging.getLogger("DaemonLog")
logger.setLevel(logging.INFO)
#logger.setLevel(logging.DEBUG)
formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
handler = logging.FileHandler("/var/log/fdo-rdscreensized/fdo-rdscreensized.log")
handler.setFormatter(formatter)
logger.addHandler(handler)
daemon_runner = runner.DaemonRunner(app)
daemon_runner.daemon_context.files_preserve=[handler.stream]
daemon_runner.do_action()
