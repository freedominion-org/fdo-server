#!/bin/sh
#
#
# PROVIDE: sshfsd
# REQUIRE: DAEMON jail
# KEYWORD: shutdown
# Add the following lines to /etc/rc.conf to enable sshfsd:
#
# sshfsd_enable (bool): Set it to "YES" to enable sshfsd.
# Default is "NO"
#
#

. /etc/rc.subr

name="sshfsd"
rcvar=${name}_enable

load_rc_config ${name}
: ${sshfsd_enable="NO"}
sshfsd_opts=${sshfsd_opts:-"rw,allow_other,reconnect,ServerAliveInterval=10"}

status_cmd="${name}_status"
start_cmd="${name}_start"
stop_cmd="${name}_stop"
extra_commands="status"

LRED="\033[1;31m"
LGRN="\033[1;32m"
LBLU="\033[1;34m"
LCYN="\033[1;36m"
CYAN="\033[0;36m"
YELL="\033[1;33m"
ORNG="\033[0;33m"
GREY="\033[0;37m"
DGRY="\033[1;30m"
NRML="\033[0;00m"

CARRIAGE_RETURN="
"

FDO_CONF_DIR="/usr/local/etc/fdo"
SSHFSD_CONF_PATH="${FDO_CONF_DIR}/sshfsd_shares.conf"
SSHFSD_KEY_PREFIX="${FDO_CONF_DIR}/sshfsd_key"


is_mounted () {

	IFS=${CARRIAGE_RETURN}
	SSHFS_MOUNTPOINTS=`mount -p -t fusefs.sshfs | awk -F '\t'+ '{print $2}' | awk -F " fusefs.sshfs" '{print $1}'`
	for MOUNTPOINT in ${SSHFS_MOUNTPOINTS}
	do
		if [ "${MOUNTPOINT}" = "${1}" ]
		then
			return 0
		fi
	done
	return 1
}

sshfsd_start () {

	IFS=${CARRIAGE_RETURN}
	for SHARE in `cat ${SSHFSD_CONF_PATH} | grep -v "^#"`
	do
		SHARE_URI=`echo ${SHARE} | awk -F "///" '{print $1}'`
		SHARE_MOUNTPOINT=`echo ${SHARE} | awk -F "///" '{print $2}'`
		SHARE_PORT=`echo ${SHARE} | awk -F "///" '{print $3}'`
		echo -e "\n${YELL}Starting sshfs share '${NRML}${SHARE_URI}${YELL}':${NRML}" 
		is_mounted "${SHARE_MOUNTPOINT}"
		if [ ${?} -eq 0 ]
		then
			echo -e "  ${ORNG}The mount point '${NRML}${SHARE_MOUNTPOINT}${ORNG}' is already mounted!${NRML}\n"
		else
			MOUNTPOINT_FLAT=`echo ${SHARE_MOUNTPOINT} | sed "s/\//_/g"`
			MOUNTPOINT_MD5=`echo "${SHARE_MOUNTPOINT}" | md5 -q`
			SHARE_SSH_KEY="${SSHFSD_KEY_PREFIX}_${MOUNTPOINT_MD5}${MOUNTPOINT_FLAT}"
			if [ -f "${SHARE_SSH_KEY}" ]
			then
				sshfsd_opts="${sshfsd_opts},IdentityFile=\"${SHARE_SSH_KEY}\""
			fi
			echo -e "  ${YELL}Mounting '${NRML}${SHARE_MOUNTPOINT}${YELL}' ...${NRML}"
			timeout --foreground 30 /usr/local/bin/sshfs -p ${SHARE_PORT} ${SHARE_URI} ${SHARE_MOUNTPOINT} -o ${sshfsd_opts}
			if [ ${?} -eq 0 ]
			then
				echo -e "  ${LGRN}Successfully mounted the remote share.${NRML}\n"
			else
				echo -e "  ${LRED}Failed to mount the remote share!${NRML}\n"
			fi
		fi
	done

}

sshfsd_stop () {

	IFS=${CARRIAGE_RETURN}
	for SHARE in `cat /usr/local/etc/fdo/sshfsd_shares.conf | grep -v "^#"`
	do
		SHARE_URI=`echo ${SHARE} | awk -F "///" '{print $1}'`
		SHARE_MOUNTPOINT=`echo ${SHARE} | awk -F "///" '{print $2}'`
		echo -e "\n${YELL}Stopping sshfs share '${NRML}${SHARE_URI}${YELL}':${NRML}" 
		is_mounted "${SHARE_MOUNTPOINT}"
		if [ ${?} -eq 0 ]
		then
			echo -e "  ${YELL}Unmounting '${NRML}${SHARE_MOUNTPOINT}${YELL}' ...${NRML}"
			umount ${SHARE_MOUNTPOINT}
			if [ ${?} -eq 0 ]
			then
				echo -e "  ${LGRN}Successfully unmounted the remote share.${NRML}\n"
			else
				echo -e "  ${LRED}Failed to mount the remote share!${NRML}\n"
			fi
		else
			echo -e "  ${ORNG}The mount point '${NRML}${SHARE_MOUNTPOINT}${ORNG}' is not mounted!${NRML}\n"
		fi
	done

}

sshfsd_status () {

	IFS=${CARRIAGE_RETURN}
	for SHARE in `cat /usr/local/etc/fdo/sshfsd_shares.conf | grep -v "^#"`
	do
		SHARE_URI=`echo ${SHARE} | awk -F "///" '{print $1}'`
		SHARE_MOUNTPOINT=`echo ${SHARE} | awk -F "///" '{print $2}'`
		echo -e "\n${YELL}Status for sshfs share '${NRML}${SHARE_URI}${YELL}':${NRML}" 
		is_mounted "${SHARE_MOUNTPOINT}"
		if [ ${?} -eq 0 ]
		then
			echo -e "  ${LGRN}The mount point '${NRML}${SHARE_MOUNTPOINT}${LGRN}' is mounted.${NRML}\n"
		else
			echo -e "  ${ORNG}The mount point '${NRML}${SHARE_MOUNTPOINT}${ORNG}' is not mounted.${NRML}\n"
		fi
	done

}

run_rc_command "$1"
