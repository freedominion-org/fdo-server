#!/bin/sh

#### Recipe Variable Definitions ###############################################
RECIPE_JAIL_IP="${JAILS_LAN_SUBNET_C}.45"                                      # Optional:  ip address given to the jail (see FDo IP Policy).
RECIPE_PACKAGES="dns/bind918"                                                  # Optional:  packages to install in the jail.
RECIPE_COMPAT=1                                                                # Mandatory: Compatability level indicator.
RECIPE_REQUIRES_JAIL_RESTART="no"                                              # Mandatory: "yes" if the jail requires a restart after cooking.
RECIPE_REQUIRES_PORT_FORWARD="yes"                                             # Mandatory: "yes" if the hosts NAT (pf/ppp) requires a restart after cooking.
RECIPE_REQUIRES_HTTP_GATEWAY="no"                                              # Mandatory:  whether this recipe requires an http gateway site.
RECIPE_REQUIRES_DNS_HOSTNAME="no"                                              # Mandatory:  whether his recipe requires a caching DNS hostname override.
RECIPE_TCP_PORTS="53"                                                          # Optional:  tcp ports to forward, necessary for port forwarding.
RECIPE_UDP_PORTS="53"                                                          # Optional:  udp ports to forward, necessary for port forwarding.
START_JAIL_SERVICES="named"                                                    # Optional:  jail services started after cooking (in left to right order).
SIDES_FILESYSTEMS=""                                                           # Optional:  names of additional ZFS filesystems required for recipe.
SIDES_MOUNTPOINTS=""                                                           # Optional:  mountpoints of additional ZFS filesystems required for recipe.
COLUMN_PADDING_HOSTNAME_SIZE=47                                                #
################################################################################

prep_recipe ()
{
	echo -e "\n${ORNG}NOTICE:${NRML} This jail recipe requires that you provide an initial"
	echo -e   "        DNS zone (e.g example.net). And optionally and preferebly provide"
	echo -e   "        the secondary authoritative DNS server IP address.\n"

	question_yes_no "Would you like to continue to cook this jail recipe?"
	if [ "${ANSWER}" = "no" ]
	then
		PREP_SUCCESS="no"
		return
	fi

	PREP_SUCCESS="yes"
}

cook_recipe ()
{

	# Get the default route IP for accessing this host from outside the LAN.
	DEFAULT_ROUTE_IP=`route -nv get 1 | tail -1 | awk '{print $5}'`

	DNS_AUTH_PRIMARY_IP="${DEFAULT_ROUTE_IP}"
	DNS_AUTH_SECONDARY_IP="1.2.3.4"

	# Get the initial DNS zone name.
	INITIAL_DNS_ZONE_NAME=""
	while [ "${INITIAL_DNS_ZONE_NAME}" = "" ]
	do
		echo -e ""
		readee -p "${LCYN}Enter the initial DNS zone name: ${NRML}" INITIAL_DNS_ZONE_NAME_TEMP
		test_valid_fqhn ${INITIAL_DNS_ZONE_NAME_TEMP}
		if [ "${VALID_FQHN}" = "yes" ]
		then
			echo -e ""
			question_yes_no "You have entered '${INITIAL_DNS_ZONE_NAME_TEMP}' as the initial DNS zone name. Is this correct?"
			if [ "${ANSWER}" = "yes" ]
			then
				INITIAL_DNS_ZONE_NAME=${INITIAL_DNS_ZONE_NAME_TEMP}
			fi
		else
			echo -e "\n${LRED}ERROR:${NRML} The DNS zone name is invalid!\n"
		fi
	done

	# Get whether to use default nameserver hostname (ns1) or specify one for this primary dns auth server.
	echo -e "\n${YELL}INFO:${NRML} The available nameserver hostname provisioning methods are as follows.\n"
	echo -e "${LCYN}      default - The default hostname will be used (ns1.${INITIAL_DNS_ZONE_NAME}) [RECOMENDED].${NRML}"
	echo -e "${LCYN}      specify - Specify the primary nameserver hostname.${NRML}"
	DNS_AUTH_PRIMARY_NS_HOSTNAME="ns1"
	DNS_AUTH_PRIMARY_NS_HOSTNAME_METHOD=""
	while [ "${DNS_AUTH_PRIMARY_NS_HOSTNAME_METHOD}" = "" ]
	do
		echo -e "\n${LCYN}Select the method to provision the primary nameserver hostname.${NRML}"
		readee -p "${LCYN}(default|specify): ${NRML}" DNS_AUTH_PRIMARY_NS_HOSTNAME_METHOD_TEMP
		# Check input validation.
		if [ "${DNS_AUTH_PRIMARY_NS_HOSTNAME_METHOD_TEMP}" = "default" ] || [ "${DNS_AUTH_PRIMARY_NS_HOSTNAME_METHOD_TEMP}" = "specify" ]
		then
			DNS_AUTH_PRIMARY_NS_HOSTNAME_METHOD="${DNS_AUTH_PRIMARY_NS_HOSTNAME_METHOD_TEMP}"
		fi
	done

	if [ "${DNS_AUTH_PRIMARY_NS_HOSTNAME_METHOD}" = "specify" ]
	then
		# Get the specified primary nameserver hostname.
		DNS_AUTH_PRIMARY_NS_HOSTNAME=""
		while [ "${DNS_AUTH_PRIMARY_NS_HOSTNAME}" = "" ]
		do
			echo -e ""
			readee -p "${LCYN}Enter the primary nameserver hostname: ${NRML}" DNS_AUTH_PRIMARY_NS_HOSTNAME_TEMP
			test_valid_host_name ${DNS_AUTH_PRIMARY_NS_HOSTNAME_TEMP}
			if [ "${VALID_HOST_NAME}" = "yes" ]
			then
				echo -e ""
				question_yes_no "You have entered '${DNS_AUTH_PRIMARY_NS_HOSTNAME_TEMP}' as the primary nameserver hostname. Is this correct?"
				if [ "${ANSWER}" = "yes" ]
				then
					DNS_AUTH_PRIMARY_NS_HOSTNAME=${DNS_AUTH_PRIMARY_NS_HOSTNAME_TEMP}
				fi
			else
				echo -e "\n${LRED}ERROR:${NRML} The primary nameserver hostname is invalid!\n"
			fi
		done
	fi

	# Get whether to use default nameserver hostname (ns2) or specify one for the secondary dns auth server.
	echo -e "\n${YELL}INFO:${NRML} The available nameserver hostname provisioning methods are as follows.\n"
	echo -e "${LCYN}      default - The default hostname will be used (ns2.${INITIAL_DNS_ZONE_NAME}) [RECOMENDED].${NRML}"
	echo -e "${LCYN}      specify - Specify the secondary nameserver hostname.${NRML}"
	DNS_AUTH_SECONDARY_NS_HOSTNAME="ns2"
	DNS_AUTH_SECONDARY_NS_HOSTNAME_METHOD=""
	while [ "${DNS_AUTH_SECONDARY_NS_HOSTNAME_METHOD}" = "" ]
	do
		echo -e "\n${LCYN}Select the method to provision the secondary nameserver hostname.${NRML}"
		readee -p "${LCYN}(default|specify): ${NRML}" DNS_AUTH_SECONDARY_NS_HOSTNAME_METHOD_TEMP
		# Check input validation.
		if [ "${DNS_AUTH_SECONDARY_NS_HOSTNAME_METHOD_TEMP}" = "default" ] || [ "${DNS_AUTH_SECONDARY_NS_HOSTNAME_METHOD_TEMP}" = "specify" ]
		then
			DNS_AUTH_SECONDARY_NS_HOSTNAME_METHOD="${DNS_AUTH_SECONDARY_NS_HOSTNAME_METHOD_TEMP}"
		fi
	done

	if [ "${DNS_AUTH_SECONDARY_NS_HOSTNAME_METHOD}" = "specify" ]
	then
		# Get the specified secondary nameserver hostname.
		DNS_AUTH_SECONDARY_NS_HOSTNAME=""
		while [ "${DNS_AUTH_SECONDARY_NS_HOSTNAME}" = "" ]
		do
			echo -e ""
			readee -p "${LCYN}Enter the secondary nameserver hostname: ${NRML}" DNS_AUTH_SECONDARY_NS_HOSTNAME_TEMP
			test_valid_host_name ${DNS_AUTH_SECONDARY_NS_HOSTNAME_TEMP}
			if [ "${VALID_HOST_NAME}" = "yes" ]
			then
				echo -e ""
				question_yes_no "You have entered '${DNS_AUTH_SECONDARY_NS_HOSTNAME_TEMP}' as the secondary nameserver hostname. Is this correct?"
				if [ "${ANSWER}" = "yes" ]
				then
					DNS_AUTH_SECONDARY_NS_HOSTNAME=${DNS_AUTH_SECONDARY_NS_HOSTNAME_TEMP}
				fi
			else
				echo -e "\n${LRED}ERROR:${NRML} The secondary nameserver hostname is invalid!\n"
			fi
		done
	fi

	# Get zone transfer method (to any secondary authoritative DNS servers).
	echo -e "\n${YELL}INFO:${NRML} The available zone transfer methods are as follows.\n"
	echo -e "${LCYN}      none    - There are currently no secondary authoritative DNS servers, and none planned.${NRML}"
	echo -e "${LCYN}      any     - Allow transfer to any host [CAUTION].${NRML}"
	echo -e "${LCYN}      specify - Specify the secondary authoritative DNS server IP address [RECOMMENDED].${NRML}"
	DNS_AUTH_SECONDARY_TRANSFER_METHOD=""
	while [ "${DNS_AUTH_SECONDARY_TRANSFER_METHOD}" = "" ]
	do
		echo -e "\n${LCYN}Select the method to transfer zones to a secondary authoritative DNS server.${NRML}"
		readee -p "${LCYN}(none|any|specify): ${NRML}" DNS_AUTH_SECONDARY_TRANSFER_METHOD_TEMP
		# Check input validation.
		if [ "${DNS_AUTH_SECONDARY_TRANSFER_METHOD_TEMP}" = "none" ] || [ "${DNS_AUTH_SECONDARY_TRANSFER_METHOD_TEMP}" = "any" ] || [ "${DNS_AUTH_SECONDARY_TRANSFER_METHOD_TEMP}" = "specify" ]
		then
			DNS_AUTH_SECONDARY_TRANSFER_METHOD="${DNS_AUTH_SECONDARY_TRANSFER_METHOD_TEMP}"
		fi
	done

	if [ "${DNS_AUTH_SECONDARY_TRANSFER_METHOD}" = "specify" ]
	then
		# Get the secondary authoritative DNS server host address.
		DNS_AUTH_SECONDARY_IP=""
		while [ "${DNS_AUTH_SECONDARY_IP}" = "" ]
		do
			echo -e ""
			readee -p "${LCYN}Enter the secondary authoritative DNS server IP address: ${NRML}" DNS_AUTH_SECONDARY_IP_TEMP
			test_valid_inet_address ${DNS_AUTH_SECONDARY_IP_TEMP}
			if [ "${VALID_INET_ADDRESS}" = "yes" ]
			then
				test_ping_host ${DNS_AUTH_SECONDARY_IP_TEMP}
				if [ "${VALID_HOST_PING}" = "no" ]
				then
					echo -e "\n${ORNG}WARNING:${NRML} The secondary DNS server IP address is not currently pingable!"
				fi
				echo -e ""
				question_yes_no "You have entered '${DNS_AUTH_SECONDARY_IP_TEMP}' as the IP address. Is this correct?"
				if [ "${ANSWER}" = "yes" ]
				then
					DNS_AUTH_SECONDARY_IP=${DNS_AUTH_SECONDARY_IP_TEMP}
				fi
			else
				echo -e "\n${LRED}ERROR:${NRML} The secondary authoritative DNS server IP address is invalid!\n"
			fi
		done
	else
		DNS_AUTH_SECONDARY_IP="${DNS_AUTH_SECONDARY_TRANSFER_METHOD}"
	fi

	NAMED_CONF_PATH="/usr/local/etc/namedb/named.conf"
	EXAMPLE_ZONE_FILE_PATH="/usr/local/etc/namedb/primary/example.net.db"
	ZONE_FILE_PATH="/usr/local/etc/namedb/primary/${INITIAL_DNS_ZONE_NAME}.db"

	# Update bind global config with the jail IP.
	sed -i "" "s/FDO_DNS_AUTH_IP/${JAIL_IP}/" configs/${JAIL_NAME}@${HOST_NAME}${NAMED_CONF_PATH}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

	# Update bind global config with the secondary authoritative DNS server IP.
	sed -i "" "s/FDO_DNS_AUTH_SECONDARY_IP/${DNS_AUTH_SECONDARY_IP}/" configs/${JAIL_NAME}@${HOST_NAME}${NAMED_CONF_PATH}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

	# Add initial zone entry to bind global config.
	ZONE_DEFAULT_OPTIONS="allow-transfer { \"secondary_servers\"; }; dnssec-policy default; inline-signing yes;"
	echo "zone \"${INITIAL_DNS_ZONE_NAME}\" { type primary; file \"${ZONE_FILE_PATH}\"; ${ZONE_DEFAULT_OPTIONS} };" >> configs/${JAIL_NAME}@${HOST_NAME}${NAMED_CONF_PATH}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

	if [ ${ERROR_COUNT} -ne 0 ]
	then
		echo -e "\n${LRED}ERROR:${NRML} Failed trying to update named.conf.\n"
		RECIPE_SUCCESS="no"
		return
	fi

	# Add initial zone database file.
	cp configs/${JAIL_NAME}@${HOST_NAME}${EXAMPLE_ZONE_FILE_PATH} configs/${JAIL_NAME}@${HOST_NAME}${ZONE_FILE_PATH}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

	# Update zone database with primary nameserver and its corresponding record.
	DNS_AUTH_PRIMARY_NS_HOSTNAME_SIZE=`echo "${DNS_AUTH_PRIMARY_NS_HOSTNAME}.${INITIAL_DNS_ZONE_NAME}." | wc -c`
	COLUMN_PADDING_SIZE=$(( COLUMN_PADDING_HOSTNAME_SIZE - DNS_AUTH_PRIMARY_NS_HOSTNAME_SIZE ))
	if [ ${COLUMN_PADDING_SIZE} -lt 0 ]
	then
		COLUMN_PADDING_SIZE=0
	fi
	COLUMN_PADDING=`printf "%-${COLUMN_PADDING_LENGTH}s" " "`
	sed -i "" "s|ns1.example.net.[\t ]*IN\(.*\)1.2.3.4|${DNS_AUTH_PRIMARY_NS_HOSTNAME}.${INITIAL_DNS_ZONE_NAME}.${COLUMN_PADDING} IN\1${DNS_AUTH_PRIMARY_IP}|" configs/${JAIL_NAME}@${HOST_NAME}${ZONE_FILE_PATH}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	sed -i "" "s|ns1.example.net.|${DNS_AUTH_PRIMARY_NS_HOSTNAME}.${INITIAL_DNS_ZONE_NAME}.|" configs/${JAIL_NAME}@${HOST_NAME}${ZONE_FILE_PATH}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

	# Update zone database with secondary nameserver and its corresponding record.
	DNS_AUTH_SECONDARY_NS_HOSTNAME_SIZE=`echo "${DNS_AUTH_SECONDARY_NS_HOSTNAME}.${INITIAL_DNS_ZONE_NAME}." | wc -c`
	COLUMN_PADDING_SIZE=$(( COLUMN_PADDING_HOSTNAME_SIZE - DNS_AUTH_SECONDARY_NS_HOSTNAME_SIZE ))
	if [ ${COLUMN_PADDING_SIZE} -lt 0 ]
	then
		COLUMN_PADDING_SIZE=0
	fi
	COLUMN_PADDING=`printf "%-${COLUMN_PADDING_LENGTH}s" " "`
	sed -i "" "s|ns2.example.net.[\t ]*IN\(.*\)1.2.3.4|${DNS_AUTH_SECONDARY_NS_HOSTNAME}.${INITIAL_DNS_ZONE_NAME}.${COLUMN_PADDING} IN\1${DNS_AUTH_SECONDARY_IP}|" configs/${JAIL_NAME}@${HOST_NAME}${ZONE_FILE_PATH}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	sed -i "" "s|ns2.example.net.|${DNS_AUTH_SECONDARY_NS_HOSTNAME}.${INITIAL_DNS_ZONE_NAME}.|" configs/${JAIL_NAME}@${HOST_NAME}${ZONE_FILE_PATH}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

	# Update zone database with the remaining domain name replacements.
	sed -i "" "s/example.net/${INITIAL_DNS_ZONE_NAME}/g" configs/${JAIL_NAME}@${HOST_NAME}${ZONE_FILE_PATH}
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

	if [ ${ERROR_COUNT} -ne 0 ]
	then
		echo -e "\n${LRED}ERROR:${NRML} Failed trying to provision initial zone file.\n"
		RECIPE_SUCCESS="no"
		return
	fi

	# Update elements in recipe config file.
	${UCL_CMD} set -f configs/${JAIL_NAME}@${HOST_NAME}${RECIPE_CONF_PATH} -t string .general.secondary_server_ip_addresses "${DNS_AUTH_SECONDARY_IP}"
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	${UCL_CMD} set -f configs/${JAIL_NAME}@${HOST_NAME}${RECIPE_CONF_PATH} -t string .zones.0.name "${INITIAL_DNS_ZONE_NAME}"
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	${UCL_CMD} set -f configs/${JAIL_NAME}@${HOST_NAME}${RECIPE_CONF_PATH} -t string .zones.0.primary_nameserver_fqhn "${DNS_AUTH_PRIMARY_NS_HOSTNAME}.${INITIAL_DNS_ZONE_NAME}"
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))
	${UCL_CMD} set -f configs/${JAIL_NAME}@${HOST_NAME}${RECIPE_CONF_PATH} -t string .zones.0.secondary_nameserver_fqhn "${DNS_AUTH_SECONDARY_NS_HOSTNAME}.${INITIAL_DNS_ZONE_NAME}"
	ERROR_COUNT=$(( ${ERROR_COUNT} + ${?} ))

	if [ ${ERROR_COUNT} -ne 0 ]
	then
		echo -e "\n${LRED}ERROR:${NRML} Failed trying to set elements in recipe.conf.\n"
		RECIPE_SUCCESS="no"
		return
	fi

	# Mandatory: return code.
	RECIPE_SUCCESS="devel"

}

undo_cook_recipe ()
{
}
