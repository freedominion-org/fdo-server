#!/bin/sh

#### Recipe Variable Definitions ###############################################
RECIPE_JAIL_IP="${JAILS_LAN_SUBNET_C}.49"                                      # Optional:  ip address given to the jail (see FDo IP Policy)
RECIPE_PACKAGES="www/apache22"                                                 # Optional:  packages to install in the jail
RECIPE_COMPAT=1                                                                # Mandatory: Compatability level indicator
RECIPE_REQUIRES_JAIL_RESTART="no"                                              # Mandatory: "yes" if the jail requires a restart after cooking
RECIPE_REQUIRES_PORT_FORWARD="no"                                              # Mandatory: "yes" if the hosts NAT (pf/ppp) requires a restart after cooking
RECIPE_REQUIRES_HTTP_GATEWAY="yes"                                             # Mandatory:  whether this recipe requires an http gateway site
RECIPE_REQUIRES_DNS_HOSTNAME="yes"                                             # Mandatory:  whether his recipe requires a caching DNS hostname override
START_JAIL_SERVICES="apache22"                                                 # Optional:  jail services started after cooking (in left to right order)
SIDES_FILESYSTEMS=""                                                           # Optional:  names of additional ZFS filesystems required for recipe
SIDES_MOUNTPOINTS=""                                                           # Optional:  mountpoints of additional ZFS filesystems required for recipe
LDAP_HOST_IP=${LDAP_HOST_IP:-"${JAILS_LAN_SUBNET_C}.50"}                       #
################################################################################

prep_recipe ()
{
	# Find the http_gateway jail.
	# ASSUME there is only one http_gateway jail on this host and take the first one in the found list.
	find_jails_from_recipe_name "http_gateway"
	NUM_FOUND_JAILS=`echo ${FOUND_RECIPE_JAILS} | wc -w`
	if [ ${NUM_FOUND_JAILS} -lt 1 ]
	then
		echo -e "\n${LRED}ERROR:${NRML} It appears there is no http_gateway recipe jail on this host!\n" 
		PREP_SUCCESS="no"
		return
	fi
	if [ ${NUM_FOUND_JAILS} -lt 2 ]
	then
		HTTP_GATEWAY_JAIL=${FOUND_RECIPE_JAILS}
	else
		echo -e "\n${ORNG}WARNING:${NRML} More than one '${RECIPE_NAME}' recipe jail was found!\         Using the first found recipe jail config.\n"
		HTTP_GATEWAY_JAIL=`echo ${FOUND_RECIPE_JAILS} | cut -d" " -f1`
	fi

	echo -e "\n${ORNG}NOTICE:${NRML} This jail recipe requires that either a 'ldap_provider' or a"
	echo -e   "        'ldap_consumer' recipe is cooked, running and accessible on the LAN"
	echo -e   "        (local network). You must know the LDAP servers' host name, base suffix"
	echo -e   "        and root (Manager) password in order to connect to it."
	echo -e   "        If there are LAN clients, it is highly recommended that a 'dns_cache'"
	echo -e   "        recipe is cooked and running on this host or somewhere on this LAN.\n"
	echo -e   "        Useful terminology:\n"
	echo -e   "        LDAP Provider: The openldap server that provides the schema to"
	echo -e   "            consumers (master).\n"
	echo -e   "        LDAP Consumer: The openldap server that syncs from the provider and"
	echo -e   "            consumes the schema (slave).\n"

	question_yes_no "Would you like to continue to cook this jail recipe?"
	if [ "${ANSWER}" = "no" ]
	then
		PREP_SUCCESS="no"
		return
	fi

	PREP_SUCCESS="yes"
}

cook_recipe ()
{

	echo -e "\n${YELL}Next we need to install the recipe packages into the jail."
	echo -e "Please accept when prompted...${NRML}\n"
	pause_prompt 8

	# Install essential jail recipe packages from the recipe repo.
	ASSUME_ALWAYS_YES=yes pkg -j ${JAIL_NAME} install -Rfy ${RECIPE_PACKAGES}
	if [ ${?} -ne 0 ]
	then
		echo -e "\n${LRED}ERROR:${NRML} Installing of recipe packages failed.\n"
		RECIPE_SUCCESS="no"
		return
	fi

	# Get the LDAP server host address.
	LDAP_HOST_NAME=""
	while [ "${LDAP_HOST_NAME}" = "" ]
	do
		echo -e "\n"
		readee -p "${LCYN}Enter the LDAP server host address: ${NRML}" LDAP_HOST_NAME_TEMP
		test_valid_inet_address ${LDAP_HOST_IP_TEMP}
		test_valid_fqhn ${LDAP_HOST_NAME_TEMP}
		if [ "${VALID_INET_ADDRESS=}" = "yes" ] || [ "${VALID_FQHN=}" = "yes" ]
		then
			test_ping_host ${LDAP_HOST_NAME_TEMP}
			if [ "${VALID_HOST_PING}" = "no" ]
			then
				echo -e "\n${ORNG}WARNING:${NRML} The LDAP host address is not currently pingable!"
			fi
			echo -e ""
			question_yes_no "You have entered '${LDAP_HOST_NAME_TEMP}' as the LDAP host address. Is this correct?"
			if [ "${ANSWER}" = "yes" ]
			then
				LDAP_HOST_NAME=${LDAP_HOST_NAME_TEMP}
			fi
		else
			echo -e "\n${LRED}ERROR:${NRML} The LDAP host address is invalid!\n"
		fi
	done

	# Get the base suffix from user.
	## TODO: add syntax test
	LDAP_BASE_SUFFIX=""
	while [ "${LDAP_BASE_SUFFIX}" = "" ]
	do
		echo -e ""
		readee -p "${LCYN}Enter the LDAP base suffix (e.g. dc=example,dc=net): ${NRML}" LDAP_BASE_SUFFIX_TEMP
		echo -e ""
		question_yes_no "You have entered '${LDAP_BASE_SUFFIX_TEMP}' as the base suffix. Is this correct?"
		if [ "${ANSWER}" = "yes" ]
		then
			LDAP_BASE_SUFFIX=${LDAP_BASE_SUFFIX_TEMP}
		fi
	done

	# Get LDAP Manager password from user.
	LDAP_MANAGER_PASSWORD=""
	while [ "${LDAP_MANAGER_PASSWORD}" = "" ]
	do
		echo -e ""
		readee -s -p "${LCYN}Enter the LDAP Manager password: ${NRML}" LDAP_MANAGER_PASSWORD_TEMP1
		readee -s -p "${LCYN}Re-enter password              : ${NRML}" LDAP_MANAGER_PASSWORD_TEMP2
		
		if [ "${LDAP_MANAGER_PASSWORD_TEMP1}" != "${LDAP_MANAGER_PASSWORD_TEMP2}" ]
		then
			echo -e "\n${LRED}ERROR:${NRML} Password mismatch, try again!\n"
		elif [ "${LDAP_MANAGER_PASSWORD_TEMP1}" = "" ]
		then
			echo -e "\n${LRED}ERROR:${NRML} Password not entered, try again!\n"
		else
			LDAP_MANAGER_PASSWORD=${LDAP_MANAGER_PASSWORD_TEMP1}
		fi
	done

	# Get the file server host name.
	FILE_SERVER_HOST_NAME=""
	while [ "${FILE_SERVER_HOST_NAME}" = "" ]
	do
		echo -e "\n"
		readee -p "${LCYN}Enter the file server host name: ${NRML}" FILE_SERVER_HOST_NAME_TEMP
		test_valid_fqhn ${FILE_SERVER_HOST_NAME_TEMP}
		if [ "${VALID_FQHN=}" = "yes" ]
		then
			echo -e ""
			question_yes_no "You have entered '${FILE_SERVER_HOST_NAME_TEMP}' as the file server host name. Is this correct?"
			if [ "${ANSWER}" = "yes" ]
			then
				FILE_SERVER_HOST_NAME=${FILE_SERVER_HOST_NAME_TEMP}
			fi
		else
			echo -e "\n${LRED}ERROR:${NRML} The file server host name is invalid!\n"
		fi
	done

	# Get short site name.
	SHORT_SITE_NAME=""
	while [ "${SHORT_SITE_NAME}" = "" ]
	do
		echo -e ""
		readee -p "${LCYN}Enter short site name (e.g. acme-hq) : ${NRML}" SHORT_SITE_NAME_TEMP
		# Check that the short site name only contains letters, numbers and hyphens with a minimum of 3 characters.
		TEST=`echo "${SHORT_SITE_NAME_TEMP}" | sed -r "s/^[a-z0-9][a-z0-9\-]+[a-z0-9]//" | wc -L`
		if [ ${TEST} -ne 0 ] || [ "${SHORT_SITE_NAME_TEMP}" = "" ]
		then
			echo -e "\n${LRED}ERROR:${NRML} The short site name can not be '${SHORT_SITE_NAME_TEMP}'."
			echo -e "       It must be at least three characters and only contain lower case"
			echo -e "       letters, numbers and hyphens.\n"
		else
			question_yes_no "\nYou have entered '${SHORT_SITE_NAME_TEMP}' as the short site name. Is this correct?"
			if [ "${ANSWER}" = "yes" ]
			then
				SHORT_SITE_NAME=${SHORT_SITE_NAME_TEMP}
			fi
		fi
	done

	# Replace variables in ldap.conf 
	sed -i "" "s/LDAP_BASE_SUFFIX/${LDAP_BASE_SUFFIX}/" configs/${JAIL_NAME}@${HOST_NAME}/usr/local/etc/openldap/ldap.conf
	sed -i "" "s/LDAP_HOST_NAME/${LDAP_HOST_NAME}/" configs/${JAIL_NAME}@${HOST_NAME}/usr/local/etc/openldap/ldap.conf

	# Replace variables in httpd.conf
	sed -i "" "s/JAIL_IP/${JAIL_IP}/" configs/${JAIL_NAME}@${HOST_NAME}/usr/local/etc/apache22/httpd.conf
	sed -i "" "s/FILE_SERVER_HOST_NAME/${FILE_SERVER_HOST_NAME}/" configs/${JAIL_NAME}@${HOST_NAME}/usr/local/etc/apache22/httpd.conf

	# Rename webdav-sites file name
	mv configs/${JAIL_NAME}@${HOST_NAME}/usr/local/etc/webdav-sites/FILE_SERVER_HOST_NAME configs/${JAIL_NAME}@${HOST_NAME}/usr/local/etc/webdav-sites/${FILE_SERVER_HOST_NAME}

	# Remove the template webdav-sites file from the installed (jail) configs.
	rm /jls/${JAIL_NAME}/usr/local/etc/webdav-sites/FILE_SERVER_HOST_NAME

	# Replace variables in webdav-sites file
	sed -i "" "s/FILE_SERVER_HOST_NAME/${FILE_SERVER_HOST_NAME}/" configs/${JAIL_NAME}@${HOST_NAME}/usr/local/etc/webdav-sites/${FILE_SERVER_HOST_NAME}
	sed -i "" "s/LDAP_HOST_NAME/${LDAP_HOST_NAME}/" configs/${JAIL_NAME}@${HOST_NAME}/usr/local/etc/webdav-sites/${FILE_SERVER_HOST_NAME}
	sed -i "" "s/LDAP_BASE_SUFFIX/${LDAP_BASE_SUFFIX}/" configs/${JAIL_NAME}@${HOST_NAME}/usr/local/etc/webdav-sites/${FILE_SERVER_HOST_NAME}
	sed -i "" "s/LDAP_MANAGER_PASSWORD/${LDAP_MANAGER_PASSWORD}/" configs/${JAIL_NAME}@${HOST_NAME}/usr/local/etc/webdav-sites/${FILE_SERVER_HOST_NAME}
	sed -i "" "s/SHORT_SITE_NAME/${SHORT_SITE_NAME}/" configs/${JAIL_NAME}@${HOST_NAME}/usr/local/etc/webdav-sites/${FILE_SERVER_HOST_NAME}

	# Replace variables in hosts file
	sed -i "" "s/JAIL_IP/${JAIL_IP}/" configs/${JAIL_NAME}@${HOST_NAME}/etc/hosts
	sed -i "" "s/JAIL_HOST_NAME/${JAIL_HOST_NAME}/" configs/${JAIL_NAME}@${HOST_NAME}/etc/hosts
	sed -i "" "s/FILE_SERVER_HOST_NAME/${FILE_SERVER_HOST_NAME}/" configs/${JAIL_NAME}@${HOST_NAME}/etc/hosts
	sed -i "" "s/LDAP_HOST_IP/${LDAP_HOST_IP}/" configs/${JAIL_NAME}@${HOST_NAME}/etc/hosts
	sed -i "" "s/LDAP_HOST_NAME/${LDAP_HOST_NAME}/" configs/${JAIL_NAME}@${HOST_NAME}/etc/hosts

	# Create /dav (WebDAV base directory)
	mkdir /jls/${JAIL_NAME}/dav
	chown www:www /jls/${JAIL_NAME}/dav

	# Generate an nginx site file for the http_gateway jail
	sed -i "" "s|FILE_SERVER_JAIL_NAME|${JAIL_NAME}|" configs/${JAIL_NAME}@${HOST_NAME}/usr/local/etc/http_gateway-site.conf
	sed -i "" "s|FILE_SERVER_JAIL_IP|${JAIL_IP}|" configs/${JAIL_NAME}@${HOST_NAME}/usr/local/etc/http_gateway-site.conf
	sed -i "" "s|FILE_SERVER_HOST_NAME|${FILE_SERVER_HOST_NAME}|" configs/${JAIL_NAME}@${HOST_NAME}/usr/local/etc/http_gateway-site.conf

	# Set RECIPE_DNS_HOSTNAMES variable so that hooks will configure the local (caching) dns overrides.
	RECIPE_DNS_HOSTNAMES="${FILE_SERVER_HOST_NAME}"

	# Mandatory: return code
	RECIPE_SUCCESS="yes"

}
